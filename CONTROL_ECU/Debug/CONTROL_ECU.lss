
CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002940  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00002940  000029d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080017a  0080017a  00002aee  2**0
                  ALLOC
  3 .stab         00002844  00000000  00000000  00002af0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015c3  00000000  00000000  00005334  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000068f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00006a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00006c87  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00009093  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000a40a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b5e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000b7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000ba97  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c465  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <__vector_4>
      14:	0c 94 ab 10 	jmp	0x2156	; 0x2156 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 45 10 	jmp	0x208a	; 0x208a <__vector_9>
      28:	0c 94 12 10 	jmp	0x2024	; 0x2024 <__vector_10>
      2c:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 38       	cpi	r26, 0x83	; 131
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 84 07 	call	0xf08	; 0xf08 <main>
      8a:	0c 94 9e 14 	jmp	0x293c	; 0x293c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 83 14 	jmp	0x2906	; 0x2906 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 67 14 	jmp	0x28ce	; 0x28ce <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 83 14 	jmp	0x2906	; 0x2906 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6f 14 	jmp	0x28de	; 0x28de <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 8f 14 	jmp	0x291e	; 0x291e <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 70 14 	jmp	0x28e0	; 0x28e0 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 8c 14 	jmp	0x2918	; 0x2918 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <BUZZER_init>:
 * Initialize the Buzzer:
 * 1. Initialize the output pin of the buzzer.
 * 2. Write 0 to the buzzer pin to turn it off.
 */
void BUZZER_init(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_OUTPUT_ID, BUZZER_PIN_OUTPUT_ID, PIN_OUTPUT);
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	67 e0       	ldi	r22, 0x07	; 7
     e04:	41 e0       	ldi	r20, 0x01	; 1
     e06:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_OUTPUT_ID, BUZZER_PIN_OUTPUT_ID, BUZZER_OFF);
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	67 e0       	ldi	r22, 0x07	; 7
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <GPIO_writePin>
}
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <BUZZER_on>:
/*
 * Description :
 * Write 1 to the buzzer pin to turn it on.
 */
void BUZZER_on(void)
{
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_OUTPUT_ID, BUZZER_PIN_OUTPUT_ID, BUZZER_ON);
     e22:	82 e0       	ldi	r24, 0x02	; 2
     e24:	67 e0       	ldi	r22, 0x07	; 7
     e26:	41 e0       	ldi	r20, 0x01	; 1
     e28:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <GPIO_writePin>
}
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <BUZZER_off>:
/*
 * Description :
 * Write 0 to the buzzer pin to turn it on.
 */
void BUZZER_off(void)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_OUTPUT_ID, BUZZER_PIN_OUTPUT_ID, BUZZER_OFF);
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	67 e0       	ldi	r22, 0x07	; 7
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <GPIO_writePin>
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <door_callBack>:
const UART_ConfigType uartConfig = {EIGHT_BIT, EVEN_PARITY, ONE_BIT, 9600};
const Timer_ConfigType timerConfig = {0, 7813, TIMER1, TIMER_0_1_F_CPU_1024, CTC};
TWI_ConfigType twiConfig = {0b00000010,4};

void door_callBack(void)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     e52:	80 91 7a 01 	lds	r24, 0x017A
     e56:	8f 5f       	subi	r24, 0xFF	; 255
     e58:	80 93 7a 01 	sts	0x017A, r24
	if(g_tick == NUMBER_OF_COMPARE_MTACHES_FOR_DOOR)
     e5c:	80 91 7a 01 	lds	r24, 0x017A
     e60:	8f 30       	cpi	r24, 0x0F	; 15
     e62:	61 f4       	brne	.+24     	; 0xe7c <door_callBack+0x32>
	{
		DcMotor_Rotate(STOP, 0);
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	60 e0       	ldi	r22, 0x00	; 0
     e68:	0e 94 24 0b 	call	0x1648	; 0x1648 <DcMotor_Rotate>
		g_tick = 0;
     e6c:	10 92 7a 01 	sts	0x017A, r1
		Timer_deInit(TIMER1);
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	0e 94 1c 12 	call	0x2438	; 0x2438 <Timer_deInit>
		UART_sendByte(CONTROL_TIMEOVER);
     e76:	80 e2       	ldi	r24, 0x20	; 32
     e78:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
	}
}
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <UART_compareTwoPass>:


uint8 UART_compareTwoPass(uint16 * password_one, uint16 *password_two)
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	00 d0       	rcall	.+0      	; 0xe88 <UART_compareTwoPass+0x6>
     e88:	00 d0       	rcall	.+0      	; 0xe8a <UART_compareTwoPass+0x8>
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	7c 83       	std	Y+4, r23	; 0x04
     e96:	6b 83       	std	Y+3, r22	; 0x03
	for(i=0; i<5 ;i++)
     e98:	10 92 7b 01 	sts	0x017B, r1
     e9c:	26 c0       	rjmp	.+76     	; 0xeea <UART_compareTwoPass+0x68>
	{
		if (password_one[i] != password_two[i])
     e9e:	80 91 7b 01 	lds	r24, 0x017B
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	9c 01       	movw	r18, r24
     ea8:	22 0f       	add	r18, r18
     eaa:	33 1f       	adc	r19, r19
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	fc 01       	movw	r30, r24
     eb2:	e2 0f       	add	r30, r18
     eb4:	f3 1f       	adc	r31, r19
     eb6:	40 81       	ld	r20, Z
     eb8:	51 81       	ldd	r21, Z+1	; 0x01
     eba:	80 91 7b 01 	lds	r24, 0x017B
     ebe:	88 2f       	mov	r24, r24
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	9c 01       	movw	r18, r24
     ec4:	22 0f       	add	r18, r18
     ec6:	33 1f       	adc	r19, r19
     ec8:	8b 81       	ldd	r24, Y+3	; 0x03
     eca:	9c 81       	ldd	r25, Y+4	; 0x04
     ecc:	fc 01       	movw	r30, r24
     ece:	e2 0f       	add	r30, r18
     ed0:	f3 1f       	adc	r31, r19
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	48 17       	cp	r20, r24
     ed8:	59 07       	cpc	r21, r25
     eda:	11 f0       	breq	.+4      	; 0xee0 <UART_compareTwoPass+0x5e>
		{
			return FALSE;
     edc:	1d 82       	std	Y+5, r1	; 0x05
     ede:	0b c0       	rjmp	.+22     	; 0xef6 <UART_compareTwoPass+0x74>
}


uint8 UART_compareTwoPass(uint16 * password_one, uint16 *password_two)
{
	for(i=0; i<5 ;i++)
     ee0:	80 91 7b 01 	lds	r24, 0x017B
     ee4:	8f 5f       	subi	r24, 0xFF	; 255
     ee6:	80 93 7b 01 	sts	0x017B, r24
     eea:	80 91 7b 01 	lds	r24, 0x017B
     eee:	85 30       	cpi	r24, 0x05	; 5
     ef0:	b0 f2       	brcs	.-84     	; 0xe9e <UART_compareTwoPass+0x1c>
		{
			return FALSE;
			break;
		}
	}
	return TRUE;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	8d 83       	std	Y+5, r24	; 0x05
     ef6:	8d 81       	ldd	r24, Y+5	; 0x05
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <main>:

int main()
{
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	cb 55       	subi	r28, 0x5B	; 91
     f16:	d0 40       	sbci	r29, 0x00	; 0
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
	uint16 password[5];
	uint16 rePassword[5];
	uint16 CHECK[5];
	uint8 val = 0;
     f22:	fe 01       	movw	r30, r28
     f24:	e7 5a       	subi	r30, 0xA7	; 167
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	10 82       	st	Z, r1

	DcMotor_init();
     f2a:	0e 94 04 0b 	call	0x1608	; 0x1608 <DcMotor_init>
	PIR_init();
     f2e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <PIR_init>
	BUZZER_init();
     f32:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <BUZZER_init>
	TWI_init(&twiConfig);
     f36:	88 e6       	ldi	r24, 0x68	; 104
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	0e 94 b8 12 	call	0x2570	; 0x2570 <TWI_init>
	UART_init(&uartConfig);
     f3e:	8c e6       	ldi	r24, 0x6C	; 108
     f40:	91 e0       	ldi	r25, 0x01	; 1
     f42:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <UART_init>

	SREG |= (1<<7);   /* Enable interrupts */
     f46:	af e5       	ldi	r26, 0x5F	; 95
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	ef e5       	ldi	r30, 0x5F	; 95
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	80 68       	ori	r24, 0x80	; 128
     f52:	8c 93       	st	X, r24

	while(UART_recieveByte() != HMI_READY);
     f54:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <UART_recieveByte>
     f58:	80 31       	cpi	r24, 0x10	; 16
     f5a:	e1 f7       	brne	.-8      	; 0xf54 <main+0x4c>
	UART_sendByte(CONTROL_READY);
     f5c:	81 e1       	ldi	r24, 0x11	; 17
     f5e:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>

	while(1)
	{
		uint16 UART_func = UART_recieveByte();
     f62:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <UART_recieveByte>
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9a af       	std	Y+58, r25	; 0x3a
     f6c:	89 af       	std	Y+57, r24	; 0x39
		switch(UART_func)
     f6e:	89 ad       	ldd	r24, Y+57	; 0x39
     f70:	9a ad       	ldd	r25, Y+58	; 0x3a
     f72:	6c 96       	adiw	r28, 0x1c	; 28
     f74:	9f af       	std	Y+63, r25	; 0x3f
     f76:	8e af       	std	Y+62, r24	; 0x3e
     f78:	6c 97       	sbiw	r28, 0x1c	; 28
     f7a:	6c 96       	adiw	r28, 0x1c	; 28
     f7c:	8e ad       	ldd	r24, Y+62	; 0x3e
     f7e:	9f ad       	ldd	r25, Y+63	; 0x3f
     f80:	6c 97       	sbiw	r28, 0x1c	; 28
     f82:	82 32       	cpi	r24, 0x22	; 34
     f84:	91 05       	cpc	r25, r1
     f86:	09 f4       	brne	.+2      	; 0xf8a <main+0x82>
     f88:	15 c3       	rjmp	.+1578   	; 0x15b4 <main+0x6ac>
     f8a:	6c 96       	adiw	r28, 0x1c	; 28
     f8c:	8e ad       	ldd	r24, Y+62	; 0x3e
     f8e:	9f ad       	ldd	r25, Y+63	; 0x3f
     f90:	6c 97       	sbiw	r28, 0x1c	; 28
     f92:	83 32       	cpi	r24, 0x23	; 35
     f94:	91 05       	cpc	r25, r1
     f96:	40 f5       	brcc	.+80     	; 0xfe8 <main+0xe0>
     f98:	6c 96       	adiw	r28, 0x1c	; 28
     f9a:	8e ad       	ldd	r24, Y+62	; 0x3e
     f9c:	9f ad       	ldd	r25, Y+63	; 0x3f
     f9e:	6c 97       	sbiw	r28, 0x1c	; 28
     fa0:	82 31       	cpi	r24, 0x12	; 18
     fa2:	91 05       	cpc	r25, r1
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <main+0xa0>
     fa6:	45 c0       	rjmp	.+138    	; 0x1032 <main+0x12a>
     fa8:	6c 96       	adiw	r28, 0x1c	; 28
     faa:	8e ad       	ldd	r24, Y+62	; 0x3e
     fac:	9f ad       	ldd	r25, Y+63	; 0x3f
     fae:	6c 97       	sbiw	r28, 0x1c	; 28
     fb0:	83 31       	cpi	r24, 0x13	; 19
     fb2:	91 05       	cpc	r25, r1
     fb4:	40 f4       	brcc	.+16     	; 0xfc6 <main+0xbe>
     fb6:	6c 96       	adiw	r28, 0x1c	; 28
     fb8:	8e ad       	ldd	r24, Y+62	; 0x3e
     fba:	9f ad       	ldd	r25, Y+63	; 0x3f
     fbc:	6c 97       	sbiw	r28, 0x1c	; 28
     fbe:	80 31       	cpi	r24, 0x10	; 16
     fc0:	91 05       	cpc	r25, r1
     fc2:	99 f1       	breq	.+102    	; 0x102a <main+0x122>
     fc4:	ce cf       	rjmp	.-100    	; 0xf62 <main+0x5a>
     fc6:	6c 96       	adiw	r28, 0x1c	; 28
     fc8:	8e ad       	ldd	r24, Y+62	; 0x3e
     fca:	9f ad       	ldd	r25, Y+63	; 0x3f
     fcc:	6c 97       	sbiw	r28, 0x1c	; 28
     fce:	83 31       	cpi	r24, 0x13	; 19
     fd0:	91 05       	cpc	r25, r1
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <main+0xce>
     fd4:	54 c0       	rjmp	.+168    	; 0x107e <main+0x176>
     fd6:	6c 96       	adiw	r28, 0x1c	; 28
     fd8:	8e ad       	ldd	r24, Y+62	; 0x3e
     fda:	9f ad       	ldd	r25, Y+63	; 0x3f
     fdc:	6c 97       	sbiw	r28, 0x1c	; 28
     fde:	85 31       	cpi	r24, 0x15	; 21
     fe0:	91 05       	cpc	r25, r1
     fe2:	09 f4       	brne	.+2      	; 0xfe6 <main+0xde>
     fe4:	09 c2       	rjmp	.+1042   	; 0x13f8 <main+0x4f0>
     fe6:	bd cf       	rjmp	.-134    	; 0xf62 <main+0x5a>
     fe8:	6c 96       	adiw	r28, 0x1c	; 28
     fea:	8e ad       	ldd	r24, Y+62	; 0x3e
     fec:	9f ad       	ldd	r25, Y+63	; 0x3f
     fee:	6c 97       	sbiw	r28, 0x1c	; 28
     ff0:	84 32       	cpi	r24, 0x24	; 36
     ff2:	91 05       	cpc	r25, r1
     ff4:	09 f4       	brne	.+2      	; 0xff8 <main+0xf0>
     ff6:	f4 c2       	rjmp	.+1512   	; 0x15e0 <main+0x6d8>
     ff8:	6c 96       	adiw	r28, 0x1c	; 28
     ffa:	8e ad       	ldd	r24, Y+62	; 0x3e
     ffc:	9f ad       	ldd	r25, Y+63	; 0x3f
     ffe:	6c 97       	sbiw	r28, 0x1c	; 28
    1000:	84 32       	cpi	r24, 0x24	; 36
    1002:	91 05       	cpc	r25, r1
    1004:	08 f4       	brcc	.+2      	; 0x1008 <main+0x100>
    1006:	e4 c2       	rjmp	.+1480   	; 0x15d0 <main+0x6c8>
    1008:	6c 96       	adiw	r28, 0x1c	; 28
    100a:	8e ad       	ldd	r24, Y+62	; 0x3e
    100c:	9f ad       	ldd	r25, Y+63	; 0x3f
    100e:	6c 97       	sbiw	r28, 0x1c	; 28
    1010:	85 32       	cpi	r24, 0x25	; 37
    1012:	91 05       	cpc	r25, r1
    1014:	09 f4       	brne	.+2      	; 0x1018 <main+0x110>
    1016:	f2 c2       	rjmp	.+1508   	; 0x15fc <main+0x6f4>
    1018:	6c 96       	adiw	r28, 0x1c	; 28
    101a:	8e ad       	ldd	r24, Y+62	; 0x3e
    101c:	9f ad       	ldd	r25, Y+63	; 0x3f
    101e:	6c 97       	sbiw	r28, 0x1c	; 28
    1020:	86 32       	cpi	r24, 0x26	; 38
    1022:	91 05       	cpc	r25, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <main+0x120>
    1026:	ed c2       	rjmp	.+1498   	; 0x1602 <main+0x6fa>
    1028:	9c cf       	rjmp	.-200    	; 0xf62 <main+0x5a>
		{
		case HMI_READY:
			UART_sendByte(CONTROL_READY);
    102a:	81 e1       	ldi	r24, 0x11	; 17
    102c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
    1030:	98 cf       	rjmp	.-208    	; 0xf62 <main+0x5a>
			break;

		case HMI_NEWPASS:
			UART_sendByte(CONTROL_READY);
    1032:	81 e1       	ldi	r24, 0x11	; 17
    1034:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
			for(i=0; i<5; i++)
    1038:	10 92 7b 01 	sts	0x017B, r1
    103c:	1b c0       	rjmp	.+54     	; 0x1074 <main+0x16c>
			{
				password[i] = UART_recieveByte();
    103e:	80 91 7b 01 	lds	r24, 0x017B
    1042:	08 2f       	mov	r16, r24
    1044:	10 e0       	ldi	r17, 0x00	; 0
    1046:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <UART_recieveByte>
    104a:	48 2f       	mov	r20, r24
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	98 01       	movw	r18, r16
    1050:	22 0f       	add	r18, r18
    1052:	33 1f       	adc	r19, r19
    1054:	ce 01       	movw	r24, r28
    1056:	01 96       	adiw	r24, 0x01	; 1
    1058:	82 0f       	add	r24, r18
    105a:	93 1f       	adc	r25, r19
    105c:	fc 01       	movw	r30, r24
    105e:	fa 96       	adiw	r30, 0x3a	; 58
    1060:	51 83       	std	Z+1, r21	; 0x01
    1062:	40 83       	st	Z, r20
				UART_sendByte(CONTROL_RECEIVED);
    1064:	84 e1       	ldi	r24, 0x14	; 20
    1066:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
			UART_sendByte(CONTROL_READY);
			break;

		case HMI_NEWPASS:
			UART_sendByte(CONTROL_READY);
			for(i=0; i<5; i++)
    106a:	80 91 7b 01 	lds	r24, 0x017B
    106e:	8f 5f       	subi	r24, 0xFF	; 255
    1070:	80 93 7b 01 	sts	0x017B, r24
    1074:	80 91 7b 01 	lds	r24, 0x017B
    1078:	85 30       	cpi	r24, 0x05	; 5
    107a:	08 f3       	brcs	.-62     	; 0x103e <main+0x136>
    107c:	72 cf       	rjmp	.-284    	; 0xf62 <main+0x5a>
				UART_sendByte(CONTROL_RECEIVED);
			}
			break;

		case HMI_NEWPASS2:
			UART_sendByte(CONTROL_READY);
    107e:	81 e1       	ldi	r24, 0x11	; 17
    1080:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
			for(i=0; i<5; i++)
    1084:	10 92 7b 01 	sts	0x017B, r1
    1088:	1b c0       	rjmp	.+54     	; 0x10c0 <main+0x1b8>
			{
				rePassword[i] = UART_recieveByte();
    108a:	80 91 7b 01 	lds	r24, 0x017B
    108e:	08 2f       	mov	r16, r24
    1090:	10 e0       	ldi	r17, 0x00	; 0
    1092:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <UART_recieveByte>
    1096:	48 2f       	mov	r20, r24
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	9e 01       	movw	r18, r28
    109c:	2b 5b       	subi	r18, 0xBB	; 187
    109e:	3f 4f       	sbci	r19, 0xFF	; 255
    10a0:	c8 01       	movw	r24, r16
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	f9 01       	movw	r30, r18
    10a8:	e8 0f       	add	r30, r24
    10aa:	f9 1f       	adc	r31, r25
    10ac:	51 83       	std	Z+1, r21	; 0x01
    10ae:	40 83       	st	Z, r20
				UART_sendByte(CONTROL_RECEIVED);
    10b0:	84 e1       	ldi	r24, 0x14	; 20
    10b2:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
			}
			break;

		case HMI_NEWPASS2:
			UART_sendByte(CONTROL_READY);
			for(i=0; i<5; i++)
    10b6:	80 91 7b 01 	lds	r24, 0x017B
    10ba:	8f 5f       	subi	r24, 0xFF	; 255
    10bc:	80 93 7b 01 	sts	0x017B, r24
    10c0:	80 91 7b 01 	lds	r24, 0x017B
    10c4:	85 30       	cpi	r24, 0x05	; 5
    10c6:	08 f3       	brcs	.-62     	; 0x108a <main+0x182>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a8 ec       	ldi	r26, 0xC8	; 200
    10ce:	b2 e4       	ldi	r27, 0x42	; 66
    10d0:	8d ab       	std	Y+53, r24	; 0x35
    10d2:	9e ab       	std	Y+54, r25	; 0x36
    10d4:	af ab       	std	Y+55, r26	; 0x37
    10d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d8:	6d a9       	ldd	r22, Y+53	; 0x35
    10da:	7e a9       	ldd	r23, Y+54	; 0x36
    10dc:	8f a9       	ldd	r24, Y+55	; 0x37
    10de:	98 ad       	ldd	r25, Y+56	; 0x38
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	4a ef       	ldi	r20, 0xFA	; 250
    10e6:	54 e4       	ldi	r21, 0x44	; 68
    10e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	89 ab       	std	Y+49, r24	; 0x31
    10f2:	9a ab       	std	Y+50, r25	; 0x32
    10f4:	ab ab       	std	Y+51, r26	; 0x33
    10f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10f8:	69 a9       	ldd	r22, Y+49	; 0x31
    10fa:	7a a9       	ldd	r23, Y+50	; 0x32
    10fc:	8b a9       	ldd	r24, Y+51	; 0x33
    10fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e8       	ldi	r20, 0x80	; 128
    1106:	5f e3       	ldi	r21, 0x3F	; 63
    1108:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    110c:	88 23       	and	r24, r24
    110e:	2c f4       	brge	.+10     	; 0x111a <main+0x212>
		__ticks = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	98 ab       	std	Y+48, r25	; 0x30
    1116:	8f a7       	std	Y+47, r24	; 0x2f
    1118:	3f c0       	rjmp	.+126    	; 0x1198 <main+0x290>
	else if (__tmp > 65535)
    111a:	69 a9       	ldd	r22, Y+49	; 0x31
    111c:	7a a9       	ldd	r23, Y+50	; 0x32
    111e:	8b a9       	ldd	r24, Y+51	; 0x33
    1120:	9c a9       	ldd	r25, Y+52	; 0x34
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	3f ef       	ldi	r19, 0xFF	; 255
    1126:	4f e7       	ldi	r20, 0x7F	; 127
    1128:	57 e4       	ldi	r21, 0x47	; 71
    112a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    112e:	18 16       	cp	r1, r24
    1130:	4c f5       	brge	.+82     	; 0x1184 <main+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1132:	6d a9       	ldd	r22, Y+53	; 0x35
    1134:	7e a9       	ldd	r23, Y+54	; 0x36
    1136:	8f a9       	ldd	r24, Y+55	; 0x37
    1138:	98 ad       	ldd	r25, Y+56	; 0x38
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e2       	ldi	r20, 0x20	; 32
    1140:	51 e4       	ldi	r21, 0x41	; 65
    1142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	98 ab       	std	Y+48, r25	; 0x30
    1158:	8f a7       	std	Y+47, r24	; 0x2f
    115a:	0f c0       	rjmp	.+30     	; 0x117a <main+0x272>
    115c:	88 ec       	ldi	r24, 0xC8	; 200
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9e a7       	std	Y+46, r25	; 0x2e
    1162:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1164:	8d a5       	ldd	r24, Y+45	; 0x2d
    1166:	9e a5       	ldd	r25, Y+46	; 0x2e
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <main+0x260>
    116c:	9e a7       	std	Y+46, r25	; 0x2e
    116e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1170:	8f a5       	ldd	r24, Y+47	; 0x2f
    1172:	98 a9       	ldd	r25, Y+48	; 0x30
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	98 ab       	std	Y+48, r25	; 0x30
    1178:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117a:	8f a5       	ldd	r24, Y+47	; 0x2f
    117c:	98 a9       	ldd	r25, Y+48	; 0x30
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	69 f7       	brne	.-38     	; 0x115c <main+0x254>
    1182:	14 c0       	rjmp	.+40     	; 0x11ac <main+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1184:	69 a9       	ldd	r22, Y+49	; 0x31
    1186:	7a a9       	ldd	r23, Y+50	; 0x32
    1188:	8b a9       	ldd	r24, Y+51	; 0x33
    118a:	9c a9       	ldd	r25, Y+52	; 0x34
    118c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	98 ab       	std	Y+48, r25	; 0x30
    1196:	8f a7       	std	Y+47, r24	; 0x2f
    1198:	8f a5       	ldd	r24, Y+47	; 0x2f
    119a:	98 a9       	ldd	r25, Y+48	; 0x30
    119c:	9c a7       	std	Y+44, r25	; 0x2c
    119e:	8b a7       	std	Y+43, r24	; 0x2b
    11a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    11a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <main+0x29c>
    11a8:	9c a7       	std	Y+44, r25	; 0x2c
    11aa:	8b a7       	std	Y+43, r24	; 0x2b
			{
				rePassword[i] = UART_recieveByte();
				UART_sendByte(CONTROL_RECEIVED);
			}
			_delay_ms(100);
			UART_sendByte(CONTROL_READY);
    11ac:	81 e1       	ldi	r24, 0x11	; 17
    11ae:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
			while(UART_recieveByte() != HMI_READY){};
    11b2:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <UART_recieveByte>
    11b6:	80 31       	cpi	r24, 0x10	; 16
    11b8:	e1 f7       	brne	.-8      	; 0x11b2 <main+0x2aa>
			if(UART_compareTwoPass(password, rePassword))
    11ba:	ce 01       	movw	r24, r28
    11bc:	cb 96       	adiw	r24, 0x3b	; 59
    11be:	9e 01       	movw	r18, r28
    11c0:	2b 5b       	subi	r18, 0xBB	; 187
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	b9 01       	movw	r22, r18
    11c6:	0e 94 41 07 	call	0xe82	; 0xe82 <UART_compareTwoPass>
    11ca:	88 23       	and	r24, r24
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <main+0x2c8>
    11ce:	10 c1       	rjmp	.+544    	; 0x13f0 <main+0x4e8>
			{
				UART_sendByte(CONTROL_MATCHED);
    11d0:	88 e1       	ldi	r24, 0x18	; 24
    11d2:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
				for(i=0; i<5; i++)
    11d6:	10 92 7b 01 	sts	0x017B, r1
    11da:	92 c0       	rjmp	.+292    	; 0x1300 <main+0x3f8>
				{
					EEPROM_writeByte(0x0311 + i, password[i]);
    11dc:	80 91 7b 01 	lds	r24, 0x017B
    11e0:	88 2f       	mov	r24, r24
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	8f 5e       	subi	r24, 0xEF	; 239
    11e6:	9c 4f       	sbci	r25, 0xFC	; 252
    11e8:	ac 01       	movw	r20, r24
    11ea:	80 91 7b 01 	lds	r24, 0x017B
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9c 01       	movw	r18, r24
    11f4:	22 0f       	add	r18, r18
    11f6:	33 1f       	adc	r19, r19
    11f8:	ce 01       	movw	r24, r28
    11fa:	01 96       	adiw	r24, 0x01	; 1
    11fc:	82 0f       	add	r24, r18
    11fe:	93 1f       	adc	r25, r19
    1200:	fc 01       	movw	r30, r24
    1202:	fa 96       	adiw	r30, 0x3a	; 58
    1204:	80 81       	ld	r24, Z
    1206:	91 81       	ldd	r25, Z+1	; 0x01
    1208:	28 2f       	mov	r18, r24
    120a:	ca 01       	movw	r24, r20
    120c:	62 2f       	mov	r22, r18
    120e:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <EEPROM_writeByte>
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	a0 e2       	ldi	r26, 0x20	; 32
    1218:	b1 e4       	ldi	r27, 0x41	; 65
    121a:	8f a3       	std	Y+39, r24	; 0x27
    121c:	98 a7       	std	Y+40, r25	; 0x28
    121e:	a9 a7       	std	Y+41, r26	; 0x29
    1220:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1222:	6f a1       	ldd	r22, Y+39	; 0x27
    1224:	78 a5       	ldd	r23, Y+40	; 0x28
    1226:	89 a5       	ldd	r24, Y+41	; 0x29
    1228:	9a a5       	ldd	r25, Y+42	; 0x2a
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	4a ef       	ldi	r20, 0xFA	; 250
    1230:	54 e4       	ldi	r21, 0x44	; 68
    1232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1236:	dc 01       	movw	r26, r24
    1238:	cb 01       	movw	r24, r22
    123a:	8b a3       	std	Y+35, r24	; 0x23
    123c:	9c a3       	std	Y+36, r25	; 0x24
    123e:	ad a3       	std	Y+37, r26	; 0x25
    1240:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1242:	6b a1       	ldd	r22, Y+35	; 0x23
    1244:	7c a1       	ldd	r23, Y+36	; 0x24
    1246:	8d a1       	ldd	r24, Y+37	; 0x25
    1248:	9e a1       	ldd	r25, Y+38	; 0x26
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e8       	ldi	r20, 0x80	; 128
    1250:	5f e3       	ldi	r21, 0x3F	; 63
    1252:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1256:	88 23       	and	r24, r24
    1258:	2c f4       	brge	.+10     	; 0x1264 <main+0x35c>
		__ticks = 1;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	9a a3       	std	Y+34, r25	; 0x22
    1260:	89 a3       	std	Y+33, r24	; 0x21
    1262:	3f c0       	rjmp	.+126    	; 0x12e2 <main+0x3da>
	else if (__tmp > 65535)
    1264:	6b a1       	ldd	r22, Y+35	; 0x23
    1266:	7c a1       	ldd	r23, Y+36	; 0x24
    1268:	8d a1       	ldd	r24, Y+37	; 0x25
    126a:	9e a1       	ldd	r25, Y+38	; 0x26
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	3f ef       	ldi	r19, 0xFF	; 255
    1270:	4f e7       	ldi	r20, 0x7F	; 127
    1272:	57 e4       	ldi	r21, 0x47	; 71
    1274:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1278:	18 16       	cp	r1, r24
    127a:	4c f5       	brge	.+82     	; 0x12ce <main+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    127c:	6f a1       	ldd	r22, Y+39	; 0x27
    127e:	78 a5       	ldd	r23, Y+40	; 0x28
    1280:	89 a5       	ldd	r24, Y+41	; 0x29
    1282:	9a a5       	ldd	r25, Y+42	; 0x2a
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 e2       	ldi	r20, 0x20	; 32
    128a:	51 e4       	ldi	r21, 0x41	; 65
    128c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	9a a3       	std	Y+34, r25	; 0x22
    12a2:	89 a3       	std	Y+33, r24	; 0x21
    12a4:	0f c0       	rjmp	.+30     	; 0x12c4 <main+0x3bc>
    12a6:	88 ec       	ldi	r24, 0xC8	; 200
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	98 a3       	std	Y+32, r25	; 0x20
    12ac:	8f 8f       	std	Y+31, r24	; 0x1f
    12ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12b0:	98 a1       	ldd	r25, Y+32	; 0x20
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	f1 f7       	brne	.-4      	; 0x12b2 <main+0x3aa>
    12b6:	98 a3       	std	Y+32, r25	; 0x20
    12b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ba:	89 a1       	ldd	r24, Y+33	; 0x21
    12bc:	9a a1       	ldd	r25, Y+34	; 0x22
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	9a a3       	std	Y+34, r25	; 0x22
    12c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c4:	89 a1       	ldd	r24, Y+33	; 0x21
    12c6:	9a a1       	ldd	r25, Y+34	; 0x22
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	69 f7       	brne	.-38     	; 0x12a6 <main+0x39e>
    12cc:	14 c0       	rjmp	.+40     	; 0x12f6 <main+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ce:	6b a1       	ldd	r22, Y+35	; 0x23
    12d0:	7c a1       	ldd	r23, Y+36	; 0x24
    12d2:	8d a1       	ldd	r24, Y+37	; 0x25
    12d4:	9e a1       	ldd	r25, Y+38	; 0x26
    12d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	9a a3       	std	Y+34, r25	; 0x22
    12e0:	89 a3       	std	Y+33, r24	; 0x21
    12e2:	89 a1       	ldd	r24, Y+33	; 0x21
    12e4:	9a a1       	ldd	r25, Y+34	; 0x22
    12e6:	9e 8f       	std	Y+30, r25	; 0x1e
    12e8:	8d 8f       	std	Y+29, r24	; 0x1d
    12ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <main+0x3e6>
    12f2:	9e 8f       	std	Y+30, r25	; 0x1e
    12f4:	8d 8f       	std	Y+29, r24	; 0x1d
			UART_sendByte(CONTROL_READY);
			while(UART_recieveByte() != HMI_READY){};
			if(UART_compareTwoPass(password, rePassword))
			{
				UART_sendByte(CONTROL_MATCHED);
				for(i=0; i<5; i++)
    12f6:	80 91 7b 01 	lds	r24, 0x017B
    12fa:	8f 5f       	subi	r24, 0xFF	; 255
    12fc:	80 93 7b 01 	sts	0x017B, r24
    1300:	80 91 7b 01 	lds	r24, 0x017B
    1304:	85 30       	cpi	r24, 0x05	; 5
    1306:	08 f4       	brcc	.+2      	; 0x130a <main+0x402>
    1308:	69 cf       	rjmp	.-302    	; 0x11dc <main+0x2d4>
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a0 e2       	ldi	r26, 0x20	; 32
    1310:	b1 e4       	ldi	r27, 0x41	; 65
    1312:	89 8f       	std	Y+25, r24	; 0x19
    1314:	9a 8f       	std	Y+26, r25	; 0x1a
    1316:	ab 8f       	std	Y+27, r26	; 0x1b
    1318:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131a:	69 8d       	ldd	r22, Y+25	; 0x19
    131c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    131e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1320:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	4a ef       	ldi	r20, 0xFA	; 250
    1328:	54 e4       	ldi	r21, 0x44	; 68
    132a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	8d 8b       	std	Y+21, r24	; 0x15
    1334:	9e 8b       	std	Y+22, r25	; 0x16
    1336:	af 8b       	std	Y+23, r26	; 0x17
    1338:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    133a:	6d 89       	ldd	r22, Y+21	; 0x15
    133c:	7e 89       	ldd	r23, Y+22	; 0x16
    133e:	8f 89       	ldd	r24, Y+23	; 0x17
    1340:	98 8d       	ldd	r25, Y+24	; 0x18
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e8       	ldi	r20, 0x80	; 128
    1348:	5f e3       	ldi	r21, 0x3F	; 63
    134a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    134e:	88 23       	and	r24, r24
    1350:	2c f4       	brge	.+10     	; 0x135c <main+0x454>
		__ticks = 1;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9c 8b       	std	Y+20, r25	; 0x14
    1358:	8b 8b       	std	Y+19, r24	; 0x13
    135a:	3f c0       	rjmp	.+126    	; 0x13da <main+0x4d2>
	else if (__tmp > 65535)
    135c:	6d 89       	ldd	r22, Y+21	; 0x15
    135e:	7e 89       	ldd	r23, Y+22	; 0x16
    1360:	8f 89       	ldd	r24, Y+23	; 0x17
    1362:	98 8d       	ldd	r25, Y+24	; 0x18
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	3f ef       	ldi	r19, 0xFF	; 255
    1368:	4f e7       	ldi	r20, 0x7F	; 127
    136a:	57 e4       	ldi	r21, 0x47	; 71
    136c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1370:	18 16       	cp	r1, r24
    1372:	4c f5       	brge	.+82     	; 0x13c6 <main+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1374:	69 8d       	ldd	r22, Y+25	; 0x19
    1376:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1378:	8b 8d       	ldd	r24, Y+27	; 0x1b
    137a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 e2       	ldi	r20, 0x20	; 32
    1382:	51 e4       	ldi	r21, 0x41	; 65
    1384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	9c 8b       	std	Y+20, r25	; 0x14
    139a:	8b 8b       	std	Y+19, r24	; 0x13
    139c:	0f c0       	rjmp	.+30     	; 0x13bc <main+0x4b4>
    139e:	88 ec       	ldi	r24, 0xC8	; 200
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	9a 8b       	std	Y+18, r25	; 0x12
    13a4:	89 8b       	std	Y+17, r24	; 0x11
    13a6:	89 89       	ldd	r24, Y+17	; 0x11
    13a8:	9a 89       	ldd	r25, Y+18	; 0x12
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <main+0x4a2>
    13ae:	9a 8b       	std	Y+18, r25	; 0x12
    13b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b2:	8b 89       	ldd	r24, Y+19	; 0x13
    13b4:	9c 89       	ldd	r25, Y+20	; 0x14
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	9c 8b       	std	Y+20, r25	; 0x14
    13ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13bc:	8b 89       	ldd	r24, Y+19	; 0x13
    13be:	9c 89       	ldd	r25, Y+20	; 0x14
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	69 f7       	brne	.-38     	; 0x139e <main+0x496>
    13c4:	ce cd       	rjmp	.-1124   	; 0xf62 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c6:	6d 89       	ldd	r22, Y+21	; 0x15
    13c8:	7e 89       	ldd	r23, Y+22	; 0x16
    13ca:	8f 89       	ldd	r24, Y+23	; 0x17
    13cc:	98 8d       	ldd	r25, Y+24	; 0x18
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	9c 8b       	std	Y+20, r25	; 0x14
    13d8:	8b 8b       	std	Y+19, r24	; 0x13
    13da:	8b 89       	ldd	r24, Y+19	; 0x13
    13dc:	9c 89       	ldd	r25, Y+20	; 0x14
    13de:	98 8b       	std	Y+16, r25	; 0x10
    13e0:	8f 87       	std	Y+15, r24	; 0x0f
    13e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e4:	98 89       	ldd	r25, Y+16	; 0x10
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <main+0x4de>
    13ea:	98 8b       	std	Y+16, r25	; 0x10
    13ec:	8f 87       	std	Y+15, r24	; 0x0f
    13ee:	b9 cd       	rjmp	.-1166   	; 0xf62 <main+0x5a>
					_delay_ms(10);
				}
				_delay_ms(10);

			}
			else UART_sendByte(CONTROL_UNMATCHED);
    13f0:	89 e1       	ldi	r24, 0x19	; 25
    13f2:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
    13f6:	b5 cd       	rjmp	.-1174   	; 0xf62 <main+0x5a>
			break;

		case HMI_CHECK_PASS:
			UART_sendByte(CONTROL_READY);
    13f8:	81 e1       	ldi	r24, 0x11	; 17
    13fa:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
			/* receive password from user */
			for(i=0; i<5; i++)
    13fe:	10 92 7b 01 	sts	0x017B, r1
    1402:	1b c0       	rjmp	.+54     	; 0x143a <main+0x532>
			{
				password[i] = UART_recieveByte();
    1404:	80 91 7b 01 	lds	r24, 0x017B
    1408:	08 2f       	mov	r16, r24
    140a:	10 e0       	ldi	r17, 0x00	; 0
    140c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <UART_recieveByte>
    1410:	48 2f       	mov	r20, r24
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	98 01       	movw	r18, r16
    1416:	22 0f       	add	r18, r18
    1418:	33 1f       	adc	r19, r19
    141a:	ce 01       	movw	r24, r28
    141c:	01 96       	adiw	r24, 0x01	; 1
    141e:	82 0f       	add	r24, r18
    1420:	93 1f       	adc	r25, r19
    1422:	fc 01       	movw	r30, r24
    1424:	fa 96       	adiw	r30, 0x3a	; 58
    1426:	51 83       	std	Z+1, r21	; 0x01
    1428:	40 83       	st	Z, r20
				UART_sendByte(CONTROL_RECEIVED);
    142a:	84 e1       	ldi	r24, 0x14	; 20
    142c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
			break;

		case HMI_CHECK_PASS:
			UART_sendByte(CONTROL_READY);
			/* receive password from user */
			for(i=0; i<5; i++)
    1430:	80 91 7b 01 	lds	r24, 0x017B
    1434:	8f 5f       	subi	r24, 0xFF	; 255
    1436:	80 93 7b 01 	sts	0x017B, r24
    143a:	80 91 7b 01 	lds	r24, 0x017B
    143e:	85 30       	cpi	r24, 0x05	; 5
    1440:	08 f3       	brcs	.-62     	; 0x1404 <main+0x4fc>
				password[i] = UART_recieveByte();
				UART_sendByte(CONTROL_RECEIVED);
			}

			/* retrieve password from EEPROM */
			for(i=0; i<5; i++)
    1442:	10 92 7b 01 	sts	0x017B, r1
    1446:	98 c0       	rjmp	.+304    	; 0x1578 <main+0x670>
			{
				EEPROM_readByte(0x0311 + i, &val);
    1448:	80 91 7b 01 	lds	r24, 0x017B
    144c:	88 2f       	mov	r24, r24
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	8f 5e       	subi	r24, 0xEF	; 239
    1452:	9c 4f       	sbci	r25, 0xFC	; 252
    1454:	9e 01       	movw	r18, r28
    1456:	27 5a       	subi	r18, 0xA7	; 167
    1458:	3f 4f       	sbci	r19, 0xFF	; 255
    145a:	b9 01       	movw	r22, r18
    145c:	0e 94 9f 0b 	call	0x173e	; 0x173e <EEPROM_readByte>
				CHECK[i]=val;
    1460:	80 91 7b 01 	lds	r24, 0x017B
    1464:	68 2f       	mov	r22, r24
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	fe 01       	movw	r30, r28
    146a:	e7 5a       	subi	r30, 0xA7	; 167
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	80 81       	ld	r24, Z
    1470:	48 2f       	mov	r20, r24
    1472:	50 e0       	ldi	r21, 0x00	; 0
    1474:	9e 01       	movw	r18, r28
    1476:	21 5b       	subi	r18, 0xB1	; 177
    1478:	3f 4f       	sbci	r19, 0xFF	; 255
    147a:	cb 01       	movw	r24, r22
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	f9 01       	movw	r30, r18
    1482:	e8 0f       	add	r30, r24
    1484:	f9 1f       	adc	r31, r25
    1486:	51 83       	std	Z+1, r21	; 0x01
    1488:	40 83       	st	Z, r20
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	a0 e2       	ldi	r26, 0x20	; 32
    1490:	b1 e4       	ldi	r27, 0x41	; 65
    1492:	8b 87       	std	Y+11, r24	; 0x0b
    1494:	9c 87       	std	Y+12, r25	; 0x0c
    1496:	ad 87       	std	Y+13, r26	; 0x0d
    1498:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149a:	6b 85       	ldd	r22, Y+11	; 0x0b
    149c:	7c 85       	ldd	r23, Y+12	; 0x0c
    149e:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	4a ef       	ldi	r20, 0xFA	; 250
    14a8:	54 e4       	ldi	r21, 0x44	; 68
    14aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	8f 83       	std	Y+7, r24	; 0x07
    14b4:	98 87       	std	Y+8, r25	; 0x08
    14b6:	a9 87       	std	Y+9, r26	; 0x09
    14b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ba:	6f 81       	ldd	r22, Y+7	; 0x07
    14bc:	78 85       	ldd	r23, Y+8	; 0x08
    14be:	89 85       	ldd	r24, Y+9	; 0x09
    14c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e8       	ldi	r20, 0x80	; 128
    14c8:	5f e3       	ldi	r21, 0x3F	; 63
    14ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14ce:	88 23       	and	r24, r24
    14d0:	2c f4       	brge	.+10     	; 0x14dc <main+0x5d4>
		__ticks = 1;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	9e 83       	std	Y+6, r25	; 0x06
    14d8:	8d 83       	std	Y+5, r24	; 0x05
    14da:	3f c0       	rjmp	.+126    	; 0x155a <main+0x652>
	else if (__tmp > 65535)
    14dc:	6f 81       	ldd	r22, Y+7	; 0x07
    14de:	78 85       	ldd	r23, Y+8	; 0x08
    14e0:	89 85       	ldd	r24, Y+9	; 0x09
    14e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	3f ef       	ldi	r19, 0xFF	; 255
    14e8:	4f e7       	ldi	r20, 0x7F	; 127
    14ea:	57 e4       	ldi	r21, 0x47	; 71
    14ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14f0:	18 16       	cp	r1, r24
    14f2:	4c f5       	brge	.+82     	; 0x1546 <main+0x63e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e2       	ldi	r20, 0x20	; 32
    1502:	51 e4       	ldi	r21, 0x41	; 65
    1504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	bc 01       	movw	r22, r24
    150e:	cd 01       	movw	r24, r26
    1510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	9e 83       	std	Y+6, r25	; 0x06
    151a:	8d 83       	std	Y+5, r24	; 0x05
    151c:	0f c0       	rjmp	.+30     	; 0x153c <main+0x634>
    151e:	88 ec       	ldi	r24, 0xC8	; 200
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	9c 83       	std	Y+4, r25	; 0x04
    1524:	8b 83       	std	Y+3, r24	; 0x03
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	9c 81       	ldd	r25, Y+4	; 0x04
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	f1 f7       	brne	.-4      	; 0x152a <main+0x622>
    152e:	9c 83       	std	Y+4, r25	; 0x04
    1530:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1532:	8d 81       	ldd	r24, Y+5	; 0x05
    1534:	9e 81       	ldd	r25, Y+6	; 0x06
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	9e 83       	std	Y+6, r25	; 0x06
    153a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    153c:	8d 81       	ldd	r24, Y+5	; 0x05
    153e:	9e 81       	ldd	r25, Y+6	; 0x06
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	69 f7       	brne	.-38     	; 0x151e <main+0x616>
    1544:	14 c0       	rjmp	.+40     	; 0x156e <main+0x666>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1546:	6f 81       	ldd	r22, Y+7	; 0x07
    1548:	78 85       	ldd	r23, Y+8	; 0x08
    154a:	89 85       	ldd	r24, Y+9	; 0x09
    154c:	9a 85       	ldd	r25, Y+10	; 0x0a
    154e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	9e 83       	std	Y+6, r25	; 0x06
    1558:	8d 83       	std	Y+5, r24	; 0x05
    155a:	8d 81       	ldd	r24, Y+5	; 0x05
    155c:	9e 81       	ldd	r25, Y+6	; 0x06
    155e:	9a 83       	std	Y+2, r25	; 0x02
    1560:	89 83       	std	Y+1, r24	; 0x01
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	9a 81       	ldd	r25, Y+2	; 0x02
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	f1 f7       	brne	.-4      	; 0x1566 <main+0x65e>
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
				password[i] = UART_recieveByte();
				UART_sendByte(CONTROL_RECEIVED);
			}

			/* retrieve password from EEPROM */
			for(i=0; i<5; i++)
    156e:	80 91 7b 01 	lds	r24, 0x017B
    1572:	8f 5f       	subi	r24, 0xFF	; 255
    1574:	80 93 7b 01 	sts	0x017B, r24
    1578:	80 91 7b 01 	lds	r24, 0x017B
    157c:	85 30       	cpi	r24, 0x05	; 5
    157e:	08 f4       	brcc	.+2      	; 0x1582 <main+0x67a>
    1580:	63 cf       	rjmp	.-314    	; 0x1448 <main+0x540>
				EEPROM_readByte(0x0311 + i, &val);
				CHECK[i]=val;
				_delay_ms(10);
			}

			while(UART_recieveByte() != HMI_READY){};
    1582:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <UART_recieveByte>
    1586:	80 31       	cpi	r24, 0x10	; 16
    1588:	e1 f7       	brne	.-8      	; 0x1582 <main+0x67a>
			UART_sendByte(CONTROL_READY);
    158a:	81 e1       	ldi	r24, 0x11	; 17
    158c:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
			if(UART_compareTwoPass(password, CHECK))
    1590:	ce 01       	movw	r24, r28
    1592:	cb 96       	adiw	r24, 0x3b	; 59
    1594:	9e 01       	movw	r18, r28
    1596:	21 5b       	subi	r18, 0xB1	; 177
    1598:	3f 4f       	sbci	r19, 0xFF	; 255
    159a:	b9 01       	movw	r22, r18
    159c:	0e 94 41 07 	call	0xe82	; 0xe82 <UART_compareTwoPass>
    15a0:	88 23       	and	r24, r24
    15a2:	21 f0       	breq	.+8      	; 0x15ac <main+0x6a4>
			{
				UART_sendByte(CONTROL_SUCCESS);
    15a4:	86 e1       	ldi	r24, 0x16	; 22
    15a6:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
    15aa:	db cc       	rjmp	.-1610   	; 0xf62 <main+0x5a>
			}
			else
			{
				UART_sendByte(CONTROL_FAILURE);
    15ac:	87 e1       	ldi	r24, 0x17	; 23
    15ae:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
    15b2:	d7 cc       	rjmp	.-1618   	; 0xf62 <main+0x5a>
			}
			break;

		case HMI_OPEN_DOOR:
			DcMotor_Rotate(CLOCKWISE, 100);
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	64 e6       	ldi	r22, 0x64	; 100
    15b8:	0e 94 24 0b 	call	0x1648	; 0x1648 <DcMotor_Rotate>
			Timer_setCallBack(&door_callBack, TIMER1);
    15bc:	85 e2       	ldi	r24, 0x25	; 37
    15be:	97 e0       	ldi	r25, 0x07	; 7
    15c0:	61 e0       	ldi	r22, 0x01	; 1
    15c2:	0e 94 7f 12 	call	0x24fe	; 0x24fe <Timer_setCallBack>
			Timer_init(&timerConfig);
    15c6:	83 e7       	ldi	r24, 0x73	; 115
    15c8:	91 e0       	ldi	r25, 0x01	; 1
    15ca:	0e 94 11 11 	call	0x2222	; 0x2222 <Timer_init>
    15ce:	c9 cc       	rjmp	.-1646   	; 0xf62 <main+0x5a>
			break;

		case HMI_CHECKPEOPLE:
			while(PIR_getState() == PIR_MOTION_DETECTED){};
    15d0:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <PIR_getState>
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	e1 f3       	breq	.-8      	; 0x15d0 <main+0x6c8>
			UART_sendByte(CONTROL_NOPEOPLE);
    15d8:	81 e2       	ldi	r24, 0x21	; 33
    15da:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
    15de:	c1 cc       	rjmp	.-1662   	; 0xf62 <main+0x5a>
			break;

		case HMI_CLOSEDOOR:
			DcMotor_Rotate(ANTI_CLOCKWISE, 100);
    15e0:	82 e0       	ldi	r24, 0x02	; 2
    15e2:	64 e6       	ldi	r22, 0x64	; 100
    15e4:	0e 94 24 0b 	call	0x1648	; 0x1648 <DcMotor_Rotate>
			Timer_setCallBack(&door_callBack, TIMER1);
    15e8:	85 e2       	ldi	r24, 0x25	; 37
    15ea:	97 e0       	ldi	r25, 0x07	; 7
    15ec:	61 e0       	ldi	r22, 0x01	; 1
    15ee:	0e 94 7f 12 	call	0x24fe	; 0x24fe <Timer_setCallBack>
			Timer_init(&timerConfig);
    15f2:	83 e7       	ldi	r24, 0x73	; 115
    15f4:	91 e0       	ldi	r25, 0x01	; 1
    15f6:	0e 94 11 11 	call	0x2222	; 0x2222 <Timer_init>
    15fa:	b3 cc       	rjmp	.-1690   	; 0xf62 <main+0x5a>
			break;

		case HMI_WRONGPASS:
			BUZZER_on();
    15fc:	0e 94 0d 07 	call	0xe1a	; 0xe1a <BUZZER_on>
    1600:	b0 cc       	rjmp	.-1696   	; 0xf62 <main+0x5a>
			break;

		case HMI_TIMEOVER:
			BUZZER_off();
    1602:	0e 94 19 07 	call	0xe32	; 0xe32 <BUZZER_off>
    1606:	ad cc       	rjmp	.-1702   	; 0xf62 <main+0x5a>

00001608 <DcMotor_init>:
 * Description :
 * Initialize the DC motor:
 * 1. Setup the DC motor pins direction using GPIO driver.
 * 2. Turn Off the DC motor as startup using GPIO driver.
 */
void DcMotor_init(void){
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_ID, PIN_OUTPUT);
    1610:	83 e0       	ldi	r24, 0x03	; 3
    1612:	66 e0       	ldi	r22, 0x06	; 6
    1614:	41 e0       	ldi	r20, 0x01	; 1
    1616:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_ID, PIN_OUTPUT);
    161a:	83 e0       	ldi	r24, 0x03	; 3
    161c:	67 e0       	ldi	r22, 0x07	; 7
    161e:	41 e0       	ldi	r20, 0x01	; 1
    1620:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_ENABLE_ID, PIN_OUTPUT);
    1624:	83 e0       	ldi	r24, 0x03	; 3
    1626:	63 e0       	ldi	r22, 0x03	; 3
    1628:	41 e0       	ldi	r20, 0x01	; 1
    162a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_setupPinDirection>
	/* DC_MOTOR_ENABLE_ID is already initialized in PWM*/

	/* Stooping the motor at the beginning */
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_ID, LOGIC_LOW);
    162e:	83 e0       	ldi	r24, 0x03	; 3
    1630:	66 e0       	ldi	r22, 0x06	; 6
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_ID, LOGIC_LOW);
    1638:	83 e0       	ldi	r24, 0x03	; 3
    163a:	67 e0       	ldi	r22, 0x07	; 7
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <GPIO_writePin>
}
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <DcMotor_Rotate>:
 * Description :
 * Activate the DC motor:
 * 1. Write on the DC motor pins based on the input informations using GPIO driver.
 * 2. Start the PWM.
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed){
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <DcMotor_Rotate+0x6>
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	6a 83       	std	Y+2, r22	; 0x02
	g_dcMotorFanState = state;
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	80 93 7c 01 	sts	0x017C, r24

	if(state == CLOCKWISE)
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	71 f4       	brne	.+28     	; 0x167e <DcMotor_Rotate+0x36>
	{
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_ID, LOGIC_HIGH);
    1662:	83 e0       	ldi	r24, 0x03	; 3
    1664:	66 e0       	ldi	r22, 0x06	; 6
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_ID, LOGIC_LOW);
    166c:	83 e0       	ldi	r24, 0x03	; 3
    166e:	67 e0       	ldi	r22, 0x07	; 7
    1670:	40 e0       	ldi	r20, 0x00	; 0
    1672:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <GPIO_writePin>

		PWM_Timer0_Start(speed);
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <PWM_Timer0_Start>
    167c:	1e c0       	rjmp	.+60     	; 0x16ba <DcMotor_Rotate+0x72>
	}
	else if(state == ANTI_CLOCKWISE)
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	82 30       	cpi	r24, 0x02	; 2
    1682:	71 f4       	brne	.+28     	; 0x16a0 <DcMotor_Rotate+0x58>
	{
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_ID, LOGIC_LOW);
    1684:	83 e0       	ldi	r24, 0x03	; 3
    1686:	66 e0       	ldi	r22, 0x06	; 6
    1688:	40 e0       	ldi	r20, 0x00	; 0
    168a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_ID, LOGIC_HIGH);
    168e:	83 e0       	ldi	r24, 0x03	; 3
    1690:	67 e0       	ldi	r22, 0x07	; 7
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <GPIO_writePin>

		PWM_Timer0_Start(speed);
    1698:	8a 81       	ldd	r24, Y+2	; 0x02
    169a:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <PWM_Timer0_Start>
    169e:	0d c0       	rjmp	.+26     	; 0x16ba <DcMotor_Rotate+0x72>
	}
	else if(state == STOP)
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	88 23       	and	r24, r24
    16a4:	51 f4       	brne	.+20     	; 0x16ba <DcMotor_Rotate+0x72>
	{
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN1_ID, LOGIC_LOW);
    16a6:	83 e0       	ldi	r24, 0x03	; 3
    16a8:	66 e0       	ldi	r22, 0x06	; 6
    16aa:	40 e0       	ldi	r20, 0x00	; 0
    16ac:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_IN2_ID, LOGIC_LOW);
    16b0:	83 e0       	ldi	r24, 0x03	; 3
    16b2:	67 e0       	ldi	r22, 0x07	; 7
    16b4:	40 e0       	ldi	r20, 0x00	; 0
    16b6:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <GPIO_writePin>
	}
}
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <EEPROM_writeByte>:
#include "gpio.h"
#include "twi.h"


uint8 EEPROM_writeByte(uint16 u16addr,uint8 u8data)
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <EEPROM_writeByte+0x6>
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <EEPROM_writeByte+0x8>
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	89 83       	std	Y+1, r24	; 0x01
    16d4:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    16d6:	0e 94 f7 12 	call	0x25ee	; 0x25ee <TWI_start>
	if(!(TWI_getStatus() == TWI_START))
    16da:	0e 94 4f 13 	call	0x269e	; 0x269e <TWI_getStatus>
    16de:	88 30       	cpi	r24, 0x08	; 8
    16e0:	11 f0       	breq	.+4      	; 0x16e6 <EEPROM_writeByte+0x22>
		return ERROR;
    16e2:	1c 82       	std	Y+4, r1	; 0x04
    16e4:	24 c0       	rjmp	.+72     	; 0x172e <EEPROM_writeByte+0x6a>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)((u16addr & 0x0700)>>7) | (0xA0));
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	80 70       	andi	r24, 0x00	; 0
    16ec:	97 70       	andi	r25, 0x07	; 7
    16ee:	88 0f       	add	r24, r24
    16f0:	89 2f       	mov	r24, r25
    16f2:	88 1f       	adc	r24, r24
    16f4:	99 0b       	sbc	r25, r25
    16f6:	91 95       	neg	r25
    16f8:	80 6a       	ori	r24, 0xA0	; 160
    16fa:	0e 94 12 13 	call	0x2624	; 0x2624 <TWI_writeByte>
	if(!(TWI_getStatus() == TWI_MT_SLA_W_ACK))
    16fe:	0e 94 4f 13 	call	0x269e	; 0x269e <TWI_getStatus>
    1702:	88 31       	cpi	r24, 0x18	; 24
    1704:	11 f0       	breq	.+4      	; 0x170a <EEPROM_writeByte+0x46>
		return ERROR;
    1706:	1c 82       	std	Y+4, r1	; 0x04
    1708:	12 c0       	rjmp	.+36     	; 0x172e <EEPROM_writeByte+0x6a>

	/* Send the memory address */
	TWI_writeByte((uint8)(u16addr));
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	0e 94 12 13 	call	0x2624	; 0x2624 <TWI_writeByte>
	if(!(TWI_getStatus() == TWI_MT_DATA_ACK))
    1710:	0e 94 4f 13 	call	0x269e	; 0x269e <TWI_getStatus>
    1714:	88 32       	cpi	r24, 0x28	; 40
    1716:	11 f0       	breq	.+4      	; 0x171c <EEPROM_writeByte+0x58>
		return ERROR;
    1718:	1c 82       	std	Y+4, r1	; 0x04
    171a:	09 c0       	rjmp	.+18     	; 0x172e <EEPROM_writeByte+0x6a>

	/* write byte to eeprom */
	TWI_writeByte(u8data);
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	0e 94 12 13 	call	0x2624	; 0x2624 <TWI_writeByte>
	if(!(TWI_getStatus() == TWI_MR_DATA_ACK)){};
    1722:	0e 94 4f 13 	call	0x269e	; 0x269e <TWI_getStatus>

    /* Send the Stop Bit */
    TWI_stop();
    1726:	0e 94 07 13 	call	0x260e	; 0x260e <TWI_stop>

    return SUCCESS;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	8c 83       	std	Y+4, r24	; 0x04
    172e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	08 95       	ret

0000173e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr,uint8 *u8data)
{
    173e:	df 93       	push	r29
    1740:	cf 93       	push	r28
    1742:	00 d0       	rcall	.+0      	; 0x1744 <EEPROM_readByte+0x6>
    1744:	00 d0       	rcall	.+0      	; 0x1746 <EEPROM_readByte+0x8>
    1746:	0f 92       	push	r0
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
    174c:	9a 83       	std	Y+2, r25	; 0x02
    174e:	89 83       	std	Y+1, r24	; 0x01
    1750:	7c 83       	std	Y+4, r23	; 0x04
    1752:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    1754:	0e 94 f7 12 	call	0x25ee	; 0x25ee <TWI_start>
	if(!(TWI_getStatus() == TWI_START))
    1758:	0e 94 4f 13 	call	0x269e	; 0x269e <TWI_getStatus>
    175c:	88 30       	cpi	r24, 0x08	; 8
    175e:	11 f0       	breq	.+4      	; 0x1764 <EEPROM_readByte+0x26>
		return ERROR;
    1760:	1d 82       	std	Y+5, r1	; 0x05
    1762:	44 c0       	rjmp	.+136    	; 0x17ec <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)((u16addr & 0x0700)>>7) | (0xA0));
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	9a 81       	ldd	r25, Y+2	; 0x02
    1768:	80 70       	andi	r24, 0x00	; 0
    176a:	97 70       	andi	r25, 0x07	; 7
    176c:	88 0f       	add	r24, r24
    176e:	89 2f       	mov	r24, r25
    1770:	88 1f       	adc	r24, r24
    1772:	99 0b       	sbc	r25, r25
    1774:	91 95       	neg	r25
    1776:	80 6a       	ori	r24, 0xA0	; 160
    1778:	0e 94 12 13 	call	0x2624	; 0x2624 <TWI_writeByte>
	if(!(TWI_getStatus() == TWI_MT_SLA_W_ACK))
    177c:	0e 94 4f 13 	call	0x269e	; 0x269e <TWI_getStatus>
    1780:	88 31       	cpi	r24, 0x18	; 24
    1782:	11 f0       	breq	.+4      	; 0x1788 <EEPROM_readByte+0x4a>
		return ERROR;
    1784:	1d 82       	std	Y+5, r1	; 0x05
    1786:	32 c0       	rjmp	.+100    	; 0x17ec <EEPROM_readByte+0xae>

	/* Send the memory address */
	TWI_writeByte((uint8)(u16addr));
    1788:	89 81       	ldd	r24, Y+1	; 0x01
    178a:	0e 94 12 13 	call	0x2624	; 0x2624 <TWI_writeByte>
	if(!(TWI_getStatus() == TWI_MT_DATA_ACK))
    178e:	0e 94 4f 13 	call	0x269e	; 0x269e <TWI_getStatus>
    1792:	88 32       	cpi	r24, 0x28	; 40
    1794:	11 f0       	breq	.+4      	; 0x179a <EEPROM_readByte+0x5c>
		return ERROR;
    1796:	1d 82       	std	Y+5, r1	; 0x05
    1798:	29 c0       	rjmp	.+82     	; 0x17ec <EEPROM_readByte+0xae>

	/* Resend the Start Bit */
	TWI_start();
    179a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <TWI_start>
	if(!(TWI_getStatus() == TWI_REP_START))
    179e:	0e 94 4f 13 	call	0x269e	; 0x269e <TWI_getStatus>
    17a2:	80 31       	cpi	r24, 0x10	; 16
    17a4:	11 f0       	breq	.+4      	; 0x17aa <EEPROM_readByte+0x6c>
		return ERROR;
    17a6:	1d 82       	std	Y+5, r1	; 0x05
    17a8:	21 c0       	rjmp	.+66     	; 0x17ec <EEPROM_readByte+0xae>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (read) */
	TWI_writeByte((uint8)((u16addr & 0x0700)>>7) | (0xA0) | 1);
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	9a 81       	ldd	r25, Y+2	; 0x02
    17ae:	80 70       	andi	r24, 0x00	; 0
    17b0:	97 70       	andi	r25, 0x07	; 7
    17b2:	88 0f       	add	r24, r24
    17b4:	89 2f       	mov	r24, r25
    17b6:	88 1f       	adc	r24, r24
    17b8:	99 0b       	sbc	r25, r25
    17ba:	91 95       	neg	r25
    17bc:	81 6a       	ori	r24, 0xA1	; 161
    17be:	0e 94 12 13 	call	0x2624	; 0x2624 <TWI_writeByte>
	if(!(TWI_getStatus() == TWI_MT_SLA_R_ACK))
    17c2:	0e 94 4f 13 	call	0x269e	; 0x269e <TWI_getStatus>
    17c6:	80 34       	cpi	r24, 0x40	; 64
    17c8:	11 f0       	breq	.+4      	; 0x17ce <EEPROM_readByte+0x90>
		return ERROR;
    17ca:	1d 82       	std	Y+5, r1	; 0x05
    17cc:	0f c0       	rjmp	.+30     	; 0x17ec <EEPROM_readByte+0xae>

	/* Read the data From EEPROM */
	*u8data = TWI_readByteWithNACK();
    17ce:	0e 94 3c 13 	call	0x2678	; 0x2678 <TWI_readByteWithNACK>
    17d2:	eb 81       	ldd	r30, Y+3	; 0x03
    17d4:	fc 81       	ldd	r31, Y+4	; 0x04
    17d6:	80 83       	st	Z, r24
	if(!(TWI_getStatus() == TWI_MR_DATA_NACK))
    17d8:	0e 94 4f 13 	call	0x269e	; 0x269e <TWI_getStatus>
    17dc:	88 35       	cpi	r24, 0x58	; 88
    17de:	11 f0       	breq	.+4      	; 0x17e4 <EEPROM_readByte+0xa6>
		return ERROR;
    17e0:	1d 82       	std	Y+5, r1	; 0x05
    17e2:	04 c0       	rjmp	.+8      	; 0x17ec <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    17e4:	0e 94 07 13 	call	0x260e	; 0x260e <TWI_stop>

    return SUCCESS;
    17e8:	81 e0       	ldi	r24, 0x01	; 1
    17ea:	8d 83       	std	Y+5, r24	; 0x05
    17ec:	8d 81       	ldd	r24, Y+5	; 0x05
}
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	00 d0       	rcall	.+0      	; 0x1804 <GPIO_setupPinDirection+0x6>
    1804:	00 d0       	rcall	.+0      	; 0x1806 <GPIO_setupPinDirection+0x8>
    1806:	0f 92       	push	r0
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	6a 83       	std	Y+2, r22	; 0x02
    1810:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	88 30       	cpi	r24, 0x08	; 8
    1816:	08 f0       	brcs	.+2      	; 0x181a <GPIO_setupPinDirection+0x1c>
    1818:	d5 c0       	rjmp	.+426    	; 0x19c4 <GPIO_setupPinDirection+0x1c6>
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	84 30       	cpi	r24, 0x04	; 4
    181e:	08 f0       	brcs	.+2      	; 0x1822 <GPIO_setupPinDirection+0x24>
    1820:	d1 c0       	rjmp	.+418    	; 0x19c4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	28 2f       	mov	r18, r24
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	3d 83       	std	Y+5, r19	; 0x05
    182a:	2c 83       	std	Y+4, r18	; 0x04
    182c:	8c 81       	ldd	r24, Y+4	; 0x04
    182e:	9d 81       	ldd	r25, Y+5	; 0x05
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	09 f4       	brne	.+2      	; 0x1838 <GPIO_setupPinDirection+0x3a>
    1836:	43 c0       	rjmp	.+134    	; 0x18be <GPIO_setupPinDirection+0xc0>
    1838:	2c 81       	ldd	r18, Y+4	; 0x04
    183a:	3d 81       	ldd	r19, Y+5	; 0x05
    183c:	22 30       	cpi	r18, 0x02	; 2
    183e:	31 05       	cpc	r19, r1
    1840:	2c f4       	brge	.+10     	; 0x184c <GPIO_setupPinDirection+0x4e>
    1842:	8c 81       	ldd	r24, Y+4	; 0x04
    1844:	9d 81       	ldd	r25, Y+5	; 0x05
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	71 f0       	breq	.+28     	; 0x1866 <GPIO_setupPinDirection+0x68>
    184a:	bc c0       	rjmp	.+376    	; 0x19c4 <GPIO_setupPinDirection+0x1c6>
    184c:	2c 81       	ldd	r18, Y+4	; 0x04
    184e:	3d 81       	ldd	r19, Y+5	; 0x05
    1850:	22 30       	cpi	r18, 0x02	; 2
    1852:	31 05       	cpc	r19, r1
    1854:	09 f4       	brne	.+2      	; 0x1858 <GPIO_setupPinDirection+0x5a>
    1856:	5f c0       	rjmp	.+190    	; 0x1916 <GPIO_setupPinDirection+0x118>
    1858:	8c 81       	ldd	r24, Y+4	; 0x04
    185a:	9d 81       	ldd	r25, Y+5	; 0x05
    185c:	83 30       	cpi	r24, 0x03	; 3
    185e:	91 05       	cpc	r25, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <GPIO_setupPinDirection+0x66>
    1862:	85 c0       	rjmp	.+266    	; 0x196e <GPIO_setupPinDirection+0x170>
    1864:	af c0       	rjmp	.+350    	; 0x19c4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	a1 f4       	brne	.+40     	; 0x1894 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    186c:	aa e3       	ldi	r26, 0x3A	; 58
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	ea e3       	ldi	r30, 0x3A	; 58
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	48 2f       	mov	r20, r24
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <GPIO_setupPinDirection+0x8c>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <GPIO_setupPinDirection+0x88>
    188e:	84 2b       	or	r24, r20
    1890:	8c 93       	st	X, r24
    1892:	98 c0       	rjmp	.+304    	; 0x19c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1894:	aa e3       	ldi	r26, 0x3A	; 58
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	ea e3       	ldi	r30, 0x3A	; 58
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 2e       	mov	r0, r18
    18ac:	02 c0       	rjmp	.+4      	; 0x18b2 <GPIO_setupPinDirection+0xb4>
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	0a 94       	dec	r0
    18b4:	e2 f7       	brpl	.-8      	; 0x18ae <GPIO_setupPinDirection+0xb0>
    18b6:	80 95       	com	r24
    18b8:	84 23       	and	r24, r20
    18ba:	8c 93       	st	X, r24
    18bc:	83 c0       	rjmp	.+262    	; 0x19c4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	a1 f4       	brne	.+40     	; 0x18ec <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    18c4:	a7 e3       	ldi	r26, 0x37	; 55
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e7 e3       	ldi	r30, 0x37	; 55
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	48 2f       	mov	r20, r24
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	28 2f       	mov	r18, r24
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	02 2e       	mov	r0, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <GPIO_setupPinDirection+0xe4>
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	0a 94       	dec	r0
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <GPIO_setupPinDirection+0xe0>
    18e6:	84 2b       	or	r24, r20
    18e8:	8c 93       	st	X, r24
    18ea:	6c c0       	rjmp	.+216    	; 0x19c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    18ec:	a7 e3       	ldi	r26, 0x37	; 55
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e7 e3       	ldi	r30, 0x37	; 55
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	48 2f       	mov	r20, r24
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	02 2e       	mov	r0, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <GPIO_setupPinDirection+0x10c>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	0a 94       	dec	r0
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <GPIO_setupPinDirection+0x108>
    190e:	80 95       	com	r24
    1910:	84 23       	and	r24, r20
    1912:	8c 93       	st	X, r24
    1914:	57 c0       	rjmp	.+174    	; 0x19c4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	81 30       	cpi	r24, 0x01	; 1
    191a:	a1 f4       	brne	.+40     	; 0x1944 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    191c:	a4 e3       	ldi	r26, 0x34	; 52
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e4 e3       	ldi	r30, 0x34	; 52
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	48 2f       	mov	r20, r24
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	02 2e       	mov	r0, r18
    1934:	02 c0       	rjmp	.+4      	; 0x193a <GPIO_setupPinDirection+0x13c>
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	0a 94       	dec	r0
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <GPIO_setupPinDirection+0x138>
    193e:	84 2b       	or	r24, r20
    1940:	8c 93       	st	X, r24
    1942:	40 c0       	rjmp	.+128    	; 0x19c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1944:	a4 e3       	ldi	r26, 0x34	; 52
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e4 e3       	ldi	r30, 0x34	; 52
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	48 2f       	mov	r20, r24
    1950:	8a 81       	ldd	r24, Y+2	; 0x02
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 2e       	mov	r0, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <GPIO_setupPinDirection+0x164>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	0a 94       	dec	r0
    1964:	e2 f7       	brpl	.-8      	; 0x195e <GPIO_setupPinDirection+0x160>
    1966:	80 95       	com	r24
    1968:	84 23       	and	r24, r20
    196a:	8c 93       	st	X, r24
    196c:	2b c0       	rjmp	.+86     	; 0x19c4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	a1 f4       	brne	.+40     	; 0x199c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1974:	a1 e3       	ldi	r26, 0x31	; 49
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e1 e3       	ldi	r30, 0x31	; 49
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	48 2f       	mov	r20, r24
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	02 2e       	mov	r0, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <GPIO_setupPinDirection+0x194>
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	0a 94       	dec	r0
    1994:	e2 f7       	brpl	.-8      	; 0x198e <GPIO_setupPinDirection+0x190>
    1996:	84 2b       	or	r24, r20
    1998:	8c 93       	st	X, r24
    199a:	14 c0       	rjmp	.+40     	; 0x19c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    199c:	a1 e3       	ldi	r26, 0x31	; 49
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e1 e3       	ldi	r30, 0x31	; 49
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	48 2f       	mov	r20, r24
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	02 2e       	mov	r0, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <GPIO_setupPinDirection+0x1bc>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	0a 94       	dec	r0
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <GPIO_setupPinDirection+0x1b8>
    19be:	80 95       	com	r24
    19c0:	84 23       	and	r24, r20
    19c2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <GPIO_writePin+0x6>
    19da:	00 d0       	rcall	.+0      	; 0x19dc <GPIO_writePin+0x8>
    19dc:	0f 92       	push	r0
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	6a 83       	std	Y+2, r22	; 0x02
    19e6:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	88 30       	cpi	r24, 0x08	; 8
    19ec:	08 f0       	brcs	.+2      	; 0x19f0 <GPIO_writePin+0x1c>
    19ee:	d5 c0       	rjmp	.+426    	; 0x1b9a <GPIO_writePin+0x1c6>
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	84 30       	cpi	r24, 0x04	; 4
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <GPIO_writePin+0x24>
    19f6:	d1 c0       	rjmp	.+418    	; 0x1b9a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	3d 83       	std	Y+5, r19	; 0x05
    1a00:	2c 83       	std	Y+4, r18	; 0x04
    1a02:	8c 81       	ldd	r24, Y+4	; 0x04
    1a04:	9d 81       	ldd	r25, Y+5	; 0x05
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	91 05       	cpc	r25, r1
    1a0a:	09 f4       	brne	.+2      	; 0x1a0e <GPIO_writePin+0x3a>
    1a0c:	43 c0       	rjmp	.+134    	; 0x1a94 <GPIO_writePin+0xc0>
    1a0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a10:	3d 81       	ldd	r19, Y+5	; 0x05
    1a12:	22 30       	cpi	r18, 0x02	; 2
    1a14:	31 05       	cpc	r19, r1
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <GPIO_writePin+0x4e>
    1a18:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	71 f0       	breq	.+28     	; 0x1a3c <GPIO_writePin+0x68>
    1a20:	bc c0       	rjmp	.+376    	; 0x1b9a <GPIO_writePin+0x1c6>
    1a22:	2c 81       	ldd	r18, Y+4	; 0x04
    1a24:	3d 81       	ldd	r19, Y+5	; 0x05
    1a26:	22 30       	cpi	r18, 0x02	; 2
    1a28:	31 05       	cpc	r19, r1
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <GPIO_writePin+0x5a>
    1a2c:	5f c0       	rjmp	.+190    	; 0x1aec <GPIO_writePin+0x118>
    1a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a30:	9d 81       	ldd	r25, Y+5	; 0x05
    1a32:	83 30       	cpi	r24, 0x03	; 3
    1a34:	91 05       	cpc	r25, r1
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <GPIO_writePin+0x66>
    1a38:	85 c0       	rjmp	.+266    	; 0x1b44 <GPIO_writePin+0x170>
    1a3a:	af c0       	rjmp	.+350    	; 0x1b9a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	81 30       	cpi	r24, 0x01	; 1
    1a40:	a1 f4       	brne	.+40     	; 0x1a6a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1a42:	ab e3       	ldi	r26, 0x3B	; 59
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	eb e3       	ldi	r30, 0x3B	; 59
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	48 2f       	mov	r20, r24
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 2e       	mov	r0, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <GPIO_writePin+0x8c>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	0a 94       	dec	r0
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <GPIO_writePin+0x88>
    1a64:	84 2b       	or	r24, r20
    1a66:	8c 93       	st	X, r24
    1a68:	98 c0       	rjmp	.+304    	; 0x1b9a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1a6a:	ab e3       	ldi	r26, 0x3B	; 59
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	eb e3       	ldi	r30, 0x3B	; 59
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	48 2f       	mov	r20, r24
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	28 2f       	mov	r18, r24
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	02 2e       	mov	r0, r18
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <GPIO_writePin+0xb4>
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	0a 94       	dec	r0
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <GPIO_writePin+0xb0>
    1a8c:	80 95       	com	r24
    1a8e:	84 23       	and	r24, r20
    1a90:	8c 93       	st	X, r24
    1a92:	83 c0       	rjmp	.+262    	; 0x1b9a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	a1 f4       	brne	.+40     	; 0x1ac2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1a9a:	a8 e3       	ldi	r26, 0x38	; 56
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e8 e3       	ldi	r30, 0x38	; 56
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	48 2f       	mov	r20, r24
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	02 2e       	mov	r0, r18
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <GPIO_writePin+0xe4>
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	0a 94       	dec	r0
    1aba:	e2 f7       	brpl	.-8      	; 0x1ab4 <GPIO_writePin+0xe0>
    1abc:	84 2b       	or	r24, r20
    1abe:	8c 93       	st	X, r24
    1ac0:	6c c0       	rjmp	.+216    	; 0x1b9a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1ac2:	a8 e3       	ldi	r26, 0x38	; 56
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e8 e3       	ldi	r30, 0x38	; 56
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	48 2f       	mov	r20, r24
    1ace:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	02 2e       	mov	r0, r18
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <GPIO_writePin+0x10c>
    1adc:	88 0f       	add	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	0a 94       	dec	r0
    1ae2:	e2 f7       	brpl	.-8      	; 0x1adc <GPIO_writePin+0x108>
    1ae4:	80 95       	com	r24
    1ae6:	84 23       	and	r24, r20
    1ae8:	8c 93       	st	X, r24
    1aea:	57 c0       	rjmp	.+174    	; 0x1b9a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1aec:	8b 81       	ldd	r24, Y+3	; 0x03
    1aee:	81 30       	cpi	r24, 0x01	; 1
    1af0:	a1 f4       	brne	.+40     	; 0x1b1a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1af2:	a5 e3       	ldi	r26, 0x35	; 53
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e5 e3       	ldi	r30, 0x35	; 53
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	48 2f       	mov	r20, r24
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	28 2f       	mov	r18, r24
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	02 2e       	mov	r0, r18
    1b0a:	02 c0       	rjmp	.+4      	; 0x1b10 <GPIO_writePin+0x13c>
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	0a 94       	dec	r0
    1b12:	e2 f7       	brpl	.-8      	; 0x1b0c <GPIO_writePin+0x138>
    1b14:	84 2b       	or	r24, r20
    1b16:	8c 93       	st	X, r24
    1b18:	40 c0       	rjmp	.+128    	; 0x1b9a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1b1a:	a5 e3       	ldi	r26, 0x35	; 53
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e5 e3       	ldi	r30, 0x35	; 53
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <GPIO_writePin+0x164>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <GPIO_writePin+0x160>
    1b3c:	80 95       	com	r24
    1b3e:	84 23       	and	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	2b c0       	rjmp	.+86     	; 0x1b9a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	a1 f4       	brne	.+40     	; 0x1b72 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1b4a:	a2 e3       	ldi	r26, 0x32	; 50
    1b4c:	b0 e0       	ldi	r27, 0x00	; 0
    1b4e:	e2 e3       	ldi	r30, 0x32	; 50
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 81       	ld	r24, Z
    1b54:	48 2f       	mov	r20, r24
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	02 2e       	mov	r0, r18
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <GPIO_writePin+0x194>
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	0a 94       	dec	r0
    1b6a:	e2 f7       	brpl	.-8      	; 0x1b64 <GPIO_writePin+0x190>
    1b6c:	84 2b       	or	r24, r20
    1b6e:	8c 93       	st	X, r24
    1b70:	14 c0       	rjmp	.+40     	; 0x1b9a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1b72:	a2 e3       	ldi	r26, 0x32	; 50
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e2 e3       	ldi	r30, 0x32	; 50
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 2e       	mov	r0, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <GPIO_writePin+0x1bc>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	0a 94       	dec	r0
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <GPIO_writePin+0x1b8>
    1b94:	80 95       	com	r24
    1b96:	84 23       	and	r24, r20
    1b98:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <GPIO_readPin+0x6>
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <GPIO_readPin+0x8>
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <GPIO_readPin+0xa>
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    1bb8:	89 83       	std	Y+1, r24	; 0x01
    1bba:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	88 30       	cpi	r24, 0x08	; 8
    1bc0:	18 f4       	brcc	.+6      	; 0x1bc8 <GPIO_readPin+0x1e>
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	84 30       	cpi	r24, 0x04	; 4
    1bc6:	10 f0       	brcs	.+4      	; 0x1bcc <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
    1bc8:	1d 82       	std	Y+5, r1	; 0x05
    1bca:	82 c0       	rjmp	.+260    	; 0x1cd0 <GPIO_readPin+0x126>
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	3c 83       	std	Y+4, r19	; 0x04
    1bd4:	2b 83       	std	Y+3, r18	; 0x03
    1bd6:	4b 81       	ldd	r20, Y+3	; 0x03
    1bd8:	5c 81       	ldd	r21, Y+4	; 0x04
    1bda:	41 30       	cpi	r20, 0x01	; 1
    1bdc:	51 05       	cpc	r21, r1
    1bde:	79 f1       	breq	.+94     	; 0x1c3e <GPIO_readPin+0x94>
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	9c 81       	ldd	r25, Y+4	; 0x04
    1be4:	82 30       	cpi	r24, 0x02	; 2
    1be6:	91 05       	cpc	r25, r1
    1be8:	34 f4       	brge	.+12     	; 0x1bf6 <GPIO_readPin+0x4c>
    1bea:	2b 81       	ldd	r18, Y+3	; 0x03
    1bec:	3c 81       	ldd	r19, Y+4	; 0x04
    1bee:	21 15       	cp	r18, r1
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	69 f0       	breq	.+26     	; 0x1c0e <GPIO_readPin+0x64>
    1bf4:	6c c0       	rjmp	.+216    	; 0x1cce <GPIO_readPin+0x124>
    1bf6:	4b 81       	ldd	r20, Y+3	; 0x03
    1bf8:	5c 81       	ldd	r21, Y+4	; 0x04
    1bfa:	42 30       	cpi	r20, 0x02	; 2
    1bfc:	51 05       	cpc	r21, r1
    1bfe:	b9 f1       	breq	.+110    	; 0x1c6e <GPIO_readPin+0xc4>
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	9c 81       	ldd	r25, Y+4	; 0x04
    1c04:	83 30       	cpi	r24, 0x03	; 3
    1c06:	91 05       	cpc	r25, r1
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <GPIO_readPin+0x62>
    1c0a:	49 c0       	rjmp	.+146    	; 0x1c9e <GPIO_readPin+0xf4>
    1c0c:	60 c0       	rjmp	.+192    	; 0x1cce <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if((BIT_IS_SET(PINA,pin_num)))
    1c0e:	e9 e3       	ldi	r30, 0x39	; 57
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	88 2f       	mov	r24, r24
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a9 01       	movw	r20, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <GPIO_readPin+0x7c>
    1c22:	55 95       	asr	r21
    1c24:	47 95       	ror	r20
    1c26:	8a 95       	dec	r24
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <GPIO_readPin+0x78>
    1c2a:	ca 01       	movw	r24, r20
    1c2c:	81 70       	andi	r24, 0x01	; 1
    1c2e:	90 70       	andi	r25, 0x00	; 0
    1c30:	88 23       	and	r24, r24
    1c32:	19 f0       	breq	.+6      	; 0x1c3a <GPIO_readPin+0x90>
			{
				return LOGIC_HIGH;
    1c34:	51 e0       	ldi	r21, 0x01	; 1
    1c36:	5d 83       	std	Y+5, r21	; 0x05
    1c38:	4b c0       	rjmp	.+150    	; 0x1cd0 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1c3a:	1d 82       	std	Y+5, r1	; 0x05
    1c3c:	49 c0       	rjmp	.+146    	; 0x1cd0 <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if((BIT_IS_SET(PINB,pin_num)))
    1c3e:	e6 e3       	ldi	r30, 0x36	; 54
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	88 2f       	mov	r24, r24
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a9 01       	movw	r20, r18
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <GPIO_readPin+0xac>
    1c52:	55 95       	asr	r21
    1c54:	47 95       	ror	r20
    1c56:	8a 95       	dec	r24
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <GPIO_readPin+0xa8>
    1c5a:	ca 01       	movw	r24, r20
    1c5c:	81 70       	andi	r24, 0x01	; 1
    1c5e:	90 70       	andi	r25, 0x00	; 0
    1c60:	88 23       	and	r24, r24
    1c62:	19 f0       	breq	.+6      	; 0x1c6a <GPIO_readPin+0xc0>
			{
				return LOGIC_HIGH;
    1c64:	51 e0       	ldi	r21, 0x01	; 1
    1c66:	5d 83       	std	Y+5, r21	; 0x05
    1c68:	33 c0       	rjmp	.+102    	; 0x1cd0 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1c6a:	1d 82       	std	Y+5, r1	; 0x05
    1c6c:	31 c0       	rjmp	.+98     	; 0x1cd0 <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if((BIT_IS_SET(PINC,pin_num)))
    1c6e:	e3 e3       	ldi	r30, 0x33	; 51
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	88 2f       	mov	r24, r24
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	a9 01       	movw	r20, r18
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <GPIO_readPin+0xdc>
    1c82:	55 95       	asr	r21
    1c84:	47 95       	ror	r20
    1c86:	8a 95       	dec	r24
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <GPIO_readPin+0xd8>
    1c8a:	ca 01       	movw	r24, r20
    1c8c:	81 70       	andi	r24, 0x01	; 1
    1c8e:	90 70       	andi	r25, 0x00	; 0
    1c90:	88 23       	and	r24, r24
    1c92:	19 f0       	breq	.+6      	; 0x1c9a <GPIO_readPin+0xf0>
			{
				return LOGIC_HIGH;
    1c94:	51 e0       	ldi	r21, 0x01	; 1
    1c96:	5d 83       	std	Y+5, r21	; 0x05
    1c98:	1b c0       	rjmp	.+54     	; 0x1cd0 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1c9a:	1d 82       	std	Y+5, r1	; 0x05
    1c9c:	19 c0       	rjmp	.+50     	; 0x1cd0 <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if((BIT_IS_SET(PIND,pin_num)))
    1c9e:	e0 e3       	ldi	r30, 0x30	; 48
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a9 01       	movw	r20, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <GPIO_readPin+0x10c>
    1cb2:	55 95       	asr	r21
    1cb4:	47 95       	ror	r20
    1cb6:	8a 95       	dec	r24
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <GPIO_readPin+0x108>
    1cba:	ca 01       	movw	r24, r20
    1cbc:	81 70       	andi	r24, 0x01	; 1
    1cbe:	90 70       	andi	r25, 0x00	; 0
    1cc0:	88 23       	and	r24, r24
    1cc2:	19 f0       	breq	.+6      	; 0x1cca <GPIO_readPin+0x120>
			{
				return LOGIC_HIGH;
    1cc4:	51 e0       	ldi	r21, 0x01	; 1
    1cc6:	5d 83       	std	Y+5, r21	; 0x05
    1cc8:	03 c0       	rjmp	.+6      	; 0x1cd0 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1cca:	1d 82       	std	Y+5, r1	; 0x05
    1ccc:	01 c0       	rjmp	.+2      	; 0x1cd0 <GPIO_readPin+0x126>
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <GPIO_readPin+0x12a>
			}
			break;
		}
	}
}
    1cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd2:	8e 83       	std	Y+6, r24	; 0x06
    1cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd6:	26 96       	adiw	r28, 0x06	; 6
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <GPIO_setupPortDirection+0x6>
    1cee:	00 d0       	rcall	.+0      	; 0x1cf0 <GPIO_setupPortDirection+0x8>
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	84 30       	cpi	r24, 0x04	; 4
    1cfc:	90 f5       	brcc	.+100    	; 0x1d62 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	3c 83       	std	Y+4, r19	; 0x04
    1d06:	2b 83       	std	Y+3, r18	; 0x03
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	91 05       	cpc	r25, r1
    1d10:	d1 f0       	breq	.+52     	; 0x1d46 <GPIO_setupPortDirection+0x5e>
    1d12:	2b 81       	ldd	r18, Y+3	; 0x03
    1d14:	3c 81       	ldd	r19, Y+4	; 0x04
    1d16:	22 30       	cpi	r18, 0x02	; 2
    1d18:	31 05       	cpc	r19, r1
    1d1a:	2c f4       	brge	.+10     	; 0x1d26 <GPIO_setupPortDirection+0x3e>
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	61 f0       	breq	.+24     	; 0x1d3c <GPIO_setupPortDirection+0x54>
    1d24:	1e c0       	rjmp	.+60     	; 0x1d62 <GPIO_setupPortDirection+0x7a>
    1d26:	2b 81       	ldd	r18, Y+3	; 0x03
    1d28:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2a:	22 30       	cpi	r18, 0x02	; 2
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	81 f0       	breq	.+32     	; 0x1d50 <GPIO_setupPortDirection+0x68>
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	83 30       	cpi	r24, 0x03	; 3
    1d36:	91 05       	cpc	r25, r1
    1d38:	81 f0       	breq	.+32     	; 0x1d5a <GPIO_setupPortDirection+0x72>
    1d3a:	13 c0       	rjmp	.+38     	; 0x1d62 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1d3c:	ea e3       	ldi	r30, 0x3A	; 58
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	80 83       	st	Z, r24
    1d44:	0e c0       	rjmp	.+28     	; 0x1d62 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d46:	e7 e3       	ldi	r30, 0x37	; 55
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	80 83       	st	Z, r24
    1d4e:	09 c0       	rjmp	.+18     	; 0x1d62 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1d50:	e4 e3       	ldi	r30, 0x34	; 52
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	80 83       	st	Z, r24
    1d58:	04 c0       	rjmp	.+8      	; 0x1d62 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1d5a:	e1 e3       	ldi	r30, 0x31	; 49
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d60:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <GPIO_writePort+0x6>
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <GPIO_writePort+0x8>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    1d7e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	84 30       	cpi	r24, 0x04	; 4
    1d84:	90 f5       	brcc	.+100    	; 0x1dea <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	3c 83       	std	Y+4, r19	; 0x04
    1d8e:	2b 83       	std	Y+3, r18	; 0x03
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	9c 81       	ldd	r25, Y+4	; 0x04
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	91 05       	cpc	r25, r1
    1d98:	d1 f0       	breq	.+52     	; 0x1dce <GPIO_writePort+0x5e>
    1d9a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9e:	22 30       	cpi	r18, 0x02	; 2
    1da0:	31 05       	cpc	r19, r1
    1da2:	2c f4       	brge	.+10     	; 0x1dae <GPIO_writePort+0x3e>
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	9c 81       	ldd	r25, Y+4	; 0x04
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	61 f0       	breq	.+24     	; 0x1dc4 <GPIO_writePort+0x54>
    1dac:	1e c0       	rjmp	.+60     	; 0x1dea <GPIO_writePort+0x7a>
    1dae:	2b 81       	ldd	r18, Y+3	; 0x03
    1db0:	3c 81       	ldd	r19, Y+4	; 0x04
    1db2:	22 30       	cpi	r18, 0x02	; 2
    1db4:	31 05       	cpc	r19, r1
    1db6:	81 f0       	breq	.+32     	; 0x1dd8 <GPIO_writePort+0x68>
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	83 30       	cpi	r24, 0x03	; 3
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	81 f0       	breq	.+32     	; 0x1de2 <GPIO_writePort+0x72>
    1dc2:	13 c0       	rjmp	.+38     	; 0x1dea <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1dc4:	eb e3       	ldi	r30, 0x3B	; 59
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	80 83       	st	Z, r24
    1dcc:	0e c0       	rjmp	.+28     	; 0x1dea <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1dce:	e8 e3       	ldi	r30, 0x38	; 56
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	80 83       	st	Z, r24
    1dd6:	09 c0       	rjmp	.+18     	; 0x1dea <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1dd8:	e5 e3       	ldi	r30, 0x35	; 53
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	80 83       	st	Z, r24
    1de0:	04 c0       	rjmp	.+8      	; 0x1dea <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1de2:	e2 e3       	ldi	r30, 0x32	; 50
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <GPIO_readPort+0x6>
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <GPIO_readPort+0x8>
    1e00:	0f 92       	push	r0
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	84 30       	cpi	r24, 0x04	; 4
    1e0c:	10 f0       	brcs	.+4      	; 0x1e12 <GPIO_readPort+0x1a>
	{
		return 0;
    1e0e:	1c 82       	std	Y+4, r1	; 0x04
    1e10:	50 c0       	rjmp	.+160    	; 0x1eb2 <GPIO_readPort+0xba>
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	3b 83       	std	Y+3, r19	; 0x03
    1e1a:	2a 83       	std	Y+2, r18	; 0x02
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	91 05       	cpc	r25, r1
    1e24:	09 f1       	breq	.+66     	; 0x1e68 <GPIO_readPort+0x70>
    1e26:	2a 81       	ldd	r18, Y+2	; 0x02
    1e28:	3b 81       	ldd	r19, Y+3	; 0x03
    1e2a:	22 30       	cpi	r18, 0x02	; 2
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	2c f4       	brge	.+10     	; 0x1e3a <GPIO_readPort+0x42>
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	9b 81       	ldd	r25, Y+3	; 0x03
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	61 f0       	breq	.+24     	; 0x1e50 <GPIO_readPort+0x58>
    1e38:	3b c0       	rjmp	.+118    	; 0x1eb0 <GPIO_readPort+0xb8>
    1e3a:	2a 81       	ldd	r18, Y+2	; 0x02
    1e3c:	3b 81       	ldd	r19, Y+3	; 0x03
    1e3e:	22 30       	cpi	r18, 0x02	; 2
    1e40:	31 05       	cpc	r19, r1
    1e42:	f1 f0       	breq	.+60     	; 0x1e80 <GPIO_readPort+0x88>
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	9b 81       	ldd	r25, Y+3	; 0x03
    1e48:	83 30       	cpi	r24, 0x03	; 3
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	29 f1       	breq	.+74     	; 0x1e98 <GPIO_readPort+0xa0>
    1e4e:	30 c0       	rjmp	.+96     	; 0x1eb0 <GPIO_readPort+0xb8>
		{
		case PORTA_ID:
			if(!PINA){
    1e50:	e9 e3       	ldi	r30, 0x39	; 57
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	88 23       	and	r24, r24
    1e58:	11 f4       	brne	.+4      	; 0x1e5e <GPIO_readPort+0x66>
				return 0;
    1e5a:	1c 82       	std	Y+4, r1	; 0x04
    1e5c:	2a c0       	rjmp	.+84     	; 0x1eb2 <GPIO_readPort+0xba>
			}
			else{
				return PINA;
    1e5e:	e9 e3       	ldi	r30, 0x39	; 57
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	90 81       	ld	r25, Z
    1e64:	9c 83       	std	Y+4, r25	; 0x04
    1e66:	25 c0       	rjmp	.+74     	; 0x1eb2 <GPIO_readPort+0xba>
			}
			break;
		case PORTB_ID:
			if(!PINB){
    1e68:	e6 e3       	ldi	r30, 0x36	; 54
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	88 23       	and	r24, r24
    1e70:	11 f4       	brne	.+4      	; 0x1e76 <GPIO_readPort+0x7e>
				return 0;
    1e72:	1c 82       	std	Y+4, r1	; 0x04
    1e74:	1e c0       	rjmp	.+60     	; 0x1eb2 <GPIO_readPort+0xba>
			}
			else{
				return PINB;
    1e76:	e6 e3       	ldi	r30, 0x36	; 54
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	20 81       	ld	r18, Z
    1e7c:	2c 83       	std	Y+4, r18	; 0x04
    1e7e:	19 c0       	rjmp	.+50     	; 0x1eb2 <GPIO_readPort+0xba>
			}
			break;
		case PORTC_ID:
			if(!PINC){
    1e80:	e3 e3       	ldi	r30, 0x33	; 51
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	88 23       	and	r24, r24
    1e88:	11 f4       	brne	.+4      	; 0x1e8e <GPIO_readPort+0x96>
				return 0;
    1e8a:	1c 82       	std	Y+4, r1	; 0x04
    1e8c:	12 c0       	rjmp	.+36     	; 0x1eb2 <GPIO_readPort+0xba>
			}
			else{
				return PINC;
    1e8e:	e3 e3       	ldi	r30, 0x33	; 51
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	30 81       	ld	r19, Z
    1e94:	3c 83       	std	Y+4, r19	; 0x04
    1e96:	0d c0       	rjmp	.+26     	; 0x1eb2 <GPIO_readPort+0xba>
			}
			break;
		case PORTD_ID:
			if(!PIND){
    1e98:	e0 e3       	ldi	r30, 0x30	; 48
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	88 23       	and	r24, r24
    1ea0:	11 f4       	brne	.+4      	; 0x1ea6 <GPIO_readPort+0xae>
				return 0;
    1ea2:	1c 82       	std	Y+4, r1	; 0x04
    1ea4:	06 c0       	rjmp	.+12     	; 0x1eb2 <GPIO_readPort+0xba>
			}
			else{
				return PIND;
    1ea6:	e0 e3       	ldi	r30, 0x30	; 48
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	8c 83       	std	Y+4, r24	; 0x04
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <GPIO_readPort+0xba>
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <GPIO_readPort+0xbe>
			}
			break;
		}
	}

}
    1eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb4:	9d 83       	std	Y+5, r25	; 0x05
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <PIR_init>:

/* Description: Function to initialize the PIR driver
   Inputs: None
   Return: None */
void PIR_init(void)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_PORT_ID, PIR_PIN_ID, PIN_INPUT);
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	62 e0       	ldi	r22, 0x02	; 2
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_setupPinDirection>
}
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <PIR_getState>:

/* Description: Function to return PIR State
   Inputs: None
   Return: uint8 */
uint8 PIR_getState(void)
{
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
	return (GPIO_readPin(PIR_PORT_ID, PIR_PIN_ID));
    1ee8:	82 e0       	ldi	r24, 0x02	; 2
    1eea:	62 e0       	ldi	r22, 0x02	; 2
    1eec:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <GPIO_readPin>
}
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <PWM_Timer0_Start>:
#include "pwm.h"
#include "gpio.h"
#include "common_macros.h"

void PWM_Timer0_Start(uint8 duty_cycle)
{
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	df 93       	push	r29
    1efc:	cf 93       	push	r28
    1efe:	0f 92       	push	r0
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	89 83       	std	Y+1, r24	; 0x01

	/* TCNT0 Register is set to 0 as an initialized value
	 */
	TCNT0 = 0;
    1f06:	e2 e5       	ldi	r30, 0x52	; 82
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	10 82       	st	Z, r1
	 * FOC0 = 0 to specify the PWM mode
	 * WGM01:0 = 11 to choose Fast PWM mode
	 * COM01:0 = 10 to choose non-inverting mode
	 * CS02:0  = 101 to choose Prescaler: F_CPU/1024
	 */
	SET_BIT(TCCR0, WGM00);
    1f0c:	a3 e5       	ldi	r26, 0x53	; 83
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e3 e5       	ldi	r30, 0x53	; 83
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	80 64       	ori	r24, 0x40	; 64
    1f18:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    1f1a:	a3 e5       	ldi	r26, 0x53	; 83
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e3 e5       	ldi	r30, 0x53	; 83
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	88 60       	ori	r24, 0x08	; 8
    1f26:	8c 93       	st	X, r24
	SET_BIT(TCCR0, COM01);
    1f28:	a3 e5       	ldi	r26, 0x53	; 83
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e3 e5       	ldi	r30, 0x53	; 83
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 81       	ld	r24, Z
    1f32:	80 62       	ori	r24, 0x20	; 32
    1f34:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS02);
    1f36:	a3 e5       	ldi	r26, 0x53	; 83
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e3 e5       	ldi	r30, 0x53	; 83
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	84 60       	ori	r24, 0x04	; 4
    1f42:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS00);
    1f44:	a3 e5       	ldi	r26, 0x53	; 83
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e3 e5       	ldi	r30, 0x53	; 83
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	81 60       	ori	r24, 0x01	; 1
    1f50:	8c 93       	st	X, r24

	/*duty_cycle: Percentage (0 to 100%) representing the PWM duty cycle.
	 */
	OCR0 = (uint8)(((float32)(duty_cycle / 100.0)) * 255.0);
    1f52:	0c e5       	ldi	r16, 0x5C	; 92
    1f54:	10 e0       	ldi	r17, 0x00	; 0
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	88 2f       	mov	r24, r24
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	aa 27       	eor	r26, r26
    1f5e:	97 fd       	sbrc	r25, 7
    1f60:	a0 95       	com	r26
    1f62:	ba 2f       	mov	r27, r26
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	bc 01       	movw	r22, r24
    1f72:	cd 01       	movw	r24, r26
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	48 ec       	ldi	r20, 0xC8	; 200
    1f7a:	52 e4       	ldi	r21, 0x42	; 66
    1f7c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4f e7       	ldi	r20, 0x7F	; 127
    1f8e:	53 e4       	ldi	r21, 0x43	; 67
    1f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	bc 01       	movw	r22, r24
    1f9a:	cd 01       	movw	r24, r26
    1f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	f8 01       	movw	r30, r16
    1fa6:	80 83       	st	Z, r24

	/* Set the pin direction as output using GPIO driver
	 */
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	63 e0       	ldi	r22, 0x03	; 3
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GPIO_setupPinDirection>

}
    1fb2:	0f 90       	pop	r0
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	1f 91       	pop	r17
    1fba:	0f 91       	pop	r16
    1fbc:	08 95       	ret

00001fbe <__vector_11>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect){
    1fbe:	1f 92       	push	r1
    1fc0:	0f 92       	push	r0
    1fc2:	0f b6       	in	r0, 0x3f	; 63
    1fc4:	0f 92       	push	r0
    1fc6:	11 24       	eor	r1, r1
    1fc8:	2f 93       	push	r18
    1fca:	3f 93       	push	r19
    1fcc:	4f 93       	push	r20
    1fce:	5f 93       	push	r21
    1fd0:	6f 93       	push	r22
    1fd2:	7f 93       	push	r23
    1fd4:	8f 93       	push	r24
    1fd6:	9f 93       	push	r25
    1fd8:	af 93       	push	r26
    1fda:	bf 93       	push	r27
    1fdc:	ef 93       	push	r30
    1fde:	ff 93       	push	r31
    1fe0:	df 93       	push	r29
    1fe2:	cf 93       	push	r28
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL_PTR)
    1fe8:	80 91 7d 01 	lds	r24, 0x017D
    1fec:	90 91 7e 01 	lds	r25, 0x017E
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	29 f0       	breq	.+10     	; 0x1ffe <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1ff4:	e0 91 7d 01 	lds	r30, 0x017D
    1ff8:	f0 91 7e 01 	lds	r31, 0x017E
    1ffc:	09 95       	icall
	}
}
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	ff 91       	pop	r31
    2004:	ef 91       	pop	r30
    2006:	bf 91       	pop	r27
    2008:	af 91       	pop	r26
    200a:	9f 91       	pop	r25
    200c:	8f 91       	pop	r24
    200e:	7f 91       	pop	r23
    2010:	6f 91       	pop	r22
    2012:	5f 91       	pop	r21
    2014:	4f 91       	pop	r20
    2016:	3f 91       	pop	r19
    2018:	2f 91       	pop	r18
    201a:	0f 90       	pop	r0
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	0f 90       	pop	r0
    2020:	1f 90       	pop	r1
    2022:	18 95       	reti

00002024 <__vector_10>:

ISR(TIMER0_COMP_vect){
    2024:	1f 92       	push	r1
    2026:	0f 92       	push	r0
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	0f 92       	push	r0
    202c:	11 24       	eor	r1, r1
    202e:	2f 93       	push	r18
    2030:	3f 93       	push	r19
    2032:	4f 93       	push	r20
    2034:	5f 93       	push	r21
    2036:	6f 93       	push	r22
    2038:	7f 93       	push	r23
    203a:	8f 93       	push	r24
    203c:	9f 93       	push	r25
    203e:	af 93       	push	r26
    2040:	bf 93       	push	r27
    2042:	ef 93       	push	r30
    2044:	ff 93       	push	r31
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL_PTR)
    204e:	80 91 7d 01 	lds	r24, 0x017D
    2052:	90 91 7e 01 	lds	r25, 0x017E
    2056:	00 97       	sbiw	r24, 0x00	; 0
    2058:	29 f0       	breq	.+10     	; 0x2064 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    205a:	e0 91 7d 01 	lds	r30, 0x017D
    205e:	f0 91 7e 01 	lds	r31, 0x017E
    2062:	09 95       	icall
	}
}
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	ff 91       	pop	r31
    206a:	ef 91       	pop	r30
    206c:	bf 91       	pop	r27
    206e:	af 91       	pop	r26
    2070:	9f 91       	pop	r25
    2072:	8f 91       	pop	r24
    2074:	7f 91       	pop	r23
    2076:	6f 91       	pop	r22
    2078:	5f 91       	pop	r21
    207a:	4f 91       	pop	r20
    207c:	3f 91       	pop	r19
    207e:	2f 91       	pop	r18
    2080:	0f 90       	pop	r0
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	0f 90       	pop	r0
    2086:	1f 90       	pop	r1
    2088:	18 95       	reti

0000208a <__vector_9>:

ISR(TIMER1_OVF_vect){
    208a:	1f 92       	push	r1
    208c:	0f 92       	push	r0
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	0f 92       	push	r0
    2092:	11 24       	eor	r1, r1
    2094:	2f 93       	push	r18
    2096:	3f 93       	push	r19
    2098:	4f 93       	push	r20
    209a:	5f 93       	push	r21
    209c:	6f 93       	push	r22
    209e:	7f 93       	push	r23
    20a0:	8f 93       	push	r24
    20a2:	9f 93       	push	r25
    20a4:	af 93       	push	r26
    20a6:	bf 93       	push	r27
    20a8:	ef 93       	push	r30
    20aa:	ff 93       	push	r31
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    20b4:	80 91 7f 01 	lds	r24, 0x017F
    20b8:	90 91 80 01 	lds	r25, 0x0180
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	29 f0       	breq	.+10     	; 0x20ca <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    20c0:	e0 91 7f 01 	lds	r30, 0x017F
    20c4:	f0 91 80 01 	lds	r31, 0x0180
    20c8:	09 95       	icall
	}
}
    20ca:	cf 91       	pop	r28
    20cc:	df 91       	pop	r29
    20ce:	ff 91       	pop	r31
    20d0:	ef 91       	pop	r30
    20d2:	bf 91       	pop	r27
    20d4:	af 91       	pop	r26
    20d6:	9f 91       	pop	r25
    20d8:	8f 91       	pop	r24
    20da:	7f 91       	pop	r23
    20dc:	6f 91       	pop	r22
    20de:	5f 91       	pop	r21
    20e0:	4f 91       	pop	r20
    20e2:	3f 91       	pop	r19
    20e4:	2f 91       	pop	r18
    20e6:	0f 90       	pop	r0
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	0f 90       	pop	r0
    20ec:	1f 90       	pop	r1
    20ee:	18 95       	reti

000020f0 <__vector_7>:

ISR(TIMER1_COMPA_vect){
    20f0:	1f 92       	push	r1
    20f2:	0f 92       	push	r0
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	0f 92       	push	r0
    20f8:	11 24       	eor	r1, r1
    20fa:	2f 93       	push	r18
    20fc:	3f 93       	push	r19
    20fe:	4f 93       	push	r20
    2100:	5f 93       	push	r21
    2102:	6f 93       	push	r22
    2104:	7f 93       	push	r23
    2106:	8f 93       	push	r24
    2108:	9f 93       	push	r25
    210a:	af 93       	push	r26
    210c:	bf 93       	push	r27
    210e:	ef 93       	push	r30
    2110:	ff 93       	push	r31
    2112:	df 93       	push	r29
    2114:	cf 93       	push	r28
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    211a:	80 91 7f 01 	lds	r24, 0x017F
    211e:	90 91 80 01 	lds	r25, 0x0180
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	29 f0       	breq	.+10     	; 0x2130 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2126:	e0 91 7f 01 	lds	r30, 0x017F
    212a:	f0 91 80 01 	lds	r31, 0x0180
    212e:	09 95       	icall
	}
}
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	ff 91       	pop	r31
    2136:	ef 91       	pop	r30
    2138:	bf 91       	pop	r27
    213a:	af 91       	pop	r26
    213c:	9f 91       	pop	r25
    213e:	8f 91       	pop	r24
    2140:	7f 91       	pop	r23
    2142:	6f 91       	pop	r22
    2144:	5f 91       	pop	r21
    2146:	4f 91       	pop	r20
    2148:	3f 91       	pop	r19
    214a:	2f 91       	pop	r18
    214c:	0f 90       	pop	r0
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	0f 90       	pop	r0
    2152:	1f 90       	pop	r1
    2154:	18 95       	reti

00002156 <__vector_5>:

ISR(TIMER2_OVF_vect){
    2156:	1f 92       	push	r1
    2158:	0f 92       	push	r0
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	0f 92       	push	r0
    215e:	11 24       	eor	r1, r1
    2160:	2f 93       	push	r18
    2162:	3f 93       	push	r19
    2164:	4f 93       	push	r20
    2166:	5f 93       	push	r21
    2168:	6f 93       	push	r22
    216a:	7f 93       	push	r23
    216c:	8f 93       	push	r24
    216e:	9f 93       	push	r25
    2170:	af 93       	push	r26
    2172:	bf 93       	push	r27
    2174:	ef 93       	push	r30
    2176:	ff 93       	push	r31
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER2_callBackPtr != NULL_PTR)
    2180:	80 91 81 01 	lds	r24, 0x0181
    2184:	90 91 82 01 	lds	r25, 0x0182
    2188:	00 97       	sbiw	r24, 0x00	; 0
    218a:	29 f0       	breq	.+10     	; 0x2196 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    218c:	e0 91 81 01 	lds	r30, 0x0181
    2190:	f0 91 82 01 	lds	r31, 0x0182
    2194:	09 95       	icall
	}
}
    2196:	cf 91       	pop	r28
    2198:	df 91       	pop	r29
    219a:	ff 91       	pop	r31
    219c:	ef 91       	pop	r30
    219e:	bf 91       	pop	r27
    21a0:	af 91       	pop	r26
    21a2:	9f 91       	pop	r25
    21a4:	8f 91       	pop	r24
    21a6:	7f 91       	pop	r23
    21a8:	6f 91       	pop	r22
    21aa:	5f 91       	pop	r21
    21ac:	4f 91       	pop	r20
    21ae:	3f 91       	pop	r19
    21b0:	2f 91       	pop	r18
    21b2:	0f 90       	pop	r0
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	0f 90       	pop	r0
    21b8:	1f 90       	pop	r1
    21ba:	18 95       	reti

000021bc <__vector_4>:

ISR(TIMER2_COMP_vect){
    21bc:	1f 92       	push	r1
    21be:	0f 92       	push	r0
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	0f 92       	push	r0
    21c4:	11 24       	eor	r1, r1
    21c6:	2f 93       	push	r18
    21c8:	3f 93       	push	r19
    21ca:	4f 93       	push	r20
    21cc:	5f 93       	push	r21
    21ce:	6f 93       	push	r22
    21d0:	7f 93       	push	r23
    21d2:	8f 93       	push	r24
    21d4:	9f 93       	push	r25
    21d6:	af 93       	push	r26
    21d8:	bf 93       	push	r27
    21da:	ef 93       	push	r30
    21dc:	ff 93       	push	r31
    21de:	df 93       	push	r29
    21e0:	cf 93       	push	r28
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER2_callBackPtr != NULL_PTR)
    21e6:	80 91 81 01 	lds	r24, 0x0181
    21ea:	90 91 82 01 	lds	r25, 0x0182
    21ee:	00 97       	sbiw	r24, 0x00	; 0
    21f0:	29 f0       	breq	.+10     	; 0x21fc <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    21f2:	e0 91 81 01 	lds	r30, 0x0181
    21f6:	f0 91 82 01 	lds	r31, 0x0182
    21fa:	09 95       	icall
	}
}
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	ff 91       	pop	r31
    2202:	ef 91       	pop	r30
    2204:	bf 91       	pop	r27
    2206:	af 91       	pop	r26
    2208:	9f 91       	pop	r25
    220a:	8f 91       	pop	r24
    220c:	7f 91       	pop	r23
    220e:	6f 91       	pop	r22
    2210:	5f 91       	pop	r21
    2212:	4f 91       	pop	r20
    2214:	3f 91       	pop	r19
    2216:	2f 91       	pop	r18
    2218:	0f 90       	pop	r0
    221a:	0f be       	out	0x3f, r0	; 63
    221c:	0f 90       	pop	r0
    221e:	1f 90       	pop	r1
    2220:	18 95       	reti

00002222 <Timer_init>:
 * Description: Function to initialize the Timer driver
   Inputs: pointer to the configuration structure with type Timer_ConfigType.
   Return: None
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	00 d0       	rcall	.+0      	; 0x2228 <Timer_init+0x6>
    2228:	cd b7       	in	r28, 0x3d	; 61
    222a:	de b7       	in	r29, 0x3e	; 62
    222c:	9a 83       	std	Y+2, r25	; 0x02
    222e:	89 83       	std	Y+1, r24	; 0x01
	if (Config_Ptr ->timer_ID == TIMER0)
    2230:	e9 81       	ldd	r30, Y+1	; 0x01
    2232:	fa 81       	ldd	r31, Y+2	; 0x02
    2234:	84 81       	ldd	r24, Z+4	; 0x04
    2236:	88 23       	and	r24, r24
    2238:	09 f0       	breq	.+2      	; 0x223c <Timer_init+0x1a>
    223a:	55 c0       	rjmp	.+170    	; 0x22e6 <Timer_init+0xc4>
	{
		/* configure  WGM01:0 */
		TCCR0 = (TCCR0 & 0xB7) | (((Config_Ptr ->timer_mode) & 0x02) <<2) | (((Config_Ptr ->timer_mode) & 0x01) <<7);
    223c:	a3 e5       	ldi	r26, 0x53	; 83
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e3 e5       	ldi	r30, 0x53	; 83
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	28 2f       	mov	r18, r24
    2248:	27 7b       	andi	r18, 0xB7	; 183
    224a:	e9 81       	ldd	r30, Y+1	; 0x01
    224c:	fa 81       	ldd	r31, Y+2	; 0x02
    224e:	86 81       	ldd	r24, Z+6	; 0x06
    2250:	88 2f       	mov	r24, r24
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	82 70       	andi	r24, 0x02	; 2
    2256:	90 70       	andi	r25, 0x00	; 0
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	88 0f       	add	r24, r24
    225e:	99 1f       	adc	r25, r25
    2260:	28 2b       	or	r18, r24
    2262:	e9 81       	ldd	r30, Y+1	; 0x01
    2264:	fa 81       	ldd	r31, Y+2	; 0x02
    2266:	86 81       	ldd	r24, Z+6	; 0x06
    2268:	88 2f       	mov	r24, r24
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	96 95       	lsr	r25
    226e:	98 2f       	mov	r25, r24
    2270:	88 27       	eor	r24, r24
    2272:	97 95       	ror	r25
    2274:	87 95       	ror	r24
    2276:	82 2b       	or	r24, r18
    2278:	8c 93       	st	X, r24
		/* Force Output Compare Match when PWM is disabled */
		TCCR0 = (TCCR0 & 0x7F) | (0x01 << 7);		/*FOC0*/
    227a:	a3 e5       	ldi	r26, 0x53	; 83
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e3 e5       	ldi	r30, 0x53	; 83
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	80 68       	ori	r24, 0x80	; 128
    2286:	8c 93       	st	X, r24

		if (Config_Ptr -> timer_mode == CTC)
    2288:	e9 81       	ldd	r30, Y+1	; 0x01
    228a:	fa 81       	ldd	r31, Y+2	; 0x02
    228c:	86 81       	ldd	r24, Z+6	; 0x06
    228e:	82 30       	cpi	r24, 0x02	; 2
    2290:	79 f4       	brne	.+30     	; 0x22b0 <Timer_init+0x8e>
		{
			OCR0 = Config_Ptr -> timer_compare_MatchValue;
    2292:	ac e5       	ldi	r26, 0x5C	; 92
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e9 81       	ldd	r30, Y+1	; 0x01
    2298:	fa 81       	ldd	r31, Y+2	; 0x02
    229a:	82 81       	ldd	r24, Z+2	; 0x02
    229c:	93 81       	ldd	r25, Z+3	; 0x03
    229e:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    22a0:	a9 e5       	ldi	r26, 0x59	; 89
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e9 e5       	ldi	r30, 0x59	; 89
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	82 60       	ori	r24, 0x02	; 2
    22ac:	8c 93       	st	X, r24
    22ae:	07 c0       	rjmp	.+14     	; 0x22be <Timer_init+0x9c>
		}
		else{
			TIMSK |= (1<<TOIE0);   /*enables the interrupt */
    22b0:	a9 e5       	ldi	r26, 0x59	; 89
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e9 e5       	ldi	r30, 0x59	; 89
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	81 60       	ori	r24, 0x01	; 1
    22bc:	8c 93       	st	X, r24
		}

		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr -> timer_clock);   /* Set Prescaler */
    22be:	a3 e5       	ldi	r26, 0x53	; 83
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e3 e5       	ldi	r30, 0x53	; 83
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	98 2f       	mov	r25, r24
    22ca:	98 7f       	andi	r25, 0xF8	; 248
    22cc:	e9 81       	ldd	r30, Y+1	; 0x01
    22ce:	fa 81       	ldd	r31, Y+2	; 0x02
    22d0:	85 81       	ldd	r24, Z+5	; 0x05
    22d2:	89 2b       	or	r24, r25
    22d4:	8c 93       	st	X, r24

		TCNT0 = Config_Ptr -> timer_InitialValue;
    22d6:	a2 e5       	ldi	r26, 0x52	; 82
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e9 81       	ldd	r30, Y+1	; 0x01
    22dc:	fa 81       	ldd	r31, Y+2	; 0x02
    22de:	80 81       	ld	r24, Z
    22e0:	91 81       	ldd	r25, Z+1	; 0x01
    22e2:	8c 93       	st	X, r24
    22e4:	a4 c0       	rjmp	.+328    	; 0x242e <Timer_init+0x20c>
	}
	else if (Config_Ptr ->timer_ID == TIMER1)
    22e6:	e9 81       	ldd	r30, Y+1	; 0x01
    22e8:	fa 81       	ldd	r31, Y+2	; 0x02
    22ea:	84 81       	ldd	r24, Z+4	; 0x04
    22ec:	81 30       	cpi	r24, 0x01	; 1
    22ee:	09 f0       	breq	.+2      	; 0x22f2 <Timer_init+0xd0>
    22f0:	44 c0       	rjmp	.+136    	; 0x237a <Timer_init+0x158>
	{
		TCNT1 = Config_Ptr -> timer_InitialValue;
    22f2:	ac e4       	ldi	r26, 0x4C	; 76
    22f4:	b0 e0       	ldi	r27, 0x00	; 0
    22f6:	e9 81       	ldd	r30, Y+1	; 0x01
    22f8:	fa 81       	ldd	r31, Y+2	; 0x02
    22fa:	80 81       	ld	r24, Z
    22fc:	91 81       	ldd	r25, Z+1	; 0x01
    22fe:	11 96       	adiw	r26, 0x01	; 1
    2300:	9c 93       	st	X, r25
    2302:	8e 93       	st	-X, r24

		/* WGM0:1 are always 0 for normal and compare mode */

		if(Config_Ptr -> timer_mode == CTC)
    2304:	e9 81       	ldd	r30, Y+1	; 0x01
    2306:	fa 81       	ldd	r31, Y+2	; 0x02
    2308:	86 81       	ldd	r24, Z+6	; 0x06
    230a:	82 30       	cpi	r24, 0x02	; 2
    230c:	c9 f4       	brne	.+50     	; 0x2340 <Timer_init+0x11e>
		{
			TCCR1A = (1<<FOC1A);		/* Force Output Compare match */
    230e:	ef e4       	ldi	r30, 0x4F	; 79
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	88 e0       	ldi	r24, 0x08	; 8
    2314:	80 83       	st	Z, r24
			TCCR1B = (1<<WGM12);
    2316:	ee e4       	ldi	r30, 0x4E	; 78
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	88 e0       	ldi	r24, 0x08	; 8
    231c:	80 83       	st	Z, r24
			OCR1A = Config_Ptr -> timer_compare_MatchValue;
    231e:	aa e4       	ldi	r26, 0x4A	; 74
    2320:	b0 e0       	ldi	r27, 0x00	; 0
    2322:	e9 81       	ldd	r30, Y+1	; 0x01
    2324:	fa 81       	ldd	r31, Y+2	; 0x02
    2326:	82 81       	ldd	r24, Z+2	; 0x02
    2328:	93 81       	ldd	r25, Z+3	; 0x03
    232a:	11 96       	adiw	r26, 0x01	; 1
    232c:	9c 93       	st	X, r25
    232e:	8e 93       	st	-X, r24
			TIMSK |= (1<<OCIE1A);
    2330:	a9 e5       	ldi	r26, 0x59	; 89
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	e9 e5       	ldi	r30, 0x59	; 89
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	80 81       	ld	r24, Z
    233a:	80 61       	ori	r24, 0x10	; 16
    233c:	8c 93       	st	X, r24
    233e:	10 c0       	rjmp	.+32     	; 0x2360 <Timer_init+0x13e>
		}
		else if(Config_Ptr -> timer_mode == NORMAL)
    2340:	e9 81       	ldd	r30, Y+1	; 0x01
    2342:	fa 81       	ldd	r31, Y+2	; 0x02
    2344:	86 81       	ldd	r24, Z+6	; 0x06
    2346:	88 23       	and	r24, r24
    2348:	59 f4       	brne	.+22     	; 0x2360 <Timer_init+0x13e>
		{
			TCCR1A = (1<<FOC1A);		/* Force Output Compare match */
    234a:	ef e4       	ldi	r30, 0x4F	; 79
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	88 e0       	ldi	r24, 0x08	; 8
    2350:	80 83       	st	Z, r24
			TIMSK |= (1<<TOIE1);
    2352:	a9 e5       	ldi	r26, 0x59	; 89
    2354:	b0 e0       	ldi	r27, 0x00	; 0
    2356:	e9 e5       	ldi	r30, 0x59	; 89
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	80 81       	ld	r24, Z
    235c:	84 60       	ori	r24, 0x04	; 4
    235e:	8c 93       	st	X, r24
		}
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr -> timer_clock);
    2360:	ae e4       	ldi	r26, 0x4E	; 78
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	ee e4       	ldi	r30, 0x4E	; 78
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	98 2f       	mov	r25, r24
    236c:	98 7f       	andi	r25, 0xF8	; 248
    236e:	e9 81       	ldd	r30, Y+1	; 0x01
    2370:	fa 81       	ldd	r31, Y+2	; 0x02
    2372:	85 81       	ldd	r24, Z+5	; 0x05
    2374:	89 2b       	or	r24, r25
    2376:	8c 93       	st	X, r24
    2378:	5a c0       	rjmp	.+180    	; 0x242e <Timer_init+0x20c>

	}
	else if (Config_Ptr -> timer_ID == TIMER2)
    237a:	e9 81       	ldd	r30, Y+1	; 0x01
    237c:	fa 81       	ldd	r31, Y+2	; 0x02
    237e:	84 81       	ldd	r24, Z+4	; 0x04
    2380:	82 30       	cpi	r24, 0x02	; 2
    2382:	09 f0       	breq	.+2      	; 0x2386 <Timer_init+0x164>
    2384:	54 c0       	rjmp	.+168    	; 0x242e <Timer_init+0x20c>
	{
		/* configure  WGM01:0 */
		TCCR2 = (TCCR2 & 0xB7) | (((Config_Ptr ->timer_mode) & 0x02) <<2) | (((Config_Ptr ->timer_mode) & 0x01) <<7);
    2386:	a5 e4       	ldi	r26, 0x45	; 69
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e5 e4       	ldi	r30, 0x45	; 69
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	28 2f       	mov	r18, r24
    2392:	27 7b       	andi	r18, 0xB7	; 183
    2394:	e9 81       	ldd	r30, Y+1	; 0x01
    2396:	fa 81       	ldd	r31, Y+2	; 0x02
    2398:	86 81       	ldd	r24, Z+6	; 0x06
    239a:	88 2f       	mov	r24, r24
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	82 70       	andi	r24, 0x02	; 2
    23a0:	90 70       	andi	r25, 0x00	; 0
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	28 2b       	or	r18, r24
    23ac:	e9 81       	ldd	r30, Y+1	; 0x01
    23ae:	fa 81       	ldd	r31, Y+2	; 0x02
    23b0:	86 81       	ldd	r24, Z+6	; 0x06
    23b2:	88 2f       	mov	r24, r24
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	96 95       	lsr	r25
    23b8:	98 2f       	mov	r25, r24
    23ba:	88 27       	eor	r24, r24
    23bc:	97 95       	ror	r25
    23be:	87 95       	ror	r24
    23c0:	82 2b       	or	r24, r18
    23c2:	8c 93       	st	X, r24
		/* Force Output Compare Match when PWM is disabled */
		TCCR2 = (TCCR2 & 0x7F) | (0x01 << 7);		/*FOC2*/
    23c4:	a5 e4       	ldi	r26, 0x45	; 69
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e5 e4       	ldi	r30, 0x45	; 69
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	80 68       	ori	r24, 0x80	; 128
    23d0:	8c 93       	st	X, r24
		if (Config_Ptr -> timer_mode == CTC)
    23d2:	e9 81       	ldd	r30, Y+1	; 0x01
    23d4:	fa 81       	ldd	r31, Y+2	; 0x02
    23d6:	86 81       	ldd	r24, Z+6	; 0x06
    23d8:	82 30       	cpi	r24, 0x02	; 2
    23da:	79 f4       	brne	.+30     	; 0x23fa <Timer_init+0x1d8>
		{
			OCR2 = Config_Ptr -> timer_compare_MatchValue;
    23dc:	a3 e4       	ldi	r26, 0x43	; 67
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e9 81       	ldd	r30, Y+1	; 0x01
    23e2:	fa 81       	ldd	r31, Y+2	; 0x02
    23e4:	82 81       	ldd	r24, Z+2	; 0x02
    23e6:	93 81       	ldd	r25, Z+3	; 0x03
    23e8:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE2); // Enable Timer0 Compare Interrupt
    23ea:	a9 e5       	ldi	r26, 0x59	; 89
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e9 e5       	ldi	r30, 0x59	; 89
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	80 68       	ori	r24, 0x80	; 128
    23f6:	8c 93       	st	X, r24
    23f8:	07 c0       	rjmp	.+14     	; 0x2408 <Timer_init+0x1e6>
		}
		else{
			TIMSK |= (1<<TOIE2);   /*enables the interrupt */
    23fa:	a9 e5       	ldi	r26, 0x59	; 89
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e9 e5       	ldi	r30, 0x59	; 89
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	80 64       	ori	r24, 0x40	; 64
    2406:	8c 93       	st	X, r24
		}

		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr -> timer_clock);   /* Set Prescaler */
    2408:	a5 e4       	ldi	r26, 0x45	; 69
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e5 e4       	ldi	r30, 0x45	; 69
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	98 2f       	mov	r25, r24
    2414:	98 7f       	andi	r25, 0xF8	; 248
    2416:	e9 81       	ldd	r30, Y+1	; 0x01
    2418:	fa 81       	ldd	r31, Y+2	; 0x02
    241a:	85 81       	ldd	r24, Z+5	; 0x05
    241c:	89 2b       	or	r24, r25
    241e:	8c 93       	st	X, r24

		TCNT2 = Config_Ptr -> timer_InitialValue;
    2420:	a4 e4       	ldi	r26, 0x44	; 68
    2422:	b0 e0       	ldi	r27, 0x00	; 0
    2424:	e9 81       	ldd	r30, Y+1	; 0x01
    2426:	fa 81       	ldd	r31, Y+2	; 0x02
    2428:	80 81       	ld	r24, Z
    242a:	91 81       	ldd	r25, Z+1	; 0x01
    242c:	8c 93       	st	X, r24
	}
}
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <Timer_deInit>:
 * Description: Function to disable the Timer via Timer_ID.
 * Inputs: Timer_ID
 *  Return: None
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	00 d0       	rcall	.+0      	; 0x243e <Timer_deInit+0x6>
    243e:	0f 92       	push	r0
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_type)
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	28 2f       	mov	r18, r24
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	3b 83       	std	Y+3, r19	; 0x03
    244e:	2a 83       	std	Y+2, r18	; 0x02
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	9b 81       	ldd	r25, Y+3	; 0x03
    2454:	81 30       	cpi	r24, 0x01	; 1
    2456:	91 05       	cpc	r25, r1
    2458:	f9 f0       	breq	.+62     	; 0x2498 <Timer_deInit+0x60>
    245a:	2a 81       	ldd	r18, Y+2	; 0x02
    245c:	3b 81       	ldd	r19, Y+3	; 0x03
    245e:	22 30       	cpi	r18, 0x02	; 2
    2460:	31 05       	cpc	r19, r1
    2462:	99 f1       	breq	.+102    	; 0x24ca <Timer_deInit+0x92>
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	9b 81       	ldd	r25, Y+3	; 0x03
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	09 f0       	breq	.+2      	; 0x246e <Timer_deInit+0x36>
    246c:	42 c0       	rjmp	.+132    	; 0x24f2 <Timer_deInit+0xba>
	{
	case TIMER0:
		TCCR0 = 0;
    246e:	e3 e5       	ldi	r30, 0x53	; 83
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	10 82       	st	Z, r1
		TCNT0 = 0;
    2474:	e2 e5       	ldi	r30, 0x52	; 82
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	10 82       	st	Z, r1
		TIMSK &= ~(1<<OCIE0);
    247a:	a9 e5       	ldi	r26, 0x59	; 89
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e9 e5       	ldi	r30, 0x59	; 89
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	8d 7f       	andi	r24, 0xFD	; 253
    2486:	8c 93       	st	X, r24
		TIMSK &= ~(1<<TOIE0);
    2488:	a9 e5       	ldi	r26, 0x59	; 89
    248a:	b0 e0       	ldi	r27, 0x00	; 0
    248c:	e9 e5       	ldi	r30, 0x59	; 89
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	8e 7f       	andi	r24, 0xFE	; 254
    2494:	8c 93       	st	X, r24
    2496:	2d c0       	rjmp	.+90     	; 0x24f2 <Timer_deInit+0xba>
		break;

	case TIMER1:
		TCCR1A = 0;
    2498:	ef e4       	ldi	r30, 0x4F	; 79
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	10 82       	st	Z, r1
		TCCR1B = 0;
    249e:	ee e4       	ldi	r30, 0x4E	; 78
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	10 82       	st	Z, r1
		TCNT1 = 0;
    24a4:	ec e4       	ldi	r30, 0x4C	; 76
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	11 82       	std	Z+1, r1	; 0x01
    24aa:	10 82       	st	Z, r1
		TIMSK &= ~(1<<OCIE1A);
    24ac:	a9 e5       	ldi	r26, 0x59	; 89
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e9 e5       	ldi	r30, 0x59	; 89
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	8f 7e       	andi	r24, 0xEF	; 239
    24b8:	8c 93       	st	X, r24
		TIMSK &= ~(1<<TOIE1);
    24ba:	a9 e5       	ldi	r26, 0x59	; 89
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e9 e5       	ldi	r30, 0x59	; 89
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	8b 7f       	andi	r24, 0xFB	; 251
    24c6:	8c 93       	st	X, r24
    24c8:	14 c0       	rjmp	.+40     	; 0x24f2 <Timer_deInit+0xba>
		break;

	case TIMER2:
		TCCR2 = 0;
    24ca:	e5 e4       	ldi	r30, 0x45	; 69
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	10 82       	st	Z, r1
		TCNT2 = 0;
    24d0:	e4 e4       	ldi	r30, 0x44	; 68
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	10 82       	st	Z, r1
		TIMSK &= ~(1<<OCIE2);
    24d6:	a9 e5       	ldi	r26, 0x59	; 89
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e9 e5       	ldi	r30, 0x59	; 89
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	8f 77       	andi	r24, 0x7F	; 127
    24e2:	8c 93       	st	X, r24
		TIMSK &= ~(1<<TOIE2);
    24e4:	a9 e5       	ldi	r26, 0x59	; 89
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	e9 e5       	ldi	r30, 0x59	; 89
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	8f 7b       	andi	r24, 0xBF	; 191
    24f0:	8c 93       	st	X, r24
		break;
	}
}
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <Timer_setCallBack>:
 * Description: Function to set the Call Back function address to the required Timer.
 * Inputs: pointer to Call Back function and Timer Id you want to set The Callback to it.
 * Return: None
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	00 d0       	rcall	.+0      	; 0x2504 <Timer_setCallBack+0x6>
    2504:	00 d0       	rcall	.+0      	; 0x2506 <Timer_setCallBack+0x8>
    2506:	0f 92       	push	r0
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	9a 83       	std	Y+2, r25	; 0x02
    250e:	89 83       	std	Y+1, r24	; 0x01
    2510:	6b 83       	std	Y+3, r22	; 0x03
	/* Save the address of the Call back function in a global variable */
	switch (a_timer_ID) {
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	28 2f       	mov	r18, r24
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	3d 83       	std	Y+5, r19	; 0x05
    251a:	2c 83       	std	Y+4, r18	; 0x04
    251c:	8c 81       	ldd	r24, Y+4	; 0x04
    251e:	9d 81       	ldd	r25, Y+5	; 0x05
    2520:	81 30       	cpi	r24, 0x01	; 1
    2522:	91 05       	cpc	r25, r1
    2524:	81 f0       	breq	.+32     	; 0x2546 <Timer_setCallBack+0x48>
    2526:	2c 81       	ldd	r18, Y+4	; 0x04
    2528:	3d 81       	ldd	r19, Y+5	; 0x05
    252a:	22 30       	cpi	r18, 0x02	; 2
    252c:	31 05       	cpc	r19, r1
    252e:	91 f0       	breq	.+36     	; 0x2554 <Timer_setCallBack+0x56>
    2530:	8c 81       	ldd	r24, Y+4	; 0x04
    2532:	9d 81       	ldd	r25, Y+5	; 0x05
    2534:	00 97       	sbiw	r24, 0x00	; 0
    2536:	a1 f4       	brne	.+40     	; 0x2560 <Timer_setCallBack+0x62>
	case TIMER0:
		g_TIMER0_callBackPtr = a_ptr;
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	9a 81       	ldd	r25, Y+2	; 0x02
    253c:	90 93 7e 01 	sts	0x017E, r25
    2540:	80 93 7d 01 	sts	0x017D, r24
    2544:	0d c0       	rjmp	.+26     	; 0x2560 <Timer_setCallBack+0x62>
		break;
	case TIMER1:
		g_TIMER1_callBackPtr = a_ptr;
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	9a 81       	ldd	r25, Y+2	; 0x02
    254a:	90 93 80 01 	sts	0x0180, r25
    254e:	80 93 7f 01 	sts	0x017F, r24
    2552:	06 c0       	rjmp	.+12     	; 0x2560 <Timer_setCallBack+0x62>
		break;
	case TIMER2:
		g_TIMER2_callBackPtr = a_ptr;
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	9a 81       	ldd	r25, Y+2	; 0x02
    2558:	90 93 82 01 	sts	0x0182, r25
    255c:	80 93 81 01 	sts	0x0181, r24
		break;
	}
}
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <TWI_init>:
#include "gpio.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2570:	0f 93       	push	r16
    2572:	1f 93       	push	r17
    2574:	df 93       	push	r29
    2576:	cf 93       	push	r28
    2578:	00 d0       	rcall	.+0      	; 0x257a <TWI_init+0xa>
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    257e:	9a 83       	std	Y+2, r25	; 0x02
    2580:	89 83       	std	Y+1, r24	; 0x01
	/* Assume TWPS1 and TWPS0 = 00 */
	TWSR = 0x00;
    2582:	e1 e2       	ldi	r30, 0x21	; 33
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	10 82       	st	Z, r1

    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = ((F_CPU/Config_Ptr->bit_rate)-16)/8;
    2588:	00 e2       	ldi	r16, 0x20	; 32
    258a:	10 e0       	ldi	r17, 0x00	; 0
    258c:	e9 81       	ldd	r30, Y+1	; 0x01
    258e:	fa 81       	ldd	r31, Y+2	; 0x02
    2590:	82 81       	ldd	r24, Z+2	; 0x02
    2592:	93 81       	ldd	r25, Z+3	; 0x03
    2594:	9c 01       	movw	r18, r24
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	50 e0       	ldi	r21, 0x00	; 0
    259a:	80 e0       	ldi	r24, 0x00	; 0
    259c:	92 e1       	ldi	r25, 0x12	; 18
    259e:	aa e7       	ldi	r26, 0x7A	; 122
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	bc 01       	movw	r22, r24
    25a4:	cd 01       	movw	r24, r26
    25a6:	0e 94 45 14 	call	0x288a	; 0x288a <__udivmodsi4>
    25aa:	da 01       	movw	r26, r20
    25ac:	c9 01       	movw	r24, r18
    25ae:	40 97       	sbiw	r24, 0x10	; 16
    25b0:	a1 09       	sbc	r26, r1
    25b2:	b1 09       	sbc	r27, r1
    25b4:	68 94       	set
    25b6:	12 f8       	bld	r1, 2
    25b8:	b6 95       	lsr	r27
    25ba:	a7 95       	ror	r26
    25bc:	97 95       	ror	r25
    25be:	87 95       	ror	r24
    25c0:	16 94       	lsr	r1
    25c2:	d1 f7       	brne	.-12     	; 0x25b8 <TWI_init+0x48>
    25c4:	f8 01       	movw	r30, r16
    25c6:	80 83       	st	Z, r24


    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->address << 1); // my address = 0x01 :)  //CHECK!!!!!!
    25c8:	a2 e2       	ldi	r26, 0x22	; 34
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e9 81       	ldd	r30, Y+1	; 0x01
    25ce:	fa 81       	ldd	r31, Y+2	; 0x02
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	88 0f       	add	r24, r24
    25d6:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    25d8:	e6 e5       	ldi	r30, 0x56	; 86
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	84 e0       	ldi	r24, 0x04	; 4
    25de:	80 83       	st	Z, r24
}
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	08 95       	ret

000025ee <TWI_start>:

void TWI_start(void)
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
	 * TWSTO = 0 Disable Stop Condition Bit
	 * TWWC  = 0 No Collision
	 * TWEN  = 1 Enable TWI
	 * TWIE  = 0 Disable TWI Interrupt
	 ***********************************************************************/
	TWCR = (1<<TWEN) | (1<<TWSTA) | (1<<TWINT);
    25f6:	e6 e5       	ldi	r30, 0x56	; 86
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	84 ea       	ldi	r24, 0xA4	; 164
    25fc:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR, TWINT));
    25fe:	e6 e5       	ldi	r30, 0x56	; 86
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	88 23       	and	r24, r24
    2606:	dc f7       	brge	.-10     	; 0x25fe <TWI_start+0x10>

}
    2608:	cf 91       	pop	r28
    260a:	df 91       	pop	r29
    260c:	08 95       	ret

0000260e <TWI_stop>:
void TWI_stop(void)
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
	 * TWSTO = 1 Stop Condition Bit
	 * TWWC  = 0 No Collision
	 * TWEN  = 1 Enable TWI
	 * TWIE  = 0 Disable TWI Interrupt
	 ***********************************************************************/
	TWCR = (1<<TWEN) | (1<<TWSTO) | (1<<TWINT);
    2616:	e6 e5       	ldi	r30, 0x56	; 86
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	84 e9       	ldi	r24, 0x94	; 148
    261c:	80 83       	st	Z, r24
}
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	0f 92       	push	r0
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	89 83       	std	Y+1, r24	; 0x01
	 * TWWC  = 0 No Collision
	 * TWEN  = 1 Enable TWI
	 * TWIE  = 0 Disable TWI Interrupt
	 ***********************************************************************/
	/* TWINT flag need to be SET to enable writing */
	TWDR = data;
    2630:	e3 e2       	ldi	r30, 0x23	; 35
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	80 83       	st	Z, r24

	TWCR = (1<<TWEN) | (1<<TWINT);
    2638:	e6 e5       	ldi	r30, 0x56	; 86
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	84 e8       	ldi	r24, 0x84	; 132
    263e:	80 83       	st	Z, r24

	while(BIT_IS_CLEAR(TWCR, TWINT));
    2640:	e6 e5       	ldi	r30, 0x56	; 86
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	88 23       	and	r24, r24
    2648:	dc f7       	brge	.-10     	; 0x2640 <TWI_writeByte+0x1c>

}
    264a:	0f 90       	pop	r0
    264c:	cf 91       	pop	r28
    264e:	df 91       	pop	r29
    2650:	08 95       	ret

00002652 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
	 * TWSTO = 0 Disable Stop Condition Bit
	 * TWWC  = 0 No Collision
	 * TWEN  = 1 Enable TWI
	 * TWIE  = 0 Disable TWI Interrupt
	 ***********************************************************************/
	TWCR = (1<<TWEN) | (1<<TWINT) | (1<<TWEA);
    265a:	e6 e5       	ldi	r30, 0x56	; 86
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	84 ec       	ldi	r24, 0xC4	; 196
    2660:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2662:	e6 e5       	ldi	r30, 0x56	; 86
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	88 23       	and	r24, r24
    266a:	dc f7       	brge	.-10     	; 0x2662 <TWI_readByteWithACK+0x10>
    /* Read Data */
	return TWDR;
    266c:	e3 e2       	ldi	r30, 0x23	; 35
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	80 81       	ld	r24, Z
}
    2672:	cf 91       	pop	r28
    2674:	df 91       	pop	r29
    2676:	08 95       	ret

00002678 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2678:	df 93       	push	r29
    267a:	cf 93       	push	r28
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
	 * TWSTO = 0 Disable Stop Condition Bit
	 * TWWC  = 0 No Collision
	 * TWEN  = 1 Enable TWI
	 * TWIE  = 0 Disable TWI Interrupt
	 ***********************************************************************/
	TWCR = (1<<TWEN) | (1<<TWINT);
    2680:	e6 e5       	ldi	r30, 0x56	; 86
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	84 e8       	ldi	r24, 0x84	; 132
    2686:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2688:	e6 e5       	ldi	r30, 0x56	; 86
    268a:	f0 e0       	ldi	r31, 0x00	; 0
    268c:	80 81       	ld	r24, Z
    268e:	88 23       	and	r24, r24
    2690:	dc f7       	brge	.-10     	; 0x2688 <TWI_readByteWithNACK+0x10>
    /* Read Data */
	return TWDR;
    2692:	e3 e2       	ldi	r30, 0x23	; 35
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
}
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
	 /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	return (TWSR & 0xF8);
    26a6:	e1 e2       	ldi	r30, 0x21	; 33
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	88 7f       	andi	r24, 0xF8	; 248
}
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	08 95       	ret

000026b4 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Type)
{
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	00 d0       	rcall	.+0      	; 0x26ba <UART_init+0x6>
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <UART_init+0x8>
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    26c0:	9c 83       	std	Y+4, r25	; 0x04
    26c2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    26c4:	1a 82       	std	Y+2, r1	; 0x02
    26c6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    26c8:	eb e2       	ldi	r30, 0x2B	; 43
    26ca:	f0 e0       	ldi	r31, 0x00	; 0
    26cc:	82 e0       	ldi	r24, 0x02	; 2
    26ce:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    26d0:	ea e2       	ldi	r30, 0x2A	; 42
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	88 e1       	ldi	r24, 0x18	; 24
    26d6:	80 83       	st	Z, r24
	if( Config_Type->bit_data == NINE_BIT)
    26d8:	eb 81       	ldd	r30, Y+3	; 0x03
    26da:	fc 81       	ldd	r31, Y+4	; 0x04
    26dc:	80 81       	ld	r24, Z
    26de:	87 30       	cpi	r24, 0x07	; 7
    26e0:	21 f4       	brne	.+8      	; 0x26ea <UART_init+0x36>
		UCSRB = (1<<UCSZ2);
    26e2:	ea e2       	ldi	r30, 0x2A	; 42
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	84 e0       	ldi	r24, 0x04	; 4
    26e8:	80 83       	st	Z, r24
	 * UPM1:0 Based on the parity chose
	 * USBS   Based on number of stop bits
	 * UCSZ1:0 Based on data mode
	 * UCPOL = 0 Used with the Synchronous operation only
	 **********************************************************************/
	UCSRC = (1<<URSEL);
    26ea:	e0 e4       	ldi	r30, 0x40	; 64
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 e8       	ldi	r24, 0x80	; 128
    26f0:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | (Config_Type->parity << 4);   /* Parity */
    26f2:	a0 e4       	ldi	r26, 0x40	; 64
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	e0 e4       	ldi	r30, 0x40	; 64
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	28 2f       	mov	r18, r24
    26fe:	2f 7c       	andi	r18, 0xCF	; 207
    2700:	eb 81       	ldd	r30, Y+3	; 0x03
    2702:	fc 81       	ldd	r31, Y+4	; 0x04
    2704:	81 81       	ldd	r24, Z+1	; 0x01
    2706:	88 2f       	mov	r24, r24
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	82 95       	swap	r24
    270c:	92 95       	swap	r25
    270e:	90 7f       	andi	r25, 0xF0	; 240
    2710:	98 27       	eor	r25, r24
    2712:	80 7f       	andi	r24, 0xF0	; 240
    2714:	98 27       	eor	r25, r24
    2716:	82 2b       	or	r24, r18
    2718:	8c 93       	st	X, r24
	SET_BIT(UCSRC,Config_Type->stop_bit);
    271a:	a0 e4       	ldi	r26, 0x40	; 64
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e0 e4       	ldi	r30, 0x40	; 64
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	48 2f       	mov	r20, r24
    2726:	eb 81       	ldd	r30, Y+3	; 0x03
    2728:	fc 81       	ldd	r31, Y+4	; 0x04
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	02 c0       	rjmp	.+4      	; 0x273a <UART_init+0x86>
    2736:	88 0f       	add	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	2a 95       	dec	r18
    273c:	e2 f7       	brpl	.-8      	; 0x2736 <UART_init+0x82>
    273e:	84 2b       	or	r24, r20
    2740:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (Config_Type->bit_data << 1);   /* Data Bit mode */
    2742:	a0 e4       	ldi	r26, 0x40	; 64
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	e0 e4       	ldi	r30, 0x40	; 64
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	28 2f       	mov	r18, r24
    274e:	29 7f       	andi	r18, 0xF9	; 249
    2750:	eb 81       	ldd	r30, Y+3	; 0x03
    2752:	fc 81       	ldd	r31, Y+4	; 0x04
    2754:	80 81       	ld	r24, Z
    2756:	88 2f       	mov	r24, r24
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	88 0f       	add	r24, r24
    275c:	99 1f       	adc	r25, r25
    275e:	82 2b       	or	r24, r18
    2760:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Type->baud_rate * 8UL))) - 1);
    2762:	eb 81       	ldd	r30, Y+3	; 0x03
    2764:	fc 81       	ldd	r31, Y+4	; 0x04
    2766:	83 81       	ldd	r24, Z+3	; 0x03
    2768:	94 81       	ldd	r25, Z+4	; 0x04
    276a:	a5 81       	ldd	r26, Z+5	; 0x05
    276c:	b6 81       	ldd	r27, Z+6	; 0x06
    276e:	88 0f       	add	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	aa 1f       	adc	r26, r26
    2774:	bb 1f       	adc	r27, r27
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	aa 1f       	adc	r26, r26
    277c:	bb 1f       	adc	r27, r27
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	aa 1f       	adc	r26, r26
    2784:	bb 1f       	adc	r27, r27
    2786:	9c 01       	movw	r18, r24
    2788:	ad 01       	movw	r20, r26
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	92 e1       	ldi	r25, 0x12	; 18
    278e:	aa e7       	ldi	r26, 0x7A	; 122
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 45 14 	call	0x288a	; 0x288a <__udivmodsi4>
    279a:	da 01       	movw	r26, r20
    279c:	c9 01       	movw	r24, r18
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    27a4:	e0 e4       	ldi	r30, 0x40	; 64
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	89 2f       	mov	r24, r25
    27ae:	99 27       	eor	r25, r25
    27b0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    27b2:	e9 e2       	ldi	r30, 0x29	; 41
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	80 83       	st	Z, r24
}
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	0f 90       	pop	r0
    27c2:	cf 91       	pop	r28
    27c4:	df 91       	pop	r29
    27c6:	08 95       	ret

000027c8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    27c8:	df 93       	push	r29
    27ca:	cf 93       	push	r28
    27cc:	0f 92       	push	r0
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    27d4:	eb e2       	ldi	r30, 0x2B	; 43
    27d6:	f0 e0       	ldi	r31, 0x00	; 0
    27d8:	80 81       	ld	r24, Z
    27da:	88 2f       	mov	r24, r24
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	80 72       	andi	r24, 0x20	; 32
    27e0:	90 70       	andi	r25, 0x00	; 0
    27e2:	00 97       	sbiw	r24, 0x00	; 0
    27e4:	b9 f3       	breq	.-18     	; 0x27d4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    27e6:	ec e2       	ldi	r30, 0x2C	; 44
    27e8:	f0 e0       	ldi	r31, 0x00	; 0
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	80 83       	st	Z, r24
}
    27ee:	0f 90       	pop	r0
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA, RXC));
    27fe:	eb e2       	ldi	r30, 0x2B	; 43
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	88 23       	and	r24, r24
    2806:	dc f7       	brge	.-10     	; 0x27fe <UART_recieveByte+0x8>
	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    2808:	ec e2       	ldi	r30, 0x2C	; 44
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
}
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	00 d0       	rcall	.+0      	; 0x281a <UART_sendString+0x6>
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	9a 83       	std	Y+2, r25	; 0x02
    2820:	89 83       	std	Y+1, r24	; 0x01
    2822:	0a c0       	rjmp	.+20     	; 0x2838 <UART_sendString+0x24>
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
    2824:	e9 81       	ldd	r30, Y+1	; 0x01
    2826:	fa 81       	ldd	r31, Y+2	; 0x02
    2828:	80 81       	ld	r24, Z
    282a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <UART_sendByte>
		Str++;
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	9a 81       	ldd	r25, Y+2	; 0x02
    2832:	01 96       	adiw	r24, 0x01	; 1
    2834:	9a 83       	std	Y+2, r25	; 0x02
    2836:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
	while(*Str != '\0')
    2838:	e9 81       	ldd	r30, Y+1	; 0x01
    283a:	fa 81       	ldd	r31, Y+2	; 0x02
    283c:	80 81       	ld	r24, Z
    283e:	88 23       	and	r24, r24
    2840:	89 f7       	brne	.-30     	; 0x2824 <UART_sendString+0x10>
	{
		UART_sendByte(*Str);
		Str++;
	}
}
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	08 95       	ret

0000284c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) // Receive until #
{
    284c:	df 93       	push	r29
    284e:	cf 93       	push	r28
    2850:	00 d0       	rcall	.+0      	; 0x2852 <UART_receiveString+0x6>
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
    2856:	9a 83       	std	Y+2, r25	; 0x02
    2858:	89 83       	std	Y+1, r24	; 0x01
    285a:	0a c0       	rjmp	.+20     	; 0x2870 <UART_receiveString+0x24>
	while(*Str != '#')
	{
		*Str = UART_recieveByte();
    285c:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <UART_recieveByte>
    2860:	e9 81       	ldd	r30, Y+1	; 0x01
    2862:	fa 81       	ldd	r31, Y+2	; 0x02
    2864:	80 83       	st	Z, r24
		Str++;
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	9a 81       	ldd	r25, Y+2	; 0x02
    286a:	01 96       	adiw	r24, 0x01	; 1
    286c:	9a 83       	std	Y+2, r25	; 0x02
    286e:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) // Receive until #
{
	while(*Str != '#')
    2870:	e9 81       	ldd	r30, Y+1	; 0x01
    2872:	fa 81       	ldd	r31, Y+2	; 0x02
    2874:	80 81       	ld	r24, Z
    2876:	83 32       	cpi	r24, 0x23	; 35
    2878:	89 f7       	brne	.-30     	; 0x285c <UART_receiveString+0x10>
	{
		*Str = UART_recieveByte();
		Str++;
	}
	*Str = '\0';
    287a:	e9 81       	ldd	r30, Y+1	; 0x01
    287c:	fa 81       	ldd	r31, Y+2	; 0x02
    287e:	10 82       	st	Z, r1
}
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <__udivmodsi4>:
    288a:	a1 e2       	ldi	r26, 0x21	; 33
    288c:	1a 2e       	mov	r1, r26
    288e:	aa 1b       	sub	r26, r26
    2890:	bb 1b       	sub	r27, r27
    2892:	fd 01       	movw	r30, r26
    2894:	0d c0       	rjmp	.+26     	; 0x28b0 <__udivmodsi4_ep>

00002896 <__udivmodsi4_loop>:
    2896:	aa 1f       	adc	r26, r26
    2898:	bb 1f       	adc	r27, r27
    289a:	ee 1f       	adc	r30, r30
    289c:	ff 1f       	adc	r31, r31
    289e:	a2 17       	cp	r26, r18
    28a0:	b3 07       	cpc	r27, r19
    28a2:	e4 07       	cpc	r30, r20
    28a4:	f5 07       	cpc	r31, r21
    28a6:	20 f0       	brcs	.+8      	; 0x28b0 <__udivmodsi4_ep>
    28a8:	a2 1b       	sub	r26, r18
    28aa:	b3 0b       	sbc	r27, r19
    28ac:	e4 0b       	sbc	r30, r20
    28ae:	f5 0b       	sbc	r31, r21

000028b0 <__udivmodsi4_ep>:
    28b0:	66 1f       	adc	r22, r22
    28b2:	77 1f       	adc	r23, r23
    28b4:	88 1f       	adc	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	1a 94       	dec	r1
    28ba:	69 f7       	brne	.-38     	; 0x2896 <__udivmodsi4_loop>
    28bc:	60 95       	com	r22
    28be:	70 95       	com	r23
    28c0:	80 95       	com	r24
    28c2:	90 95       	com	r25
    28c4:	9b 01       	movw	r18, r22
    28c6:	ac 01       	movw	r20, r24
    28c8:	bd 01       	movw	r22, r26
    28ca:	cf 01       	movw	r24, r30
    28cc:	08 95       	ret

000028ce <__prologue_saves__>:
    28ce:	2f 92       	push	r2
    28d0:	3f 92       	push	r3
    28d2:	4f 92       	push	r4
    28d4:	5f 92       	push	r5
    28d6:	6f 92       	push	r6
    28d8:	7f 92       	push	r7
    28da:	8f 92       	push	r8
    28dc:	9f 92       	push	r9
    28de:	af 92       	push	r10
    28e0:	bf 92       	push	r11
    28e2:	cf 92       	push	r12
    28e4:	df 92       	push	r13
    28e6:	ef 92       	push	r14
    28e8:	ff 92       	push	r15
    28ea:	0f 93       	push	r16
    28ec:	1f 93       	push	r17
    28ee:	cf 93       	push	r28
    28f0:	df 93       	push	r29
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	ca 1b       	sub	r28, r26
    28f8:	db 0b       	sbc	r29, r27
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	09 94       	ijmp

00002906 <__epilogue_restores__>:
    2906:	2a 88       	ldd	r2, Y+18	; 0x12
    2908:	39 88       	ldd	r3, Y+17	; 0x11
    290a:	48 88       	ldd	r4, Y+16	; 0x10
    290c:	5f 84       	ldd	r5, Y+15	; 0x0f
    290e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2910:	7d 84       	ldd	r7, Y+13	; 0x0d
    2912:	8c 84       	ldd	r8, Y+12	; 0x0c
    2914:	9b 84       	ldd	r9, Y+11	; 0x0b
    2916:	aa 84       	ldd	r10, Y+10	; 0x0a
    2918:	b9 84       	ldd	r11, Y+9	; 0x09
    291a:	c8 84       	ldd	r12, Y+8	; 0x08
    291c:	df 80       	ldd	r13, Y+7	; 0x07
    291e:	ee 80       	ldd	r14, Y+6	; 0x06
    2920:	fd 80       	ldd	r15, Y+5	; 0x05
    2922:	0c 81       	ldd	r16, Y+4	; 0x04
    2924:	1b 81       	ldd	r17, Y+3	; 0x03
    2926:	aa 81       	ldd	r26, Y+2	; 0x02
    2928:	b9 81       	ldd	r27, Y+1	; 0x01
    292a:	ce 0f       	add	r28, r30
    292c:	d1 1d       	adc	r29, r1
    292e:	0f b6       	in	r0, 0x3f	; 63
    2930:	f8 94       	cli
    2932:	de bf       	out	0x3e, r29	; 62
    2934:	0f be       	out	0x3f, r0	; 63
    2936:	cd bf       	out	0x3d, r28	; 61
    2938:	ed 01       	movw	r28, r26
    293a:	08 95       	ret

0000293c <_exit>:
    293c:	f8 94       	cli

0000293e <__stop_program>:
    293e:	ff cf       	rjmp	.-2      	; 0x293e <__stop_program>
