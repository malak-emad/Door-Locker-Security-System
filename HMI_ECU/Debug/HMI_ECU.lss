
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  000037d4  00003868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800144  00800144  0000394c  2**0
                  ALLOC
  3 .stab         00003108  00000000  00000000  0000394c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001354  00000000  00000000  00006a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008058  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ab8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b93c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ba9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bd29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c4f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 85 18 	jmp	0x310a	; 0x310a <__vector_4>
      14:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 1f 18 	jmp	0x303e	; 0x303e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ec 17 	jmp	0x2fd8	; 0x2fd8 <__vector_9>
      28:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__vector_10>
      2c:	0c 94 86 17 	jmp	0x2f0c	; 0x2f0c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 34       	cpi	r26, 0x44	; 68
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e4       	ldi	r26, 0x44	; 68
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 35       	cpi	r26, 0x50	; 80
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 92 0a 	call	0x1524	; 0x1524 <main>
      8a:	0c 94 e8 1b 	jmp	0x37d0	; 0x37d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e2       	ldi	r26, 0x2E	; 46
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 94 1b 	jmp	0x3728	; 0x3728 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 94 1b 	jmp	0x3728	; 0x3728 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e2       	ldi	r24, 0x2E	; 46
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 94 1b 	jmp	0x3728	; 0x3728 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 94 1b 	jmp	0x3728	; 0x3728 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 94 1b 	jmp	0x3728	; 0x3728 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7c 1b 	jmp	0x36f8	; 0x36f8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	00 d0       	rcall	.+0      	; 0xefc <GPIO_readPin+0xa>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	89 83       	std	Y+1, r24	; 0x01
     f02:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	18 f4       	brcc	.+6      	; 0xf10 <GPIO_readPin+0x1e>
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	84 30       	cpi	r24, 0x04	; 4
     f0e:	10 f0       	brcs	.+4      	; 0xf14 <GPIO_readPin+0x22>
	{
		return LOGIC_LOW;
     f10:	1d 82       	std	Y+5, r1	; 0x05
     f12:	82 c0       	rjmp	.+260    	; 0x1018 <GPIO_readPin+0x126>
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3c 83       	std	Y+4, r19	; 0x04
     f1c:	2b 83       	std	Y+3, r18	; 0x03
     f1e:	4b 81       	ldd	r20, Y+3	; 0x03
     f20:	5c 81       	ldd	r21, Y+4	; 0x04
     f22:	41 30       	cpi	r20, 0x01	; 1
     f24:	51 05       	cpc	r21, r1
     f26:	79 f1       	breq	.+94     	; 0xf86 <GPIO_readPin+0x94>
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	91 05       	cpc	r25, r1
     f30:	34 f4       	brge	.+12     	; 0xf3e <GPIO_readPin+0x4c>
     f32:	2b 81       	ldd	r18, Y+3	; 0x03
     f34:	3c 81       	ldd	r19, Y+4	; 0x04
     f36:	21 15       	cp	r18, r1
     f38:	31 05       	cpc	r19, r1
     f3a:	69 f0       	breq	.+26     	; 0xf56 <GPIO_readPin+0x64>
     f3c:	6c c0       	rjmp	.+216    	; 0x1016 <GPIO_readPin+0x124>
     f3e:	4b 81       	ldd	r20, Y+3	; 0x03
     f40:	5c 81       	ldd	r21, Y+4	; 0x04
     f42:	42 30       	cpi	r20, 0x02	; 2
     f44:	51 05       	cpc	r21, r1
     f46:	b9 f1       	breq	.+110    	; 0xfb6 <GPIO_readPin+0xc4>
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	9c 81       	ldd	r25, Y+4	; 0x04
     f4c:	83 30       	cpi	r24, 0x03	; 3
     f4e:	91 05       	cpc	r25, r1
     f50:	09 f4       	brne	.+2      	; 0xf54 <GPIO_readPin+0x62>
     f52:	49 c0       	rjmp	.+146    	; 0xfe6 <GPIO_readPin+0xf4>
     f54:	60 c0       	rjmp	.+192    	; 0x1016 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if((BIT_IS_SET(PINA,pin_num)))
     f56:	e9 e3       	ldi	r30, 0x39	; 57
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a9 01       	movw	r20, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <GPIO_readPin+0x7c>
     f6a:	55 95       	asr	r21
     f6c:	47 95       	ror	r20
     f6e:	8a 95       	dec	r24
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <GPIO_readPin+0x78>
     f72:	ca 01       	movw	r24, r20
     f74:	81 70       	andi	r24, 0x01	; 1
     f76:	90 70       	andi	r25, 0x00	; 0
     f78:	88 23       	and	r24, r24
     f7a:	19 f0       	breq	.+6      	; 0xf82 <GPIO_readPin+0x90>
			{
				return LOGIC_HIGH;
     f7c:	51 e0       	ldi	r21, 0x01	; 1
     f7e:	5d 83       	std	Y+5, r21	; 0x05
     f80:	4b c0       	rjmp	.+150    	; 0x1018 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
     f82:	1d 82       	std	Y+5, r1	; 0x05
     f84:	49 c0       	rjmp	.+146    	; 0x1018 <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if((BIT_IS_SET(PINB,pin_num)))
     f86:	e6 e3       	ldi	r30, 0x36	; 54
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	88 2f       	mov	r24, r24
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	a9 01       	movw	r20, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <GPIO_readPin+0xac>
     f9a:	55 95       	asr	r21
     f9c:	47 95       	ror	r20
     f9e:	8a 95       	dec	r24
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <GPIO_readPin+0xa8>
     fa2:	ca 01       	movw	r24, r20
     fa4:	81 70       	andi	r24, 0x01	; 1
     fa6:	90 70       	andi	r25, 0x00	; 0
     fa8:	88 23       	and	r24, r24
     faa:	19 f0       	breq	.+6      	; 0xfb2 <GPIO_readPin+0xc0>
			{
				return LOGIC_HIGH;
     fac:	51 e0       	ldi	r21, 0x01	; 1
     fae:	5d 83       	std	Y+5, r21	; 0x05
     fb0:	33 c0       	rjmp	.+102    	; 0x1018 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
     fb2:	1d 82       	std	Y+5, r1	; 0x05
     fb4:	31 c0       	rjmp	.+98     	; 0x1018 <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if((BIT_IS_SET(PINC,pin_num)))
     fb6:	e3 e3       	ldi	r30, 0x33	; 51
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	a9 01       	movw	r20, r18
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <GPIO_readPin+0xdc>
     fca:	55 95       	asr	r21
     fcc:	47 95       	ror	r20
     fce:	8a 95       	dec	r24
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <GPIO_readPin+0xd8>
     fd2:	ca 01       	movw	r24, r20
     fd4:	81 70       	andi	r24, 0x01	; 1
     fd6:	90 70       	andi	r25, 0x00	; 0
     fd8:	88 23       	and	r24, r24
     fda:	19 f0       	breq	.+6      	; 0xfe2 <GPIO_readPin+0xf0>
			{
				return LOGIC_HIGH;
     fdc:	51 e0       	ldi	r21, 0x01	; 1
     fde:	5d 83       	std	Y+5, r21	; 0x05
     fe0:	1b c0       	rjmp	.+54     	; 0x1018 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
     fe2:	1d 82       	std	Y+5, r1	; 0x05
     fe4:	19 c0       	rjmp	.+50     	; 0x1018 <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if((BIT_IS_SET(PIND,pin_num)))
     fe6:	e0 e3       	ldi	r30, 0x30	; 48
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a9 01       	movw	r20, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <GPIO_readPin+0x10c>
     ffa:	55 95       	asr	r21
     ffc:	47 95       	ror	r20
     ffe:	8a 95       	dec	r24
    1000:	e2 f7       	brpl	.-8      	; 0xffa <GPIO_readPin+0x108>
    1002:	ca 01       	movw	r24, r20
    1004:	81 70       	andi	r24, 0x01	; 1
    1006:	90 70       	andi	r25, 0x00	; 0
    1008:	88 23       	and	r24, r24
    100a:	19 f0       	breq	.+6      	; 0x1012 <GPIO_readPin+0x120>
			{
				return LOGIC_HIGH;
    100c:	51 e0       	ldi	r21, 0x01	; 1
    100e:	5d 83       	std	Y+5, r21	; 0x05
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1012:	1d 82       	std	Y+5, r1	; 0x05
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <GPIO_readPin+0x126>
    1016:	02 c0       	rjmp	.+4      	; 0x101c <GPIO_readPin+0x12a>
			}
			break;
		}
	}
}
    1018:	8d 81       	ldd	r24, Y+5	; 0x05
    101a:	8e 83       	std	Y+6, r24	; 0x06
    101c:	8e 81       	ldd	r24, Y+6	; 0x06
    101e:	26 96       	adiw	r28, 0x06	; 6
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <GPIO_setupPortDirection+0x6>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <GPIO_setupPortDirection+0x8>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	90 f5       	brcc	.+100    	; 0x10aa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3c 83       	std	Y+4, r19	; 0x04
    104e:	2b 83       	std	Y+3, r18	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	91 05       	cpc	r25, r1
    1058:	d1 f0       	breq	.+52     	; 0x108e <GPIO_setupPortDirection+0x5e>
    105a:	2b 81       	ldd	r18, Y+3	; 0x03
    105c:	3c 81       	ldd	r19, Y+4	; 0x04
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	31 05       	cpc	r19, r1
    1062:	2c f4       	brge	.+10     	; 0x106e <GPIO_setupPortDirection+0x3e>
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	61 f0       	breq	.+24     	; 0x1084 <GPIO_setupPortDirection+0x54>
    106c:	1e c0       	rjmp	.+60     	; 0x10aa <GPIO_setupPortDirection+0x7a>
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	3c 81       	ldd	r19, Y+4	; 0x04
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	81 f0       	breq	.+32     	; 0x1098 <GPIO_setupPortDirection+0x68>
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	91 05       	cpc	r25, r1
    1080:	81 f0       	breq	.+32     	; 0x10a2 <GPIO_setupPortDirection+0x72>
    1082:	13 c0       	rjmp	.+38     	; 0x10aa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1084:	ea e3       	ldi	r30, 0x3A	; 58
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	80 83       	st	Z, r24
    108c:	0e c0       	rjmp	.+28     	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    108e:	e7 e3       	ldi	r30, 0x37	; 55
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	80 83       	st	Z, r24
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1098:	e4 e3       	ldi	r30, 0x34	; 52
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	80 83       	st	Z, r24
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10a2:	e1 e3       	ldi	r30, 0x31	; 49
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	80 83       	st	Z, r24
			break;
		}
	}
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <GPIO_writePort+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <GPIO_writePort+0x8>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	90 f5       	brcc	.+100    	; 0x1132 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	3c 83       	std	Y+4, r19	; 0x04
    10d6:	2b 83       	std	Y+3, r18	; 0x03
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	91 05       	cpc	r25, r1
    10e0:	d1 f0       	breq	.+52     	; 0x1116 <GPIO_writePort+0x5e>
    10e2:	2b 81       	ldd	r18, Y+3	; 0x03
    10e4:	3c 81       	ldd	r19, Y+4	; 0x04
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	2c f4       	brge	.+10     	; 0x10f6 <GPIO_writePort+0x3e>
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	61 f0       	breq	.+24     	; 0x110c <GPIO_writePort+0x54>
    10f4:	1e c0       	rjmp	.+60     	; 0x1132 <GPIO_writePort+0x7a>
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	3c 81       	ldd	r19, Y+4	; 0x04
    10fa:	22 30       	cpi	r18, 0x02	; 2
    10fc:	31 05       	cpc	r19, r1
    10fe:	81 f0       	breq	.+32     	; 0x1120 <GPIO_writePort+0x68>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	81 f0       	breq	.+32     	; 0x112a <GPIO_writePort+0x72>
    110a:	13 c0       	rjmp	.+38     	; 0x1132 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	80 83       	st	Z, r24
    1114:	0e c0       	rjmp	.+28     	; 0x1132 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1116:	e8 e3       	ldi	r30, 0x38	; 56
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	80 83       	st	Z, r24
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	80 83       	st	Z, r24
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    112a:	e2 e3       	ldi	r30, 0x32	; 50
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	80 83       	st	Z, r24
			break;
		}
	}
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <GPIO_readPort+0x6>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <GPIO_readPort+0x8>
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	84 30       	cpi	r24, 0x04	; 4
    1154:	10 f0       	brcs	.+4      	; 0x115a <GPIO_readPort+0x1a>
	{
		return 0;
    1156:	1c 82       	std	Y+4, r1	; 0x04
    1158:	50 c0       	rjmp	.+160    	; 0x11fa <GPIO_readPort+0xba>
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3b 83       	std	Y+3, r19	; 0x03
    1162:	2a 83       	std	Y+2, r18	; 0x02
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	9b 81       	ldd	r25, Y+3	; 0x03
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	09 f1       	breq	.+66     	; 0x11b0 <GPIO_readPort+0x70>
    116e:	2a 81       	ldd	r18, Y+2	; 0x02
    1170:	3b 81       	ldd	r19, Y+3	; 0x03
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	2c f4       	brge	.+10     	; 0x1182 <GPIO_readPort+0x42>
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	9b 81       	ldd	r25, Y+3	; 0x03
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	61 f0       	breq	.+24     	; 0x1198 <GPIO_readPort+0x58>
    1180:	3b c0       	rjmp	.+118    	; 0x11f8 <GPIO_readPort+0xb8>
    1182:	2a 81       	ldd	r18, Y+2	; 0x02
    1184:	3b 81       	ldd	r19, Y+3	; 0x03
    1186:	22 30       	cpi	r18, 0x02	; 2
    1188:	31 05       	cpc	r19, r1
    118a:	f1 f0       	breq	.+60     	; 0x11c8 <GPIO_readPort+0x88>
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	9b 81       	ldd	r25, Y+3	; 0x03
    1190:	83 30       	cpi	r24, 0x03	; 3
    1192:	91 05       	cpc	r25, r1
    1194:	29 f1       	breq	.+74     	; 0x11e0 <GPIO_readPort+0xa0>
    1196:	30 c0       	rjmp	.+96     	; 0x11f8 <GPIO_readPort+0xb8>
		{
		case PORTA_ID:
			if(!PINA){
    1198:	e9 e3       	ldi	r30, 0x39	; 57
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	88 23       	and	r24, r24
    11a0:	11 f4       	brne	.+4      	; 0x11a6 <GPIO_readPort+0x66>
				return 0;
    11a2:	1c 82       	std	Y+4, r1	; 0x04
    11a4:	2a c0       	rjmp	.+84     	; 0x11fa <GPIO_readPort+0xba>
			}
			else{
				return PINA;
    11a6:	e9 e3       	ldi	r30, 0x39	; 57
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	90 81       	ld	r25, Z
    11ac:	9c 83       	std	Y+4, r25	; 0x04
    11ae:	25 c0       	rjmp	.+74     	; 0x11fa <GPIO_readPort+0xba>
			}
			break;
		case PORTB_ID:
			if(!PINB){
    11b0:	e6 e3       	ldi	r30, 0x36	; 54
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	88 23       	and	r24, r24
    11b8:	11 f4       	brne	.+4      	; 0x11be <GPIO_readPort+0x7e>
				return 0;
    11ba:	1c 82       	std	Y+4, r1	; 0x04
    11bc:	1e c0       	rjmp	.+60     	; 0x11fa <GPIO_readPort+0xba>
			}
			else{
				return PINB;
    11be:	e6 e3       	ldi	r30, 0x36	; 54
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	20 81       	ld	r18, Z
    11c4:	2c 83       	std	Y+4, r18	; 0x04
    11c6:	19 c0       	rjmp	.+50     	; 0x11fa <GPIO_readPort+0xba>
			}
			break;
		case PORTC_ID:
			if(!PINC){
    11c8:	e3 e3       	ldi	r30, 0x33	; 51
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	88 23       	and	r24, r24
    11d0:	11 f4       	brne	.+4      	; 0x11d6 <GPIO_readPort+0x96>
				return 0;
    11d2:	1c 82       	std	Y+4, r1	; 0x04
    11d4:	12 c0       	rjmp	.+36     	; 0x11fa <GPIO_readPort+0xba>
			}
			else{
				return PINC;
    11d6:	e3 e3       	ldi	r30, 0x33	; 51
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	30 81       	ld	r19, Z
    11dc:	3c 83       	std	Y+4, r19	; 0x04
    11de:	0d c0       	rjmp	.+26     	; 0x11fa <GPIO_readPort+0xba>
			}
			break;
		case PORTD_ID:
			if(!PIND){
    11e0:	e0 e3       	ldi	r30, 0x30	; 48
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	88 23       	and	r24, r24
    11e8:	11 f4       	brne	.+4      	; 0x11ee <GPIO_readPort+0xae>
				return 0;
    11ea:	1c 82       	std	Y+4, r1	; 0x04
    11ec:	06 c0       	rjmp	.+12     	; 0x11fa <GPIO_readPort+0xba>
			}
			else{
				return PIND;
    11ee:	e0 e3       	ldi	r30, 0x30	; 48
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	8c 83       	std	Y+4, r24	; 0x04
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <GPIO_readPort+0xba>
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <GPIO_readPort+0xbe>
			}
			break;
		}
	}

}
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	9d 83       	std	Y+5, r25	; 0x05
    11fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <pass_callBack>:
uint8 i = 0;
uint8 timerFlag = 0;
unsigned char g_tick = 0;

void pass_callBack(void)
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1218:	80 91 49 01 	lds	r24, 0x0149
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	80 93 49 01 	sts	0x0149, r24
	if(g_tick == NUMBER_OF_COMPARE_MTACHES_FOR_PASS)
    1222:	80 91 49 01 	lds	r24, 0x0149
    1226:	8c 33       	cpi	r24, 0x3C	; 60
    1228:	91 f4       	brne	.+36     	; 0x124e <pass_callBack+0x3e>
	{
		g_LCD_state = 2;
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	80 93 45 01 	sts	0x0145, r24
		timerFlag = 0;
    1230:	10 92 48 01 	sts	0x0148, r1
		UART_sendByte(HMI_READY);
    1234:	80 e1       	ldi	r24, 0x10	; 16
    1236:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
		while(UART_recieveByte() != CONTROL_READY){};
    123a:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    123e:	81 31       	cpi	r24, 0x11	; 17
    1240:	e1 f7       	brne	.-8      	; 0x123a <pass_callBack+0x2a>
		UART_sendByte(HMI_TIMEOVER);
    1242:	86 e2       	ldi	r24, 0x26	; 38
    1244:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
		Timer_deInit(TIMER1);
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	0e 94 c3 19 	call	0x3386	; 0x3386 <Timer_deInit>
	}
}
    124e:	cf 91       	pop	r28
    1250:	df 91       	pop	r29
    1252:	08 95       	ret

00001254 <LCD_function>:

void LCD_function(void)
{
    1254:	df 93       	push	r29
    1256:	cf 93       	push	r28
    1258:	00 d0       	rcall	.+0      	; 0x125a <LCD_function+0x6>
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
	switch(g_LCD_state)
    125e:	80 91 45 01 	lds	r24, 0x0145
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	3a 83       	std	Y+2, r19	; 0x02
    1268:	29 83       	std	Y+1, r18	; 0x01
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	9a 81       	ldd	r25, Y+2	; 0x02
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <LCD_function+0x22>
    1274:	5a c0       	rjmp	.+180    	; 0x132a <LCD_function+0xd6>
    1276:	29 81       	ldd	r18, Y+1	; 0x01
    1278:	3a 81       	ldd	r19, Y+2	; 0x02
    127a:	24 30       	cpi	r18, 0x04	; 4
    127c:	31 05       	cpc	r19, r1
    127e:	7c f4       	brge	.+30     	; 0x129e <LCD_function+0x4a>
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	91 05       	cpc	r25, r1
    1288:	71 f1       	breq	.+92     	; 0x12e6 <LCD_function+0x92>
    128a:	29 81       	ldd	r18, Y+1	; 0x01
    128c:	3a 81       	ldd	r19, Y+2	; 0x02
    128e:	22 30       	cpi	r18, 0x02	; 2
    1290:	31 05       	cpc	r19, r1
    1292:	e4 f5       	brge	.+120    	; 0x130c <LCD_function+0xb8>
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	9a 81       	ldd	r25, Y+2	; 0x02
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	d1 f0       	breq	.+52     	; 0x12d0 <LCD_function+0x7c>
    129c:	8c c0       	rjmp	.+280    	; 0x13b6 <LCD_function+0x162>
    129e:	29 81       	ldd	r18, Y+1	; 0x01
    12a0:	3a 81       	ldd	r19, Y+2	; 0x02
    12a2:	25 30       	cpi	r18, 0x05	; 5
    12a4:	31 05       	cpc	r19, r1
    12a6:	09 f4       	brne	.+2      	; 0x12aa <LCD_function+0x56>
    12a8:	62 c0       	rjmp	.+196    	; 0x136e <LCD_function+0x11a>
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	9a 81       	ldd	r25, Y+2	; 0x02
    12ae:	85 30       	cpi	r24, 0x05	; 5
    12b0:	91 05       	cpc	r25, r1
    12b2:	0c f4       	brge	.+2      	; 0x12b6 <LCD_function+0x62>
    12b4:	4d c0       	rjmp	.+154    	; 0x1350 <LCD_function+0xfc>
    12b6:	29 81       	ldd	r18, Y+1	; 0x01
    12b8:	3a 81       	ldd	r19, Y+2	; 0x02
    12ba:	26 30       	cpi	r18, 0x06	; 6
    12bc:	31 05       	cpc	r19, r1
    12be:	09 f4       	brne	.+2      	; 0x12c2 <LCD_function+0x6e>
    12c0:	65 c0       	rjmp	.+202    	; 0x138c <LCD_function+0x138>
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	9a 81       	ldd	r25, Y+2	; 0x02
    12c6:	87 30       	cpi	r24, 0x07	; 7
    12c8:	91 05       	cpc	r25, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <LCD_function+0x7a>
    12cc:	66 c0       	rjmp	.+204    	; 0x139a <LCD_function+0x146>
    12ce:	73 c0       	rjmp	.+230    	; 0x13b6 <LCD_function+0x162>
	{
	case 0:
		LCD_clearScreen();
    12d0:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <LCD_clearScreen>
		LCD_displayString("Plz enter pass:");
    12d4:	80 e6       	ldi	r24, 0x60	; 96
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
		LCD_moveCursor(1,0);
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <LCD_moveCursor>
    12e4:	68 c0       	rjmp	.+208    	; 0x13b6 <LCD_function+0x162>
		break;
	case 1:
		LCD_clearScreen();
    12e6:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <LCD_clearScreen>
		LCD_displayString("Plz re-enter the");
    12ea:	80 e7       	ldi	r24, 0x70	; 112
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
		LCD_moveCursor(1,0);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <LCD_moveCursor>
		LCD_displayString("same pass: ");
    12fa:	81 e8       	ldi	r24, 0x81	; 129
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
		LCD_moveCursor(1,10);
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	6a e0       	ldi	r22, 0x0A	; 10
    1306:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <LCD_moveCursor>
    130a:	55 c0       	rjmp	.+170    	; 0x13b6 <LCD_function+0x162>
		break;
	case 2:
		LCD_clearScreen();
    130c:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <LCD_clearScreen>
		LCD_displayString("+ : OPEN DOOR");
    1310:	8d e8       	ldi	r24, 0x8D	; 141
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
		LCD_moveCursor(1,0);
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <LCD_moveCursor>
		LCD_displayString("- : CHANGE PASS");
    1320:	8b e9       	ldi	r24, 0x9B	; 155
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
    1328:	46 c0       	rjmp	.+140    	; 0x13b6 <LCD_function+0x162>
		break;
	case 3:
		LCD_clearScreen();
    132a:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <LCD_clearScreen>
		LCD_displayString("Plz enter old");
    132e:	8b ea       	ldi	r24, 0xAB	; 171
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
		LCD_moveCursor(1,0);
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <LCD_moveCursor>
		LCD_displayString("pass:");
    133e:	89 eb       	ldi	r24, 0xB9	; 185
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
		LCD_moveCursor(1,5);
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	65 e0       	ldi	r22, 0x05	; 5
    134a:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <LCD_moveCursor>
    134e:	33 c0       	rjmp	.+102    	; 0x13b6 <LCD_function+0x162>
		break;
	case 4:
		LCD_clearScreen();
    1350:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <LCD_clearScreen>
		LCD_displayString("Door Unlocking");
    1354:	8f eb       	ldi	r24, 0xBF	; 191
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
		LCD_moveCursor(1,4);
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	64 e0       	ldi	r22, 0x04	; 4
    1360:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <LCD_moveCursor>
		LCD_displayString("Please wait");
    1364:	8e ec       	ldi	r24, 0xCE	; 206
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
    136c:	24 c0       	rjmp	.+72     	; 0x13b6 <LCD_function+0x162>
		break;
	case 5:
		LCD_clearScreen();
    136e:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <LCD_clearScreen>
		LCD_displayString("Wait for people");
    1372:	8a ed       	ldi	r24, 0xDA	; 218
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
		LCD_moveCursor(1,4);
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	64 e0       	ldi	r22, 0x04	; 4
    137e:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <LCD_moveCursor>
		LCD_displayString("to enter");
    1382:	8a ee       	ldi	r24, 0xEA	; 234
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
    138a:	15 c0       	rjmp	.+42     	; 0x13b6 <LCD_function+0x162>
		break;
	case 6:
		LCD_clearScreen();
    138c:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <LCD_clearScreen>
		LCD_displayString("Door locking");
    1390:	83 ef       	ldi	r24, 0xF3	; 243
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
    1398:	0e c0       	rjmp	.+28     	; 0x13b6 <LCD_function+0x162>
		break;
	case 7:
		LCD_clearScreen();
    139a:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <LCD_clearScreen>
		LCD_displayString("System locked");
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
		LCD_moveCursor(1,0);
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <LCD_moveCursor>
		LCD_displayString("Wait for 1 min");
    13ae:	8e e0       	ldi	r24, 0x0E	; 14
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
		break;
	}
}
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <Keypad_function>:

void Keypad_function(uint16 *password)
{
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	60 97       	sbiw	r28, 0x10	; 16
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	98 8b       	std	Y+16, r25	; 0x10
    13da:	8f 87       	std	Y+15, r24	; 0x0f
	for(i=0; i<5; i++)
    13dc:	10 92 47 01 	sts	0x0147, r1
    13e0:	8d c0       	rjmp	.+282    	; 0x14fc <Keypad_function+0x13c>
	{
		password[i] = KEYPAD_getPressedKey();
    13e2:	80 91 47 01 	lds	r24, 0x0147
    13e6:	88 2f       	mov	r24, r24
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	9c 01       	movw	r18, r24
    13ec:	22 0f       	add	r18, r18
    13ee:	33 1f       	adc	r19, r19
    13f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f2:	98 89       	ldd	r25, Y+16	; 0x10
    13f4:	8c 01       	movw	r16, r24
    13f6:	02 0f       	add	r16, r18
    13f8:	13 1f       	adc	r17, r19
    13fa:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <KEYPAD_getPressedKey>
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	f8 01       	movw	r30, r16
    1404:	91 83       	std	Z+1, r25	; 0x01
    1406:	80 83       	st	Z, r24
		LCD_displayCharacter('*');
    1408:	8a e2       	ldi	r24, 0x2A	; 42
    140a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_displayCharacter>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	aa ef       	ldi	r26, 0xFA	; 250
    1414:	b3 e4       	ldi	r27, 0x43	; 67
    1416:	8b 87       	std	Y+11, r24	; 0x0b
    1418:	9c 87       	std	Y+12, r25	; 0x0c
    141a:	ad 87       	std	Y+13, r26	; 0x0d
    141c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    141e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1420:	7c 85       	ldd	r23, Y+12	; 0x0c
    1422:	8d 85       	ldd	r24, Y+13	; 0x0d
    1424:	9e 85       	ldd	r25, Y+14	; 0x0e
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	4a ef       	ldi	r20, 0xFA	; 250
    142c:	54 e4       	ldi	r21, 0x44	; 68
    142e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	8f 83       	std	Y+7, r24	; 0x07
    1438:	98 87       	std	Y+8, r25	; 0x08
    143a:	a9 87       	std	Y+9, r26	; 0x09
    143c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    143e:	6f 81       	ldd	r22, Y+7	; 0x07
    1440:	78 85       	ldd	r23, Y+8	; 0x08
    1442:	89 85       	ldd	r24, Y+9	; 0x09
    1444:	9a 85       	ldd	r25, Y+10	; 0x0a
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 e8       	ldi	r20, 0x80	; 128
    144c:	5f e3       	ldi	r21, 0x3F	; 63
    144e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1452:	88 23       	and	r24, r24
    1454:	2c f4       	brge	.+10     	; 0x1460 <Keypad_function+0xa0>
		__ticks = 1;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	9e 83       	std	Y+6, r25	; 0x06
    145c:	8d 83       	std	Y+5, r24	; 0x05
    145e:	3f c0       	rjmp	.+126    	; 0x14de <Keypad_function+0x11e>
	else if (__tmp > 65535)
    1460:	6f 81       	ldd	r22, Y+7	; 0x07
    1462:	78 85       	ldd	r23, Y+8	; 0x08
    1464:	89 85       	ldd	r24, Y+9	; 0x09
    1466:	9a 85       	ldd	r25, Y+10	; 0x0a
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	3f ef       	ldi	r19, 0xFF	; 255
    146c:	4f e7       	ldi	r20, 0x7F	; 127
    146e:	57 e4       	ldi	r21, 0x47	; 71
    1470:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1474:	18 16       	cp	r1, r24
    1476:	4c f5       	brge	.+82     	; 0x14ca <Keypad_function+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1478:	6b 85       	ldd	r22, Y+11	; 0x0b
    147a:	7c 85       	ldd	r23, Y+12	; 0x0c
    147c:	8d 85       	ldd	r24, Y+13	; 0x0d
    147e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e2       	ldi	r20, 0x20	; 32
    1486:	51 e4       	ldi	r21, 0x41	; 65
    1488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	bc 01       	movw	r22, r24
    1492:	cd 01       	movw	r24, r26
    1494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	9e 83       	std	Y+6, r25	; 0x06
    149e:	8d 83       	std	Y+5, r24	; 0x05
    14a0:	0f c0       	rjmp	.+30     	; 0x14c0 <Keypad_function+0x100>
    14a2:	88 ec       	ldi	r24, 0xC8	; 200
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	9c 83       	std	Y+4, r25	; 0x04
    14a8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	01 97       	sbiw	r24, 0x01	; 1
    14b0:	f1 f7       	brne	.-4      	; 0x14ae <Keypad_function+0xee>
    14b2:	9c 83       	std	Y+4, r25	; 0x04
    14b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	9e 83       	std	Y+6, r25	; 0x06
    14be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	69 f7       	brne	.-38     	; 0x14a2 <Keypad_function+0xe2>
    14c8:	14 c0       	rjmp	.+40     	; 0x14f2 <Keypad_function+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ca:	6f 81       	ldd	r22, Y+7	; 0x07
    14cc:	78 85       	ldd	r23, Y+8	; 0x08
    14ce:	89 85       	ldd	r24, Y+9	; 0x09
    14d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	9e 83       	std	Y+6, r25	; 0x06
    14dc:	8d 83       	std	Y+5, r24	; 0x05
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	f1 f7       	brne	.-4      	; 0x14ea <Keypad_function+0x12a>
    14ee:	9a 83       	std	Y+2, r25	; 0x02
    14f0:	89 83       	std	Y+1, r24	; 0x01
	}
}

void Keypad_function(uint16 *password)
{
	for(i=0; i<5; i++)
    14f2:	80 91 47 01 	lds	r24, 0x0147
    14f6:	8f 5f       	subi	r24, 0xFF	; 255
    14f8:	80 93 47 01 	sts	0x0147, r24
    14fc:	80 91 47 01 	lds	r24, 0x0147
    1500:	85 30       	cpi	r24, 0x05	; 5
    1502:	08 f4       	brcc	.+2      	; 0x1506 <Keypad_function+0x146>
    1504:	6e cf       	rjmp	.-292    	; 0x13e2 <Keypad_function+0x22>
	{
		password[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(500);
	}
	while(KEYPAD_getPressedKey() != '=');
    1506:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <KEYPAD_getPressedKey>
    150a:	8d 33       	cpi	r24, 0x3D	; 61
    150c:	e1 f7       	brne	.-8      	; 0x1506 <Keypad_function+0x146>
}
    150e:	60 96       	adiw	r28, 0x10	; 16
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	08 95       	ret

00001524 <main>:

int main()
{
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	c8 58       	subi	r28, 0x88	; 136
    1532:	d0 40       	sbci	r29, 0x00	; 0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	f8 94       	cli
    1538:	de bf       	out	0x3e, r29	; 62
    153a:	0f be       	out	0x3f, r0	; 63
    153c:	cd bf       	out	0x3d, r28	; 61
	uint16 password[5];
	uint16 rePassword[5];
	uint8 trial = 0;
    153e:	fe 01       	movw	r30, r28
    1540:	ec 58       	subi	r30, 0x8C	; 140
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	10 82       	st	Z, r1
	uint16 MC2_PASS_STATE;
	uint8 menuChoice = 0;
    1546:	fe 01       	movw	r30, r28
    1548:	ef 58       	subi	r30, 0x8F	; 143
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	10 82       	st	Z, r1

	/* Drivers initialization */
	LCD_init();
    154e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_init>
	UART_init(&uartConfig);
    1552:	86 e3       	ldi	r24, 0x36	; 54
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	0e 94 5f 1a 	call	0x34be	; 0x34be <UART_init>

	SREG |= (1<<7);   /* Enable interrupts */
    155a:	af e5       	ldi	r26, 0x5F	; 95
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ef e5       	ldi	r30, 0x5F	; 95
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	80 68       	ori	r24, 0x80	; 128
    1566:	8c 93       	st	X, r24

	LCD_displayString("Door Lock System");
    1568:	8d e1       	ldi	r24, 0x1D	; 29
    156a:	91 e0       	ldi	r25, 0x01	; 1
    156c:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
    1570:	fe 01       	movw	r30, r28
    1572:	e3 59       	subi	r30, 0x93	; 147
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	aa e7       	ldi	r26, 0x7A	; 122
    157c:	b4 e4       	ldi	r27, 0x44	; 68
    157e:	80 83       	st	Z, r24
    1580:	91 83       	std	Z+1, r25	; 0x01
    1582:	a2 83       	std	Z+2, r26	; 0x02
    1584:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1586:	8e 01       	movw	r16, r28
    1588:	07 59       	subi	r16, 0x97	; 151
    158a:	1f 4f       	sbci	r17, 0xFF	; 255
    158c:	fe 01       	movw	r30, r28
    158e:	e3 59       	subi	r30, 0x93	; 147
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	4a ef       	ldi	r20, 0xFA	; 250
    15a0:	54 e4       	ldi	r21, 0x44	; 68
    15a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	f8 01       	movw	r30, r16
    15ac:	80 83       	st	Z, r24
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	a2 83       	std	Z+2, r26	; 0x02
    15b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15b4:	fe 01       	movw	r30, r28
    15b6:	e7 59       	subi	r30, 0x97	; 151
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	60 81       	ld	r22, Z
    15bc:	71 81       	ldd	r23, Z+1	; 0x01
    15be:	82 81       	ldd	r24, Z+2	; 0x02
    15c0:	93 81       	ldd	r25, Z+3	; 0x03
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	40 e8       	ldi	r20, 0x80	; 128
    15c8:	5f e3       	ldi	r21, 0x3F	; 63
    15ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15ce:	88 23       	and	r24, r24
    15d0:	44 f4       	brge	.+16     	; 0x15e2 <main+0xbe>
		__ticks = 1;
    15d2:	fe 01       	movw	r30, r28
    15d4:	e9 59       	subi	r30, 0x99	; 153
    15d6:	ff 4f       	sbci	r31, 0xFF	; 255
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	80 83       	st	Z, r24
    15e0:	64 c0       	rjmp	.+200    	; 0x16aa <main+0x186>
	else if (__tmp > 65535)
    15e2:	fe 01       	movw	r30, r28
    15e4:	e7 59       	subi	r30, 0x97	; 151
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	60 81       	ld	r22, Z
    15ea:	71 81       	ldd	r23, Z+1	; 0x01
    15ec:	82 81       	ldd	r24, Z+2	; 0x02
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	3f ef       	ldi	r19, 0xFF	; 255
    15f4:	4f e7       	ldi	r20, 0x7F	; 127
    15f6:	57 e4       	ldi	r21, 0x47	; 71
    15f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15fc:	18 16       	cp	r1, r24
    15fe:	0c f0       	brlt	.+2      	; 0x1602 <main+0xde>
    1600:	43 c0       	rjmp	.+134    	; 0x1688 <main+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1602:	fe 01       	movw	r30, r28
    1604:	e3 59       	subi	r30, 0x93	; 147
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	60 81       	ld	r22, Z
    160a:	71 81       	ldd	r23, Z+1	; 0x01
    160c:	82 81       	ldd	r24, Z+2	; 0x02
    160e:	93 81       	ldd	r25, Z+3	; 0x03
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e2       	ldi	r20, 0x20	; 32
    1616:	51 e4       	ldi	r21, 0x41	; 65
    1618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	8e 01       	movw	r16, r28
    1622:	09 59       	subi	r16, 0x99	; 153
    1624:	1f 4f       	sbci	r17, 0xFF	; 255
    1626:	bc 01       	movw	r22, r24
    1628:	cd 01       	movw	r24, r26
    162a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162e:	dc 01       	movw	r26, r24
    1630:	cb 01       	movw	r24, r22
    1632:	f8 01       	movw	r30, r16
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	80 83       	st	Z, r24
    1638:	1f c0       	rjmp	.+62     	; 0x1678 <main+0x154>
    163a:	fe 01       	movw	r30, r28
    163c:	eb 59       	subi	r30, 0x9B	; 155
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	88 ec       	ldi	r24, 0xC8	; 200
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	91 83       	std	Z+1, r25	; 0x01
    1646:	80 83       	st	Z, r24
    1648:	fe 01       	movw	r30, r28
    164a:	eb 59       	subi	r30, 0x9B	; 155
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	80 81       	ld	r24, Z
    1650:	91 81       	ldd	r25, Z+1	; 0x01
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <main+0x12e>
    1656:	fe 01       	movw	r30, r28
    1658:	eb 59       	subi	r30, 0x9B	; 155
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	91 83       	std	Z+1, r25	; 0x01
    165e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1660:	de 01       	movw	r26, r28
    1662:	a9 59       	subi	r26, 0x99	; 153
    1664:	bf 4f       	sbci	r27, 0xFF	; 255
    1666:	fe 01       	movw	r30, r28
    1668:	e9 59       	subi	r30, 0x99	; 153
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	80 81       	ld	r24, Z
    166e:	91 81       	ldd	r25, Z+1	; 0x01
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	11 96       	adiw	r26, 0x01	; 1
    1674:	9c 93       	st	X, r25
    1676:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1678:	fe 01       	movw	r30, r28
    167a:	e9 59       	subi	r30, 0x99	; 153
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 81       	ld	r24, Z
    1680:	91 81       	ldd	r25, Z+1	; 0x01
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	d1 f6       	brne	.-76     	; 0x163a <main+0x116>
    1686:	e7 c0       	rjmp	.+462    	; 0x1856 <main+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1688:	8e 01       	movw	r16, r28
    168a:	09 59       	subi	r16, 0x99	; 153
    168c:	1f 4f       	sbci	r17, 0xFF	; 255
    168e:	fe 01       	movw	r30, r28
    1690:	e7 59       	subi	r30, 0x97	; 151
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	60 81       	ld	r22, Z
    1696:	71 81       	ldd	r23, Z+1	; 0x01
    1698:	82 81       	ldd	r24, Z+2	; 0x02
    169a:	93 81       	ldd	r25, Z+3	; 0x03
    169c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	f8 01       	movw	r30, r16
    16a6:	91 83       	std	Z+1, r25	; 0x01
    16a8:	80 83       	st	Z, r24
    16aa:	de 01       	movw	r26, r28
    16ac:	ad 59       	subi	r26, 0x9D	; 157
    16ae:	bf 4f       	sbci	r27, 0xFF	; 255
    16b0:	fe 01       	movw	r30, r28
    16b2:	e9 59       	subi	r30, 0x99	; 153
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	80 81       	ld	r24, Z
    16b8:	91 81       	ldd	r25, Z+1	; 0x01
    16ba:	11 96       	adiw	r26, 0x01	; 1
    16bc:	9c 93       	st	X, r25
    16be:	8e 93       	st	-X, r24
    16c0:	fe 01       	movw	r30, r28
    16c2:	ed 59       	subi	r30, 0x9D	; 157
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	80 81       	ld	r24, Z
    16c8:	91 81       	ldd	r25, Z+1	; 0x01
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <main+0x1a6>
    16ce:	fe 01       	movw	r30, r28
    16d0:	ed 59       	subi	r30, 0x9D	; 157
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	80 83       	st	Z, r24
    16d8:	be c0       	rjmp	.+380    	; 0x1856 <main+0x332>

	while(1)
	{
		while(g_LCD_state == 0)
		{
			LCD_function();
    16da:	0e 94 2a 09 	call	0x1254	; 0x1254 <LCD_function>
			Keypad_function(password);
    16de:	ce 01       	movw	r24, r28
    16e0:	8b 58       	subi	r24, 0x8B	; 139
    16e2:	9f 4f       	sbci	r25, 0xFF	; 255
    16e4:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <Keypad_function>
    16e8:	fe 01       	movw	r30, r28
    16ea:	e1 5a       	subi	r30, 0xA1	; 161
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	80 e0       	ldi	r24, 0x00	; 0
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	a8 ec       	ldi	r26, 0xC8	; 200
    16f4:	b2 e4       	ldi	r27, 0x42	; 66
    16f6:	80 83       	st	Z, r24
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	a2 83       	std	Z+2, r26	; 0x02
    16fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16fe:	8e 01       	movw	r16, r28
    1700:	05 5a       	subi	r16, 0xA5	; 165
    1702:	1f 4f       	sbci	r17, 0xFF	; 255
    1704:	fe 01       	movw	r30, r28
    1706:	e1 5a       	subi	r30, 0xA1	; 161
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	4a ef       	ldi	r20, 0xFA	; 250
    1718:	54 e4       	ldi	r21, 0x44	; 68
    171a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	f8 01       	movw	r30, r16
    1724:	80 83       	st	Z, r24
    1726:	91 83       	std	Z+1, r25	; 0x01
    1728:	a2 83       	std	Z+2, r26	; 0x02
    172a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    172c:	fe 01       	movw	r30, r28
    172e:	e5 5a       	subi	r30, 0xA5	; 165
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e8       	ldi	r20, 0x80	; 128
    1740:	5f e3       	ldi	r21, 0x3F	; 63
    1742:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1746:	88 23       	and	r24, r24
    1748:	44 f4       	brge	.+16     	; 0x175a <main+0x236>
		__ticks = 1;
    174a:	fe 01       	movw	r30, r28
    174c:	e7 5a       	subi	r30, 0xA7	; 167
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	81 e0       	ldi	r24, 0x01	; 1
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
    1758:	64 c0       	rjmp	.+200    	; 0x1822 <main+0x2fe>
	else if (__tmp > 65535)
    175a:	fe 01       	movw	r30, r28
    175c:	e5 5a       	subi	r30, 0xA5	; 165
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	60 81       	ld	r22, Z
    1762:	71 81       	ldd	r23, Z+1	; 0x01
    1764:	82 81       	ldd	r24, Z+2	; 0x02
    1766:	93 81       	ldd	r25, Z+3	; 0x03
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	3f ef       	ldi	r19, 0xFF	; 255
    176c:	4f e7       	ldi	r20, 0x7F	; 127
    176e:	57 e4       	ldi	r21, 0x47	; 71
    1770:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1774:	18 16       	cp	r1, r24
    1776:	0c f0       	brlt	.+2      	; 0x177a <main+0x256>
    1778:	43 c0       	rjmp	.+134    	; 0x1800 <main+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177a:	fe 01       	movw	r30, r28
    177c:	e1 5a       	subi	r30, 0xA1	; 161
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	60 81       	ld	r22, Z
    1782:	71 81       	ldd	r23, Z+1	; 0x01
    1784:	82 81       	ldd	r24, Z+2	; 0x02
    1786:	93 81       	ldd	r25, Z+3	; 0x03
    1788:	20 e0       	ldi	r18, 0x00	; 0
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	40 e2       	ldi	r20, 0x20	; 32
    178e:	51 e4       	ldi	r21, 0x41	; 65
    1790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	8e 01       	movw	r16, r28
    179a:	07 5a       	subi	r16, 0xA7	; 167
    179c:	1f 4f       	sbci	r17, 0xFF	; 255
    179e:	bc 01       	movw	r22, r24
    17a0:	cd 01       	movw	r24, r26
    17a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	f8 01       	movw	r30, r16
    17ac:	91 83       	std	Z+1, r25	; 0x01
    17ae:	80 83       	st	Z, r24
    17b0:	1f c0       	rjmp	.+62     	; 0x17f0 <main+0x2cc>
    17b2:	fe 01       	movw	r30, r28
    17b4:	e9 5a       	subi	r30, 0xA9	; 169
    17b6:	ff 4f       	sbci	r31, 0xFF	; 255
    17b8:	88 ec       	ldi	r24, 0xC8	; 200
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	91 83       	std	Z+1, r25	; 0x01
    17be:	80 83       	st	Z, r24
    17c0:	fe 01       	movw	r30, r28
    17c2:	e9 5a       	subi	r30, 0xA9	; 169
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	80 81       	ld	r24, Z
    17c8:	91 81       	ldd	r25, Z+1	; 0x01
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <main+0x2a6>
    17ce:	fe 01       	movw	r30, r28
    17d0:	e9 5a       	subi	r30, 0xA9	; 169
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	91 83       	std	Z+1, r25	; 0x01
    17d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d8:	de 01       	movw	r26, r28
    17da:	a7 5a       	subi	r26, 0xA7	; 167
    17dc:	bf 4f       	sbci	r27, 0xFF	; 255
    17de:	fe 01       	movw	r30, r28
    17e0:	e7 5a       	subi	r30, 0xA7	; 167
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	80 81       	ld	r24, Z
    17e6:	91 81       	ldd	r25, Z+1	; 0x01
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	11 96       	adiw	r26, 0x01	; 1
    17ec:	9c 93       	st	X, r25
    17ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f0:	fe 01       	movw	r30, r28
    17f2:	e7 5a       	subi	r30, 0xA7	; 167
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	80 81       	ld	r24, Z
    17f8:	91 81       	ldd	r25, Z+1	; 0x01
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	d1 f6       	brne	.-76     	; 0x17b2 <main+0x28e>
    17fe:	28 c0       	rjmp	.+80     	; 0x1850 <main+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1800:	8e 01       	movw	r16, r28
    1802:	07 5a       	subi	r16, 0xA7	; 167
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	fe 01       	movw	r30, r28
    1808:	e5 5a       	subi	r30, 0xA5	; 165
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	60 81       	ld	r22, Z
    180e:	71 81       	ldd	r23, Z+1	; 0x01
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	93 81       	ldd	r25, Z+3	; 0x03
    1814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	f8 01       	movw	r30, r16
    181e:	91 83       	std	Z+1, r25	; 0x01
    1820:	80 83       	st	Z, r24
    1822:	de 01       	movw	r26, r28
    1824:	ab 5a       	subi	r26, 0xAB	; 171
    1826:	bf 4f       	sbci	r27, 0xFF	; 255
    1828:	fe 01       	movw	r30, r28
    182a:	e7 5a       	subi	r30, 0xA7	; 167
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	80 81       	ld	r24, Z
    1830:	91 81       	ldd	r25, Z+1	; 0x01
    1832:	11 96       	adiw	r26, 0x01	; 1
    1834:	9c 93       	st	X, r25
    1836:	8e 93       	st	-X, r24
    1838:	fe 01       	movw	r30, r28
    183a:	eb 5a       	subi	r30, 0xAB	; 171
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	80 81       	ld	r24, Z
    1840:	91 81       	ldd	r25, Z+1	; 0x01
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	f1 f7       	brne	.-4      	; 0x1842 <main+0x31e>
    1846:	fe 01       	movw	r30, r28
    1848:	eb 5a       	subi	r30, 0xAB	; 171
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	80 83       	st	Z, r24
			_delay_ms(100);
			g_LCD_state = 1;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	80 93 45 01 	sts	0x0145, r24

	_delay_ms(1000);

	while(1)
	{
		while(g_LCD_state == 0)
    1856:	80 91 45 01 	lds	r24, 0x0145
    185a:	88 23       	and	r24, r24
    185c:	09 f4       	brne	.+2      	; 0x1860 <main+0x33c>
    185e:	3d cf       	rjmp	.-390    	; 0x16da <main+0x1b6>
    1860:	ac c1       	rjmp	.+856    	; 0x1bba <main+0x696>
			_delay_ms(100);
			g_LCD_state = 1;
		}
		while(g_LCD_state == 1)
		{
			LCD_function();
    1862:	0e 94 2a 09 	call	0x1254	; 0x1254 <LCD_function>
			Keypad_function(rePassword);
    1866:	ce 01       	movw	r24, r28
    1868:	81 58       	subi	r24, 0x81	; 129
    186a:	9f 4f       	sbci	r25, 0xFF	; 255
    186c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <Keypad_function>
    1870:	fe 01       	movw	r30, r28
    1872:	ef 5a       	subi	r30, 0xAF	; 175
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	a8 ec       	ldi	r26, 0xC8	; 200
    187c:	b2 e4       	ldi	r27, 0x42	; 66
    187e:	80 83       	st	Z, r24
    1880:	91 83       	std	Z+1, r25	; 0x01
    1882:	a2 83       	std	Z+2, r26	; 0x02
    1884:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1886:	8e 01       	movw	r16, r28
    1888:	03 5b       	subi	r16, 0xB3	; 179
    188a:	1f 4f       	sbci	r17, 0xFF	; 255
    188c:	fe 01       	movw	r30, r28
    188e:	ef 5a       	subi	r30, 0xAF	; 175
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	60 81       	ld	r22, Z
    1894:	71 81       	ldd	r23, Z+1	; 0x01
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	93 81       	ldd	r25, Z+3	; 0x03
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a ef       	ldi	r20, 0xFA	; 250
    18a0:	54 e4       	ldi	r21, 0x44	; 68
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	f8 01       	movw	r30, r16
    18ac:	80 83       	st	Z, r24
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	a2 83       	std	Z+2, r26	; 0x02
    18b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18b4:	fe 01       	movw	r30, r28
    18b6:	e3 5b       	subi	r30, 0xB3	; 179
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	60 81       	ld	r22, Z
    18bc:	71 81       	ldd	r23, Z+1	; 0x01
    18be:	82 81       	ldd	r24, Z+2	; 0x02
    18c0:	93 81       	ldd	r25, Z+3	; 0x03
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	5f e3       	ldi	r21, 0x3F	; 63
    18ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	44 f4       	brge	.+16     	; 0x18e2 <main+0x3be>
		__ticks = 1;
    18d2:	fe 01       	movw	r30, r28
    18d4:	e5 5b       	subi	r30, 0xB5	; 181
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	80 83       	st	Z, r24
    18e0:	64 c0       	rjmp	.+200    	; 0x19aa <main+0x486>
	else if (__tmp > 65535)
    18e2:	fe 01       	movw	r30, r28
    18e4:	e3 5b       	subi	r30, 0xB3	; 179
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	60 81       	ld	r22, Z
    18ea:	71 81       	ldd	r23, Z+1	; 0x01
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	3f ef       	ldi	r19, 0xFF	; 255
    18f4:	4f e7       	ldi	r20, 0x7F	; 127
    18f6:	57 e4       	ldi	r21, 0x47	; 71
    18f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18fc:	18 16       	cp	r1, r24
    18fe:	0c f0       	brlt	.+2      	; 0x1902 <main+0x3de>
    1900:	43 c0       	rjmp	.+134    	; 0x1988 <main+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1902:	fe 01       	movw	r30, r28
    1904:	ef 5a       	subi	r30, 0xAF	; 175
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	60 81       	ld	r22, Z
    190a:	71 81       	ldd	r23, Z+1	; 0x01
    190c:	82 81       	ldd	r24, Z+2	; 0x02
    190e:	93 81       	ldd	r25, Z+3	; 0x03
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e2       	ldi	r20, 0x20	; 32
    1916:	51 e4       	ldi	r21, 0x41	; 65
    1918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8e 01       	movw	r16, r28
    1922:	05 5b       	subi	r16, 0xB5	; 181
    1924:	1f 4f       	sbci	r17, 0xFF	; 255
    1926:	bc 01       	movw	r22, r24
    1928:	cd 01       	movw	r24, r26
    192a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	f8 01       	movw	r30, r16
    1934:	91 83       	std	Z+1, r25	; 0x01
    1936:	80 83       	st	Z, r24
    1938:	1f c0       	rjmp	.+62     	; 0x1978 <main+0x454>
    193a:	fe 01       	movw	r30, r28
    193c:	e7 5b       	subi	r30, 0xB7	; 183
    193e:	ff 4f       	sbci	r31, 0xFF	; 255
    1940:	88 ec       	ldi	r24, 0xC8	; 200
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	80 83       	st	Z, r24
    1948:	fe 01       	movw	r30, r28
    194a:	e7 5b       	subi	r30, 0xB7	; 183
    194c:	ff 4f       	sbci	r31, 0xFF	; 255
    194e:	80 81       	ld	r24, Z
    1950:	91 81       	ldd	r25, Z+1	; 0x01
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	f1 f7       	brne	.-4      	; 0x1952 <main+0x42e>
    1956:	fe 01       	movw	r30, r28
    1958:	e7 5b       	subi	r30, 0xB7	; 183
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1960:	de 01       	movw	r26, r28
    1962:	a5 5b       	subi	r26, 0xB5	; 181
    1964:	bf 4f       	sbci	r27, 0xFF	; 255
    1966:	fe 01       	movw	r30, r28
    1968:	e5 5b       	subi	r30, 0xB5	; 181
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	80 81       	ld	r24, Z
    196e:	91 81       	ldd	r25, Z+1	; 0x01
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	11 96       	adiw	r26, 0x01	; 1
    1974:	9c 93       	st	X, r25
    1976:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1978:	fe 01       	movw	r30, r28
    197a:	e5 5b       	subi	r30, 0xB5	; 181
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	80 81       	ld	r24, Z
    1980:	91 81       	ldd	r25, Z+1	; 0x01
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	d1 f6       	brne	.-76     	; 0x193a <main+0x416>
    1986:	27 c0       	rjmp	.+78     	; 0x19d6 <main+0x4b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1988:	8e 01       	movw	r16, r28
    198a:	05 5b       	subi	r16, 0xB5	; 181
    198c:	1f 4f       	sbci	r17, 0xFF	; 255
    198e:	fe 01       	movw	r30, r28
    1990:	e3 5b       	subi	r30, 0xB3	; 179
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	60 81       	ld	r22, Z
    1996:	71 81       	ldd	r23, Z+1	; 0x01
    1998:	82 81       	ldd	r24, Z+2	; 0x02
    199a:	93 81       	ldd	r25, Z+3	; 0x03
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	f8 01       	movw	r30, r16
    19a6:	91 83       	std	Z+1, r25	; 0x01
    19a8:	80 83       	st	Z, r24
    19aa:	de 01       	movw	r26, r28
    19ac:	a9 5b       	subi	r26, 0xB9	; 185
    19ae:	bf 4f       	sbci	r27, 0xFF	; 255
    19b0:	fe 01       	movw	r30, r28
    19b2:	e5 5b       	subi	r30, 0xB5	; 181
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	80 81       	ld	r24, Z
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
    19ba:	8d 93       	st	X+, r24
    19bc:	9c 93       	st	X, r25
    19be:	fe 01       	movw	r30, r28
    19c0:	e9 5b       	subi	r30, 0xB9	; 185
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	80 81       	ld	r24, Z
    19c6:	91 81       	ldd	r25, Z+1	; 0x01
    19c8:	01 97       	sbiw	r24, 0x01	; 1
    19ca:	f1 f7       	brne	.-4      	; 0x19c8 <main+0x4a4>
    19cc:	fe 01       	movw	r30, r28
    19ce:	e9 5b       	subi	r30, 0xB9	; 185
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	91 83       	std	Z+1, r25	; 0x01
    19d4:	80 83       	st	Z, r24
			_delay_ms(100);
			UART_sendByte(HMI_READY);
    19d6:	80 e1       	ldi	r24, 0x10	; 16
    19d8:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
			while(UART_recieveByte() != CONTROL_READY){};
    19dc:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    19e0:	81 31       	cpi	r24, 0x11	; 17
    19e2:	e1 f7       	brne	.-8      	; 0x19dc <main+0x4b8>
			UART_sendByte(HMI_NEWPASS);
    19e4:	82 e1       	ldi	r24, 0x12	; 18
    19e6:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
			while(UART_recieveByte() != CONTROL_READY){};
    19ea:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    19ee:	81 31       	cpi	r24, 0x11	; 17
    19f0:	e1 f7       	brne	.-8      	; 0x19ea <main+0x4c6>
			for (i=0; i<5; i++)
    19f2:	10 92 47 01 	sts	0x0147, r1
    19f6:	19 c0       	rjmp	.+50     	; 0x1a2a <main+0x506>
			{
				UART_sendByte(password[i]);
    19f8:	80 91 47 01 	lds	r24, 0x0147
    19fc:	88 2f       	mov	r24, r24
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9e 01       	movw	r18, r28
    1a02:	2b 58       	subi	r18, 0x8B	; 139
    1a04:	3f 4f       	sbci	r19, 0xFF	; 255
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	f9 01       	movw	r30, r18
    1a0c:	e8 0f       	add	r30, r24
    1a0e:	f9 1f       	adc	r31, r25
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
				while(UART_recieveByte() != CONTROL_RECEIVED){};
    1a18:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    1a1c:	84 31       	cpi	r24, 0x14	; 20
    1a1e:	e1 f7       	brne	.-8      	; 0x1a18 <main+0x4f4>
			_delay_ms(100);
			UART_sendByte(HMI_READY);
			while(UART_recieveByte() != CONTROL_READY){};
			UART_sendByte(HMI_NEWPASS);
			while(UART_recieveByte() != CONTROL_READY){};
			for (i=0; i<5; i++)
    1a20:	80 91 47 01 	lds	r24, 0x0147
    1a24:	8f 5f       	subi	r24, 0xFF	; 255
    1a26:	80 93 47 01 	sts	0x0147, r24
    1a2a:	80 91 47 01 	lds	r24, 0x0147
    1a2e:	85 30       	cpi	r24, 0x05	; 5
    1a30:	18 f3       	brcs	.-58     	; 0x19f8 <main+0x4d4>
    1a32:	fe 01       	movw	r30, r28
    1a34:	ed 5b       	subi	r30, 0xBD	; 189
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	a8 ec       	ldi	r26, 0xC8	; 200
    1a3e:	b2 e4       	ldi	r27, 0x42	; 66
    1a40:	80 83       	st	Z, r24
    1a42:	91 83       	std	Z+1, r25	; 0x01
    1a44:	a2 83       	std	Z+2, r26	; 0x02
    1a46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a48:	8e 01       	movw	r16, r28
    1a4a:	01 5c       	subi	r16, 0xC1	; 193
    1a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4e:	fe 01       	movw	r30, r28
    1a50:	ed 5b       	subi	r30, 0xBD	; 189
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	60 81       	ld	r22, Z
    1a56:	71 81       	ldd	r23, Z+1	; 0x01
    1a58:	82 81       	ldd	r24, Z+2	; 0x02
    1a5a:	93 81       	ldd	r25, Z+3	; 0x03
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	4a ef       	ldi	r20, 0xFA	; 250
    1a62:	54 e4       	ldi	r21, 0x44	; 68
    1a64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a68:	dc 01       	movw	r26, r24
    1a6a:	cb 01       	movw	r24, r22
    1a6c:	f8 01       	movw	r30, r16
    1a6e:	80 83       	st	Z, r24
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	a2 83       	std	Z+2, r26	; 0x02
    1a74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a76:	fe 01       	movw	r30, r28
    1a78:	ff 96       	adiw	r30, 0x3f	; 63
    1a7a:	60 81       	ld	r22, Z
    1a7c:	71 81       	ldd	r23, Z+1	; 0x01
    1a7e:	82 81       	ldd	r24, Z+2	; 0x02
    1a80:	93 81       	ldd	r25, Z+3	; 0x03
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	40 e8       	ldi	r20, 0x80	; 128
    1a88:	5f e3       	ldi	r21, 0x3F	; 63
    1a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a8e:	88 23       	and	r24, r24
    1a90:	2c f4       	brge	.+10     	; 0x1a9c <main+0x578>
		__ticks = 1;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	9e af       	std	Y+62, r25	; 0x3e
    1a98:	8d af       	std	Y+61, r24	; 0x3d
    1a9a:	46 c0       	rjmp	.+140    	; 0x1b28 <main+0x604>
	else if (__tmp > 65535)
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	ff 96       	adiw	r30, 0x3f	; 63
    1aa0:	60 81       	ld	r22, Z
    1aa2:	71 81       	ldd	r23, Z+1	; 0x01
    1aa4:	82 81       	ldd	r24, Z+2	; 0x02
    1aa6:	93 81       	ldd	r25, Z+3	; 0x03
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	3f ef       	ldi	r19, 0xFF	; 255
    1aac:	4f e7       	ldi	r20, 0x7F	; 127
    1aae:	57 e4       	ldi	r21, 0x47	; 71
    1ab0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab4:	18 16       	cp	r1, r24
    1ab6:	64 f5       	brge	.+88     	; 0x1b10 <main+0x5ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab8:	fe 01       	movw	r30, r28
    1aba:	ed 5b       	subi	r30, 0xBD	; 189
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	60 81       	ld	r22, Z
    1ac0:	71 81       	ldd	r23, Z+1	; 0x01
    1ac2:	82 81       	ldd	r24, Z+2	; 0x02
    1ac4:	93 81       	ldd	r25, Z+3	; 0x03
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e2       	ldi	r20, 0x20	; 32
    1acc:	51 e4       	ldi	r21, 0x41	; 65
    1ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	cd 01       	movw	r24, r26
    1ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	9e af       	std	Y+62, r25	; 0x3e
    1ae4:	8d af       	std	Y+61, r24	; 0x3d
    1ae6:	0f c0       	rjmp	.+30     	; 0x1b06 <main+0x5e2>
    1ae8:	88 ec       	ldi	r24, 0xC8	; 200
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9c af       	std	Y+60, r25	; 0x3c
    1aee:	8b af       	std	Y+59, r24	; 0x3b
    1af0:	8b ad       	ldd	r24, Y+59	; 0x3b
    1af2:	9c ad       	ldd	r25, Y+60	; 0x3c
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <main+0x5d0>
    1af8:	9c af       	std	Y+60, r25	; 0x3c
    1afa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1afe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	9e af       	std	Y+62, r25	; 0x3e
    1b04:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b06:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b08:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	69 f7       	brne	.-38     	; 0x1ae8 <main+0x5c4>
    1b0e:	16 c0       	rjmp	.+44     	; 0x1b3c <main+0x618>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b10:	fe 01       	movw	r30, r28
    1b12:	ff 96       	adiw	r30, 0x3f	; 63
    1b14:	60 81       	ld	r22, Z
    1b16:	71 81       	ldd	r23, Z+1	; 0x01
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9e af       	std	Y+62, r25	; 0x3e
    1b26:	8d af       	std	Y+61, r24	; 0x3d
    1b28:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b2a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b2c:	9a af       	std	Y+58, r25	; 0x3a
    1b2e:	89 af       	std	Y+57, r24	; 0x39
    1b30:	89 ad       	ldd	r24, Y+57	; 0x39
    1b32:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <main+0x610>
    1b38:	9a af       	std	Y+58, r25	; 0x3a
    1b3a:	89 af       	std	Y+57, r24	; 0x39
			{
				UART_sendByte(password[i]);
				while(UART_recieveByte() != CONTROL_RECEIVED){};
			}
			_delay_ms(100);
			UART_sendByte(HMI_READY);
    1b3c:	80 e1       	ldi	r24, 0x10	; 16
    1b3e:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
			while(UART_recieveByte() != CONTROL_READY){};
    1b42:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    1b46:	81 31       	cpi	r24, 0x11	; 17
    1b48:	e1 f7       	brne	.-8      	; 0x1b42 <main+0x61e>
			UART_sendByte(HMI_NEWPASS2);
    1b4a:	83 e1       	ldi	r24, 0x13	; 19
    1b4c:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
			while(UART_recieveByte() != CONTROL_READY){};
    1b50:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    1b54:	81 31       	cpi	r24, 0x11	; 17
    1b56:	e1 f7       	brne	.-8      	; 0x1b50 <main+0x62c>
			for (i=0; i<5; i++)
    1b58:	10 92 47 01 	sts	0x0147, r1
    1b5c:	19 c0       	rjmp	.+50     	; 0x1b90 <main+0x66c>
			{
				UART_sendByte(rePassword[i]);
    1b5e:	80 91 47 01 	lds	r24, 0x0147
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	9e 01       	movw	r18, r28
    1b68:	21 58       	subi	r18, 0x81	; 129
    1b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6c:	88 0f       	add	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	f9 01       	movw	r30, r18
    1b72:	e8 0f       	add	r30, r24
    1b74:	f9 1f       	adc	r31, r25
    1b76:	80 81       	ld	r24, Z
    1b78:	91 81       	ldd	r25, Z+1	; 0x01
    1b7a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
				while(UART_recieveByte() != CONTROL_RECEIVED){};
    1b7e:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    1b82:	84 31       	cpi	r24, 0x14	; 20
    1b84:	e1 f7       	brne	.-8      	; 0x1b7e <main+0x65a>
			_delay_ms(100);
			UART_sendByte(HMI_READY);
			while(UART_recieveByte() != CONTROL_READY){};
			UART_sendByte(HMI_NEWPASS2);
			while(UART_recieveByte() != CONTROL_READY){};
			for (i=0; i<5; i++)
    1b86:	80 91 47 01 	lds	r24, 0x0147
    1b8a:	8f 5f       	subi	r24, 0xFF	; 255
    1b8c:	80 93 47 01 	sts	0x0147, r24
    1b90:	80 91 47 01 	lds	r24, 0x0147
    1b94:	85 30       	cpi	r24, 0x05	; 5
    1b96:	18 f3       	brcs	.-58     	; 0x1b5e <main+0x63a>
			{
				UART_sendByte(rePassword[i]);
				while(UART_recieveByte() != CONTROL_RECEIVED){};
			}

			while(UART_recieveByte() != CONTROL_READY){};
    1b98:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    1b9c:	81 31       	cpi	r24, 0x11	; 17
    1b9e:	e1 f7       	brne	.-8      	; 0x1b98 <main+0x674>
			UART_sendByte(HMI_READY);
    1ba0:	80 e1       	ldi	r24, 0x10	; 16
    1ba2:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>

			if(UART_recieveByte() == CONTROL_MATCHED)
    1ba6:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    1baa:	88 31       	cpi	r24, 0x18	; 24
    1bac:	21 f4       	brne	.+8      	; 0x1bb6 <main+0x692>
			{
				g_LCD_state = 2;
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	80 93 45 01 	sts	0x0145, r24
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <main+0x696>
			}
			else
			{
				g_LCD_state = 0;
    1bb6:	10 92 45 01 	sts	0x0145, r1
			LCD_function();
			Keypad_function(password);
			_delay_ms(100);
			g_LCD_state = 1;
		}
		while(g_LCD_state == 1)
    1bba:	80 91 45 01 	lds	r24, 0x0145
    1bbe:	81 30       	cpi	r24, 0x01	; 1
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <main+0x6a0>
    1bc2:	4f ce       	rjmp	.-866    	; 0x1862 <main+0x33e>
    1bc4:	02 c1       	rjmp	.+516    	; 0x1dca <main+0x8a6>
				g_LCD_state = 0;
			}
		}
		while(g_LCD_state == 2)
		{
			menuChoice = 0;
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	ef 58       	subi	r30, 0x8F	; 143
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	10 82       	st	Z, r1
			LCD_function();
    1bce:	0e 94 2a 09 	call	0x1254	; 0x1254 <LCD_function>
			if(KEYPAD_getPressedKey() == '+')
    1bd2:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <KEYPAD_getPressedKey>
    1bd6:	8b 32       	cpi	r24, 0x2B	; 43
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <main+0x6b8>
    1bda:	78 c0       	rjmp	.+240    	; 0x1ccc <main+0x7a8>
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	a8 ec       	ldi	r26, 0xC8	; 200
    1be2:	b2 e4       	ldi	r27, 0x42	; 66
    1be4:	8d ab       	std	Y+53, r24	; 0x35
    1be6:	9e ab       	std	Y+54, r25	; 0x36
    1be8:	af ab       	std	Y+55, r26	; 0x37
    1bea:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bec:	6d a9       	ldd	r22, Y+53	; 0x35
    1bee:	7e a9       	ldd	r23, Y+54	; 0x36
    1bf0:	8f a9       	ldd	r24, Y+55	; 0x37
    1bf2:	98 ad       	ldd	r25, Y+56	; 0x38
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	4a ef       	ldi	r20, 0xFA	; 250
    1bfa:	54 e4       	ldi	r21, 0x44	; 68
    1bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	89 ab       	std	Y+49, r24	; 0x31
    1c06:	9a ab       	std	Y+50, r25	; 0x32
    1c08:	ab ab       	std	Y+51, r26	; 0x33
    1c0a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c0c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c0e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c10:	8b a9       	ldd	r24, Y+51	; 0x33
    1c12:	9c a9       	ldd	r25, Y+52	; 0x34
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e8       	ldi	r20, 0x80	; 128
    1c1a:	5f e3       	ldi	r21, 0x3F	; 63
    1c1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c20:	88 23       	and	r24, r24
    1c22:	2c f4       	brge	.+10     	; 0x1c2e <main+0x70a>
		__ticks = 1;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	98 ab       	std	Y+48, r25	; 0x30
    1c2a:	8f a7       	std	Y+47, r24	; 0x2f
    1c2c:	3f c0       	rjmp	.+126    	; 0x1cac <main+0x788>
	else if (__tmp > 65535)
    1c2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c30:	7a a9       	ldd	r23, Y+50	; 0x32
    1c32:	8b a9       	ldd	r24, Y+51	; 0x33
    1c34:	9c a9       	ldd	r25, Y+52	; 0x34
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	3f ef       	ldi	r19, 0xFF	; 255
    1c3a:	4f e7       	ldi	r20, 0x7F	; 127
    1c3c:	57 e4       	ldi	r21, 0x47	; 71
    1c3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c42:	18 16       	cp	r1, r24
    1c44:	4c f5       	brge	.+82     	; 0x1c98 <main+0x774>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c46:	6d a9       	ldd	r22, Y+53	; 0x35
    1c48:	7e a9       	ldd	r23, Y+54	; 0x36
    1c4a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c4c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e2       	ldi	r20, 0x20	; 32
    1c54:	51 e4       	ldi	r21, 0x41	; 65
    1c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	bc 01       	movw	r22, r24
    1c60:	cd 01       	movw	r24, r26
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	98 ab       	std	Y+48, r25	; 0x30
    1c6c:	8f a7       	std	Y+47, r24	; 0x2f
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <main+0x76a>
    1c70:	88 ec       	ldi	r24, 0xC8	; 200
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	9e a7       	std	Y+46, r25	; 0x2e
    1c76:	8d a7       	std	Y+45, r24	; 0x2d
    1c78:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c7a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <main+0x758>
    1c80:	9e a7       	std	Y+46, r25	; 0x2e
    1c82:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c86:	98 a9       	ldd	r25, Y+48	; 0x30
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	98 ab       	std	Y+48, r25	; 0x30
    1c8c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c90:	98 a9       	ldd	r25, Y+48	; 0x30
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	69 f7       	brne	.-38     	; 0x1c70 <main+0x74c>
    1c96:	14 c0       	rjmp	.+40     	; 0x1cc0 <main+0x79c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c98:	69 a9       	ldd	r22, Y+49	; 0x31
    1c9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	98 ab       	std	Y+48, r25	; 0x30
    1caa:	8f a7       	std	Y+47, r24	; 0x2f
    1cac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cae:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb0:	9c a7       	std	Y+44, r25	; 0x2c
    1cb2:	8b a7       	std	Y+43, r24	; 0x2b
    1cb4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cb6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <main+0x794>
    1cbc:	9c a7       	std	Y+44, r25	; 0x2c
    1cbe:	8b a7       	std	Y+43, r24	; 0x2b
			{
				_delay_ms(100);
				menuChoice = 1;
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	ef 58       	subi	r30, 0x8F	; 143
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	80 83       	st	Z, r24
    1cca:	7c c0       	rjmp	.+248    	; 0x1dc4 <main+0x8a0>
			}
			else if(KEYPAD_getPressedKey() == '-')
    1ccc:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <KEYPAD_getPressedKey>
    1cd0:	8d 32       	cpi	r24, 0x2D	; 45
    1cd2:	09 f0       	breq	.+2      	; 0x1cd6 <main+0x7b2>
    1cd4:	77 c0       	rjmp	.+238    	; 0x1dc4 <main+0x8a0>
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a8 ec       	ldi	r26, 0xC8	; 200
    1cdc:	b2 e4       	ldi	r27, 0x42	; 66
    1cde:	8f a3       	std	Y+39, r24	; 0x27
    1ce0:	98 a7       	std	Y+40, r25	; 0x28
    1ce2:	a9 a7       	std	Y+41, r26	; 0x29
    1ce4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ce8:	78 a5       	ldd	r23, Y+40	; 0x28
    1cea:	89 a5       	ldd	r24, Y+41	; 0x29
    1cec:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4a ef       	ldi	r20, 0xFA	; 250
    1cf4:	54 e4       	ldi	r21, 0x44	; 68
    1cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8b a3       	std	Y+35, r24	; 0x23
    1d00:	9c a3       	std	Y+36, r25	; 0x24
    1d02:	ad a3       	std	Y+37, r26	; 0x25
    1d04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d06:	6b a1       	ldd	r22, Y+35	; 0x23
    1d08:	7c a1       	ldd	r23, Y+36	; 0x24
    1d0a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <main+0x804>
		__ticks = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9a a3       	std	Y+34, r25	; 0x22
    1d24:	89 a3       	std	Y+33, r24	; 0x21
    1d26:	3f c0       	rjmp	.+126    	; 0x1da6 <main+0x882>
	else if (__tmp > 65535)
    1d28:	6b a1       	ldd	r22, Y+35	; 0x23
    1d2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	4c f5       	brge	.+82     	; 0x1d92 <main+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d40:	6f a1       	ldd	r22, Y+39	; 0x27
    1d42:	78 a5       	ldd	r23, Y+40	; 0x28
    1d44:	89 a5       	ldd	r24, Y+41	; 0x29
    1d46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9a a3       	std	Y+34, r25	; 0x22
    1d66:	89 a3       	std	Y+33, r24	; 0x21
    1d68:	0f c0       	rjmp	.+30     	; 0x1d88 <main+0x864>
    1d6a:	88 ec       	ldi	r24, 0xC8	; 200
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	98 a3       	std	Y+32, r25	; 0x20
    1d70:	8f 8f       	std	Y+31, r24	; 0x1f
    1d72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d74:	98 a1       	ldd	r25, Y+32	; 0x20
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <main+0x852>
    1d7a:	98 a3       	std	Y+32, r25	; 0x20
    1d7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d80:	9a a1       	ldd	r25, Y+34	; 0x22
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	9a a3       	std	Y+34, r25	; 0x22
    1d86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d88:	89 a1       	ldd	r24, Y+33	; 0x21
    1d8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	69 f7       	brne	.-38     	; 0x1d6a <main+0x846>
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <main+0x896>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	6b a1       	ldd	r22, Y+35	; 0x23
    1d94:	7c a1       	ldd	r23, Y+36	; 0x24
    1d96:	8d a1       	ldd	r24, Y+37	; 0x25
    1d98:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9a a3       	std	Y+34, r25	; 0x22
    1da4:	89 a3       	std	Y+33, r24	; 0x21
    1da6:	89 a1       	ldd	r24, Y+33	; 0x21
    1da8:	9a a1       	ldd	r25, Y+34	; 0x22
    1daa:	9e 8f       	std	Y+30, r25	; 0x1e
    1dac:	8d 8f       	std	Y+29, r24	; 0x1d
    1dae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1db0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <main+0x88e>
    1db6:	9e 8f       	std	Y+30, r25	; 0x1e
    1db8:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				_delay_ms(100);
				menuChoice = 2;
    1dba:	fe 01       	movw	r30, r28
    1dbc:	ef 58       	subi	r30, 0x8F	; 143
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	82 e0       	ldi	r24, 0x02	; 2
    1dc2:	80 83       	st	Z, r24
			}
			g_LCD_state = 3;
    1dc4:	83 e0       	ldi	r24, 0x03	; 3
    1dc6:	80 93 45 01 	sts	0x0145, r24
			else
			{
				g_LCD_state = 0;
			}
		}
		while(g_LCD_state == 2)
    1dca:	80 91 45 01 	lds	r24, 0x0145
    1dce:	82 30       	cpi	r24, 0x02	; 2
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <main+0x8b0>
    1dd2:	f9 ce       	rjmp	.-526    	; 0x1bc6 <main+0x6a2>
    1dd4:	79 c1       	rjmp	.+754    	; 0x20c8 <main+0xba4>
			}
			g_LCD_state = 3;
		}
		while(g_LCD_state == 3)
		{
			LCD_function();
    1dd6:	0e 94 2a 09 	call	0x1254	; 0x1254 <LCD_function>
			trial = 0;
    1dda:	fe 01       	movw	r30, r28
    1ddc:	ec 58       	subi	r30, 0x8C	; 140
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	10 82       	st	Z, r1
    1de2:	36 c1       	rjmp	.+620    	; 0x2050 <main+0xb2c>
			while((trial<3) && (MC2_PASS_STATE != CONTROL_SUCCESS))
			{
				trial++;
    1de4:	de 01       	movw	r26, r28
    1de6:	ac 58       	subi	r26, 0x8C	; 140
    1de8:	bf 4f       	sbci	r27, 0xFF	; 255
    1dea:	fe 01       	movw	r30, r28
    1dec:	ec 58       	subi	r30, 0x8C	; 140
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	80 81       	ld	r24, Z
    1df2:	8f 5f       	subi	r24, 0xFF	; 255
    1df4:	8c 93       	st	X, r24
				LCD_function();
    1df6:	0e 94 2a 09 	call	0x1254	; 0x1254 <LCD_function>
				LCD_moveCursor(1,5);
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	65 e0       	ldi	r22, 0x05	; 5
    1dfe:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <LCD_moveCursor>
				Keypad_function(password);
    1e02:	ce 01       	movw	r24, r28
    1e04:	8b 58       	subi	r24, 0x8B	; 139
    1e06:	9f 4f       	sbci	r25, 0xFF	; 255
    1e08:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <Keypad_function>
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	a0 e2       	ldi	r26, 0x20	; 32
    1e12:	b1 e4       	ldi	r27, 0x41	; 65
    1e14:	89 8f       	std	Y+25, r24	; 0x19
    1e16:	9a 8f       	std	Y+26, r25	; 0x1a
    1e18:	ab 8f       	std	Y+27, r26	; 0x1b
    1e1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	4a ef       	ldi	r20, 0xFA	; 250
    1e2a:	54 e4       	ldi	r21, 0x44	; 68
    1e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	8d 8b       	std	Y+21, r24	; 0x15
    1e36:	9e 8b       	std	Y+22, r25	; 0x16
    1e38:	af 8b       	std	Y+23, r26	; 0x17
    1e3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e40:	8f 89       	ldd	r24, Y+23	; 0x17
    1e42:	98 8d       	ldd	r25, Y+24	; 0x18
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e8       	ldi	r20, 0x80	; 128
    1e4a:	5f e3       	ldi	r21, 0x3F	; 63
    1e4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e50:	88 23       	and	r24, r24
    1e52:	2c f4       	brge	.+10     	; 0x1e5e <main+0x93a>
		__ticks = 1;
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	9c 8b       	std	Y+20, r25	; 0x14
    1e5a:	8b 8b       	std	Y+19, r24	; 0x13
    1e5c:	3f c0       	rjmp	.+126    	; 0x1edc <main+0x9b8>
	else if (__tmp > 65535)
    1e5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e60:	7e 89       	ldd	r23, Y+22	; 0x16
    1e62:	8f 89       	ldd	r24, Y+23	; 0x17
    1e64:	98 8d       	ldd	r25, Y+24	; 0x18
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	3f ef       	ldi	r19, 0xFF	; 255
    1e6a:	4f e7       	ldi	r20, 0x7F	; 127
    1e6c:	57 e4       	ldi	r21, 0x47	; 71
    1e6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e72:	18 16       	cp	r1, r24
    1e74:	4c f5       	brge	.+82     	; 0x1ec8 <main+0x9a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e76:	69 8d       	ldd	r22, Y+25	; 0x19
    1e78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	40 e2       	ldi	r20, 0x20	; 32
    1e84:	51 e4       	ldi	r21, 0x41	; 65
    1e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	9c 8b       	std	Y+20, r25	; 0x14
    1e9c:	8b 8b       	std	Y+19, r24	; 0x13
    1e9e:	0f c0       	rjmp	.+30     	; 0x1ebe <main+0x99a>
    1ea0:	88 ec       	ldi	r24, 0xC8	; 200
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9a 8b       	std	Y+18, r25	; 0x12
    1ea6:	89 8b       	std	Y+17, r24	; 0x11
    1ea8:	89 89       	ldd	r24, Y+17	; 0x11
    1eaa:	9a 89       	ldd	r25, Y+18	; 0x12
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <main+0x988>
    1eb0:	9a 8b       	std	Y+18, r25	; 0x12
    1eb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb8:	01 97       	sbiw	r24, 0x01	; 1
    1eba:	9c 8b       	std	Y+20, r25	; 0x14
    1ebc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ebe:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec2:	00 97       	sbiw	r24, 0x00	; 0
    1ec4:	69 f7       	brne	.-38     	; 0x1ea0 <main+0x97c>
    1ec6:	14 c0       	rjmp	.+40     	; 0x1ef0 <main+0x9cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eca:	7e 89       	ldd	r23, Y+22	; 0x16
    1ecc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ece:	98 8d       	ldd	r25, Y+24	; 0x18
    1ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	9c 8b       	std	Y+20, r25	; 0x14
    1eda:	8b 8b       	std	Y+19, r24	; 0x13
    1edc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ede:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee0:	98 8b       	std	Y+16, r25	; 0x10
    1ee2:	8f 87       	std	Y+15, r24	; 0x0f
    1ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee6:	98 89       	ldd	r25, Y+16	; 0x10
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <main+0x9c4>
    1eec:	98 8b       	std	Y+16, r25	; 0x10
    1eee:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);
				UART_sendByte(HMI_READY);
    1ef0:	80 e1       	ldi	r24, 0x10	; 16
    1ef2:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
				while(UART_recieveByte() != CONTROL_READY){};
    1ef6:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    1efa:	81 31       	cpi	r24, 0x11	; 17
    1efc:	e1 f7       	brne	.-8      	; 0x1ef6 <main+0x9d2>
				UART_sendByte(HMI_CHECK_PASS);
    1efe:	85 e1       	ldi	r24, 0x15	; 21
    1f00:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
				while(UART_recieveByte() != CONTROL_READY){};
    1f04:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    1f08:	81 31       	cpi	r24, 0x11	; 17
    1f0a:	e1 f7       	brne	.-8      	; 0x1f04 <main+0x9e0>
				for (i=0; i<5; i++)
    1f0c:	10 92 47 01 	sts	0x0147, r1
    1f10:	19 c0       	rjmp	.+50     	; 0x1f44 <main+0xa20>
				{
					UART_sendByte(password[i]);
    1f12:	80 91 47 01 	lds	r24, 0x0147
    1f16:	88 2f       	mov	r24, r24
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	9e 01       	movw	r18, r28
    1f1c:	2b 58       	subi	r18, 0x8B	; 139
    1f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	f9 01       	movw	r30, r18
    1f26:	e8 0f       	add	r30, r24
    1f28:	f9 1f       	adc	r31, r25
    1f2a:	80 81       	ld	r24, Z
    1f2c:	91 81       	ldd	r25, Z+1	; 0x01
    1f2e:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
					while(UART_recieveByte() != CONTROL_RECEIVED){};
    1f32:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    1f36:	84 31       	cpi	r24, 0x14	; 20
    1f38:	e1 f7       	brne	.-8      	; 0x1f32 <main+0xa0e>
				_delay_ms(10);
				UART_sendByte(HMI_READY);
				while(UART_recieveByte() != CONTROL_READY){};
				UART_sendByte(HMI_CHECK_PASS);
				while(UART_recieveByte() != CONTROL_READY){};
				for (i=0; i<5; i++)
    1f3a:	80 91 47 01 	lds	r24, 0x0147
    1f3e:	8f 5f       	subi	r24, 0xFF	; 255
    1f40:	80 93 47 01 	sts	0x0147, r24
    1f44:	80 91 47 01 	lds	r24, 0x0147
    1f48:	85 30       	cpi	r24, 0x05	; 5
    1f4a:	18 f3       	brcs	.-58     	; 0x1f12 <main+0x9ee>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a0 e2       	ldi	r26, 0x20	; 32
    1f52:	b1 e4       	ldi	r27, 0x41	; 65
    1f54:	8b 87       	std	Y+11, r24	; 0x0b
    1f56:	9c 87       	std	Y+12, r25	; 0x0c
    1f58:	ad 87       	std	Y+13, r26	; 0x0d
    1f5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a ef       	ldi	r20, 0xFA	; 250
    1f6a:	54 e4       	ldi	r21, 0x44	; 68
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8f 83       	std	Y+7, r24	; 0x07
    1f76:	98 87       	std	Y+8, r25	; 0x08
    1f78:	a9 87       	std	Y+9, r26	; 0x09
    1f7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7e:	78 85       	ldd	r23, Y+8	; 0x08
    1f80:	89 85       	ldd	r24, Y+9	; 0x09
    1f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <main+0xa7a>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <main+0xaf8>
	else if (__tmp > 65535)
    1f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa0:	78 85       	ldd	r23, Y+8	; 0x08
    1fa2:	89 85       	ldd	r24, Y+9	; 0x09
    1fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	4c f5       	brge	.+82     	; 0x2008 <main+0xae4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <main+0xada>
    1fe0:	88 ec       	ldi	r24, 0xC8	; 200
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	9c 83       	std	Y+4, r25	; 0x04
    1fe6:	8b 83       	std	Y+3, r24	; 0x03
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <main+0xac8>
    1ff0:	9c 83       	std	Y+4, r25	; 0x04
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <main+0xabc>
    2006:	14 c0       	rjmp	.+40     	; 0x2030 <main+0xb0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <main+0xb04>
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01
					while(UART_recieveByte() != CONTROL_RECEIVED){};
				}
				_delay_ms(10);

				//RETURN if the pass entered is the correct pass or not
				UART_sendByte(HMI_READY);
    2030:	80 e1       	ldi	r24, 0x10	; 16
    2032:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
				while(UART_recieveByte() != CONTROL_READY){};
    2036:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    203a:	81 31       	cpi	r24, 0x11	; 17
    203c:	e1 f7       	brne	.-8      	; 0x2036 <main+0xb12>
				MC2_PASS_STATE = UART_recieveByte();
    203e:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    2042:	fe 01       	movw	r30, r28
    2044:	ee 58       	subi	r30, 0x8E	; 142
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	88 2f       	mov	r24, r24
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	91 83       	std	Z+1, r25	; 0x01
    204e:	80 83       	st	Z, r24
		}
		while(g_LCD_state == 3)
		{
			LCD_function();
			trial = 0;
			while((trial<3) && (MC2_PASS_STATE != CONTROL_SUCCESS))
    2050:	fe 01       	movw	r30, r28
    2052:	ec 58       	subi	r30, 0x8C	; 140
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	80 81       	ld	r24, Z
    2058:	83 30       	cpi	r24, 0x03	; 3
    205a:	48 f4       	brcc	.+18     	; 0x206e <main+0xb4a>
    205c:	fe 01       	movw	r30, r28
    205e:	ee 58       	subi	r30, 0x8E	; 142
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	80 81       	ld	r24, Z
    2064:	91 81       	ldd	r25, Z+1	; 0x01
    2066:	86 31       	cpi	r24, 0x16	; 22
    2068:	91 05       	cpc	r25, r1
    206a:	09 f0       	breq	.+2      	; 0x206e <main+0xb4a>
    206c:	bb ce       	rjmp	.-650    	; 0x1de4 <main+0x8c0>
				UART_sendByte(HMI_READY);
				while(UART_recieveByte() != CONTROL_READY){};
				MC2_PASS_STATE = UART_recieveByte();
			}

			if(trial == 3)
    206e:	fe 01       	movw	r30, r28
    2070:	ec 58       	subi	r30, 0x8C	; 140
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	80 81       	ld	r24, Z
    2076:	83 30       	cpi	r24, 0x03	; 3
    2078:	41 f4       	brne	.+16     	; 0x208a <main+0xb66>
			{
				g_LCD_state = 7;
    207a:	87 e0       	ldi	r24, 0x07	; 7
    207c:	80 93 45 01 	sts	0x0145, r24
				trial = 0;
    2080:	fe 01       	movw	r30, r28
    2082:	ec 58       	subi	r30, 0x8C	; 140
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	10 82       	st	Z, r1
    2088:	38 c0       	rjmp	.+112    	; 0x20fa <main+0xbd6>
				break;
			}
			else if(MC2_PASS_STATE == CONTROL_SUCCESS)
    208a:	fe 01       	movw	r30, r28
    208c:	ee 58       	subi	r30, 0x8E	; 142
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	80 81       	ld	r24, Z
    2092:	91 81       	ldd	r25, Z+1	; 0x01
    2094:	86 31       	cpi	r24, 0x16	; 22
    2096:	91 05       	cpc	r25, r1
    2098:	91 f4       	brne	.+36     	; 0x20be <main+0xb9a>
			{
				if(menuChoice == 1)
    209a:	fe 01       	movw	r30, r28
    209c:	ef 58       	subi	r30, 0x8F	; 143
    209e:	ff 4f       	sbci	r31, 0xFF	; 255
    20a0:	80 81       	ld	r24, Z
    20a2:	81 30       	cpi	r24, 0x01	; 1
    20a4:	21 f4       	brne	.+8      	; 0x20ae <main+0xb8a>
				{
					g_LCD_state = 4;
    20a6:	84 e0       	ldi	r24, 0x04	; 4
    20a8:	80 93 45 01 	sts	0x0145, r24
    20ac:	08 c0       	rjmp	.+16     	; 0x20be <main+0xb9a>
				}
				else if (menuChoice == 2)
    20ae:	fe 01       	movw	r30, r28
    20b0:	ef 58       	subi	r30, 0x8F	; 143
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	80 81       	ld	r24, Z
    20b6:	82 30       	cpi	r24, 0x02	; 2
    20b8:	11 f4       	brne	.+4      	; 0x20be <main+0xb9a>
				{
					g_LCD_state = 0;
    20ba:	10 92 45 01 	sts	0x0145, r1
				}
			}
			MC2_PASS_STATE = 0;
    20be:	fe 01       	movw	r30, r28
    20c0:	ee 58       	subi	r30, 0x8E	; 142
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	11 82       	std	Z+1, r1	; 0x01
    20c6:	10 82       	st	Z, r1
				_delay_ms(100);
				menuChoice = 2;
			}
			g_LCD_state = 3;
		}
		while(g_LCD_state == 3)
    20c8:	80 91 45 01 	lds	r24, 0x0145
    20cc:	83 30       	cpi	r24, 0x03	; 3
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <main+0xbae>
    20d0:	82 ce       	rjmp	.-764    	; 0x1dd6 <main+0x8b2>
    20d2:	13 c0       	rjmp	.+38     	; 0x20fa <main+0xbd6>
			}
			MC2_PASS_STATE = 0;
		}
		while(g_LCD_state == 4)
		{
			LCD_function();
    20d4:	0e 94 2a 09 	call	0x1254	; 0x1254 <LCD_function>
			//wait for UART2
			UART_sendByte(HMI_READY);
    20d8:	80 e1       	ldi	r24, 0x10	; 16
    20da:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
			while(UART_recieveByte() != CONTROL_READY){};
    20de:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    20e2:	81 31       	cpi	r24, 0x11	; 17
    20e4:	e1 f7       	brne	.-8      	; 0x20de <main+0xbba>
			UART_sendByte(HMI_OPEN_DOOR);
    20e6:	82 e2       	ldi	r24, 0x22	; 34
    20e8:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
			while(UART_recieveByte() != CONTROL_TIMEOVER){};
    20ec:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    20f0:	80 32       	cpi	r24, 0x20	; 32
    20f2:	e1 f7       	brne	.-8      	; 0x20ec <main+0xbc8>
			g_LCD_state = 5;
    20f4:	85 e0       	ldi	r24, 0x05	; 5
    20f6:	80 93 45 01 	sts	0x0145, r24
					g_LCD_state = 0;
				}
			}
			MC2_PASS_STATE = 0;
		}
		while(g_LCD_state == 4)
    20fa:	80 91 45 01 	lds	r24, 0x0145
    20fe:	84 30       	cpi	r24, 0x04	; 4
    2100:	49 f3       	breq	.-46     	; 0x20d4 <main+0xbb0>
    2102:	13 c0       	rjmp	.+38     	; 0x212a <main+0xc06>
			while(UART_recieveByte() != CONTROL_TIMEOVER){};
			g_LCD_state = 5;
		}
		while(g_LCD_state == 5)
		{
			LCD_function();
    2104:	0e 94 2a 09 	call	0x1254	; 0x1254 <LCD_function>
			//wait for UART2 to say that PIR is not detecting
			UART_sendByte(HMI_READY);
    2108:	80 e1       	ldi	r24, 0x10	; 16
    210a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
			while(UART_recieveByte() != CONTROL_READY){};
    210e:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    2112:	81 31       	cpi	r24, 0x11	; 17
    2114:	e1 f7       	brne	.-8      	; 0x210e <main+0xbea>
			UART_sendByte(HMI_CHECKPEOPLE);
    2116:	83 e2       	ldi	r24, 0x23	; 35
    2118:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
			while(UART_recieveByte() != CONTROL_NOPEOPLE){};
    211c:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    2120:	81 32       	cpi	r24, 0x21	; 33
    2122:	e1 f7       	brne	.-8      	; 0x211c <main+0xbf8>
			g_LCD_state = 6;
    2124:	86 e0       	ldi	r24, 0x06	; 6
    2126:	80 93 45 01 	sts	0x0145, r24
			while(UART_recieveByte() != CONTROL_READY){};
			UART_sendByte(HMI_OPEN_DOOR);
			while(UART_recieveByte() != CONTROL_TIMEOVER){};
			g_LCD_state = 5;
		}
		while(g_LCD_state == 5)
    212a:	80 91 45 01 	lds	r24, 0x0145
    212e:	85 30       	cpi	r24, 0x05	; 5
    2130:	49 f3       	breq	.-46     	; 0x2104 <main+0xbe0>
    2132:	13 c0       	rjmp	.+38     	; 0x215a <main+0xc36>
			while(UART_recieveByte() != CONTROL_NOPEOPLE){};
			g_LCD_state = 6;
		}
		while(g_LCD_state == 6)
		{
			LCD_function();
    2134:	0e 94 2a 09 	call	0x1254	; 0x1254 <LCD_function>
			//wait for UART2 to tell timer finished
			UART_sendByte(HMI_READY);
    2138:	80 e1       	ldi	r24, 0x10	; 16
    213a:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
			while(UART_recieveByte() != CONTROL_READY){};
    213e:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    2142:	81 31       	cpi	r24, 0x11	; 17
    2144:	e1 f7       	brne	.-8      	; 0x213e <main+0xc1a>
			UART_sendByte(HMI_CLOSEDOOR);
    2146:	84 e2       	ldi	r24, 0x24	; 36
    2148:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
			while(UART_recieveByte() != CONTROL_TIMEOVER){};
    214c:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    2150:	80 32       	cpi	r24, 0x20	; 32
    2152:	e1 f7       	brne	.-8      	; 0x214c <main+0xc28>
			g_LCD_state = 2;
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	80 93 45 01 	sts	0x0145, r24
			while(UART_recieveByte() != CONTROL_READY){};
			UART_sendByte(HMI_CHECKPEOPLE);
			while(UART_recieveByte() != CONTROL_NOPEOPLE){};
			g_LCD_state = 6;
		}
		while(g_LCD_state == 6)
    215a:	80 91 45 01 	lds	r24, 0x0145
    215e:	86 30       	cpi	r24, 0x06	; 6
    2160:	49 f3       	breq	.-46     	; 0x2134 <main+0xc10>
			while(UART_recieveByte() != CONTROL_READY){};
			UART_sendByte(HMI_CLOSEDOOR);
			while(UART_recieveByte() != CONTROL_TIMEOVER){};
			g_LCD_state = 2;
		}
		if((g_LCD_state == 7) && (timerFlag == 0))
    2162:	80 91 45 01 	lds	r24, 0x0145
    2166:	87 30       	cpi	r24, 0x07	; 7
    2168:	09 f0       	breq	.+2      	; 0x216c <main+0xc48>
    216a:	75 cb       	rjmp	.-2326   	; 0x1856 <main+0x332>
    216c:	80 91 48 01 	lds	r24, 0x0148
    2170:	88 23       	and	r24, r24
    2172:	09 f0       	breq	.+2      	; 0x2176 <main+0xc52>
    2174:	70 cb       	rjmp	.-2336   	; 0x1856 <main+0x332>
		{
			timerFlag = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	80 93 48 01 	sts	0x0148, r24
			LCD_function();
    217c:	0e 94 2a 09 	call	0x1254	; 0x1254 <LCD_function>
			Timer_setCallBack(&pass_callBack, TIMER1);
    2180:	88 e0       	ldi	r24, 0x08	; 8
    2182:	99 e0       	ldi	r25, 0x09	; 9
    2184:	61 e0       	ldi	r22, 0x01	; 1
    2186:	0e 94 26 1a 	call	0x344c	; 0x344c <Timer_setCallBack>
			Timer_init(&timerConfig);
    218a:	8d e3       	ldi	r24, 0x3D	; 61
    218c:	91 e0       	ldi	r25, 0x01	; 1
    218e:	0e 94 b8 18 	call	0x3170	; 0x3170 <Timer_init>
			UART_sendByte(HMI_READY);
    2192:	80 e1       	ldi	r24, 0x10	; 16
    2194:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
			while(UART_recieveByte() != CONTROL_READY){};
    2198:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    219c:	81 31       	cpi	r24, 0x11	; 17
    219e:	e1 f7       	brne	.-8      	; 0x2198 <main+0xc74>
			UART_sendByte(HMI_WRONGPASS);
    21a0:	85 e2       	ldi	r24, 0x25	; 37
    21a2:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
    21a6:	57 cb       	rjmp	.-2386   	; 0x1856 <main+0x332>

000021a8 <KEYPAD_getPressedKey>:
*******************************************************************************/
/*
 * Description :
 * Get the Keypad pressed button
 */
uint8 KEYPAD_getPressedKey(void){
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	61 97       	sbiw	r28, 0x11	; 17
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
	uint8 button_number, row, col;

	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID, PIN_INPUT);
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	60 e0       	ldi	r22, 0x00	; 0
    21c0:	40 e0       	ldi	r20, 0x00	; 0
    21c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+1, PIN_INPUT);
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	61 e0       	ldi	r22, 0x01	; 1
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+2, PIN_INPUT);
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	62 e0       	ldi	r22, 0x02	; 2
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+3, PIN_INPUT);
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	63 e0       	ldi	r22, 0x03	; 3
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>


	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_COL_FIRST_PIN_ID,PIN_INPUT);
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	64 e0       	ldi	r22, 0x04	; 4
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_COL_FIRST_PIN_ID+1,PIN_INPUT);
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	65 e0       	ldi	r22, 0x05	; 5
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_COL_FIRST_PIN_ID+2,PIN_INPUT);
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	66 e0       	ldi	r22, 0x06	; 6
    21fc:	40 e0       	ldi	r20, 0x00	; 0
    21fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if KEYPAD_COLUMNS_NUMBER == 4
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_COL_FIRST_PIN_ID+3,PIN_INPUT);
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	67 e0       	ldi	r22, 0x07	; 7
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1){
		for(row=0; row<KEYPAD_ROWS_NUMBER; row++){
    220c:	18 8a       	std	Y+16, r1	; 0x10
    220e:	ad c0       	rjmp	.+346    	; 0x236a <KEYPAD_getPressedKey+0x1c2>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, PIN_OUTPUT);
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	68 89       	ldd	r22, Y+16	; 0x10
    2214:	41 e0       	ldi	r20, 0x01	; 1
    2216:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	68 89       	ldd	r22, Y+16	; 0x10
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0; col<KEYPAD_COLUMNS_NUMBER; col++){
    2224:	1f 86       	std	Y+15, r1	; 0x0f
    2226:	24 c0       	rjmp	.+72     	; 0x2270 <KEYPAD_getPressedKey+0xc8>
				if(GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_COL_FIRST_PIN_ID+col) == KEYPAD_BUTTON_PRESSED){
    2228:	8f 85       	ldd	r24, Y+15	; 0x0f
    222a:	98 2f       	mov	r25, r24
    222c:	9c 5f       	subi	r25, 0xFC	; 252
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	69 2f       	mov	r22, r25
    2232:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    2236:	88 23       	and	r24, r24
    2238:	c1 f4       	brne	.+48     	; 0x226a <KEYPAD_getPressedKey+0xc2>
					button_number = (row * KEYPAD_COLUMNS_NUMBER) + col + 1;
    223a:	88 89       	ldd	r24, Y+16	; 0x10
    223c:	88 2f       	mov	r24, r24
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	88 0f       	add	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	88 0f       	add	r24, r24
    2246:	99 1f       	adc	r25, r25
    2248:	98 2f       	mov	r25, r24
    224a:	8f 85       	ldd	r24, Y+15	; 0x0f
    224c:	89 0f       	add	r24, r25
    224e:	8f 5f       	subi	r24, 0xFF	; 255
    2250:	89 8b       	std	Y+17, r24	; 0x11

#if KEYPAD_COLUMNS_NUMBER == 3
					return KEYPAD_4x3_adjustKeyNumber(button_number);
#elif KEYPAD_COLUMNS_NUMBER == 4
					return KEYPAD_4x4_adjustKeyNumber(button_number);
    2252:	89 89       	ldd	r24, Y+17	; 0x11
    2254:	0e 94 ba 11 	call	0x2374	; 0x2374 <KEYPAD_4x4_adjustKeyNumber>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_ROW_FIRST_PIN_ID+row,PIN_INPUT);
			_delay_ms(5);
		}

	}
}
    2258:	61 96       	adiw	r28, 0x11	; 17
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret
	while(1){
		for(row=0; row<KEYPAD_ROWS_NUMBER; row++){
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_ROW_FIRST_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0; col<KEYPAD_COLUMNS_NUMBER; col++){
    226a:	8f 85       	ldd	r24, Y+15	; 0x0f
    226c:	8f 5f       	subi	r24, 0xFF	; 255
    226e:	8f 87       	std	Y+15, r24	; 0x0f
    2270:	8f 85       	ldd	r24, Y+15	; 0x0f
    2272:	84 30       	cpi	r24, 0x04	; 4
    2274:	c8 f2       	brcs	.-78     	; 0x2228 <KEYPAD_getPressedKey+0x80>
#elif KEYPAD_COLUMNS_NUMBER == 4
					return KEYPAD_4x4_adjustKeyNumber(button_number);
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_ROW_FIRST_PIN_ID+row,PIN_INPUT);
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	68 89       	ldd	r22, Y+16	; 0x10
    227a:	40 e0       	ldi	r20, 0x00	; 0
    227c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a0 ea       	ldi	r26, 0xA0	; 160
    2286:	b0 e4       	ldi	r27, 0x40	; 64
    2288:	8b 87       	std	Y+11, r24	; 0x0b
    228a:	9c 87       	std	Y+12, r25	; 0x0c
    228c:	ad 87       	std	Y+13, r26	; 0x0d
    228e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2290:	6b 85       	ldd	r22, Y+11	; 0x0b
    2292:	7c 85       	ldd	r23, Y+12	; 0x0c
    2294:	8d 85       	ldd	r24, Y+13	; 0x0d
    2296:	9e 85       	ldd	r25, Y+14	; 0x0e
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4a ef       	ldi	r20, 0xFA	; 250
    229e:	54 e4       	ldi	r21, 0x44	; 68
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	8f 83       	std	Y+7, r24	; 0x07
    22aa:	98 87       	std	Y+8, r25	; 0x08
    22ac:	a9 87       	std	Y+9, r26	; 0x09
    22ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b0:	6f 81       	ldd	r22, Y+7	; 0x07
    22b2:	78 85       	ldd	r23, Y+8	; 0x08
    22b4:	89 85       	ldd	r24, Y+9	; 0x09
    22b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e8       	ldi	r20, 0x80	; 128
    22be:	5f e3       	ldi	r21, 0x3F	; 63
    22c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22c4:	88 23       	and	r24, r24
    22c6:	2c f4       	brge	.+10     	; 0x22d2 <KEYPAD_getPressedKey+0x12a>
		__ticks = 1;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	8d 83       	std	Y+5, r24	; 0x05
    22d0:	3f c0       	rjmp	.+126    	; 0x2350 <KEYPAD_getPressedKey+0x1a8>
	else if (__tmp > 65535)
    22d2:	6f 81       	ldd	r22, Y+7	; 0x07
    22d4:	78 85       	ldd	r23, Y+8	; 0x08
    22d6:	89 85       	ldd	r24, Y+9	; 0x09
    22d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	3f ef       	ldi	r19, 0xFF	; 255
    22de:	4f e7       	ldi	r20, 0x7F	; 127
    22e0:	57 e4       	ldi	r21, 0x47	; 71
    22e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22e6:	18 16       	cp	r1, r24
    22e8:	4c f5       	brge	.+82     	; 0x233c <KEYPAD_getPressedKey+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e2       	ldi	r20, 0x20	; 32
    22f8:	51 e4       	ldi	r21, 0x41	; 65
    22fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	9e 83       	std	Y+6, r25	; 0x06
    2310:	8d 83       	std	Y+5, r24	; 0x05
    2312:	0f c0       	rjmp	.+30     	; 0x2332 <KEYPAD_getPressedKey+0x18a>
    2314:	88 ec       	ldi	r24, 0xC8	; 200
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9c 83       	std	Y+4, r25	; 0x04
    231a:	8b 83       	std	Y+3, r24	; 0x03
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <KEYPAD_getPressedKey+0x178>
    2324:	9c 83       	std	Y+4, r25	; 0x04
    2326:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2328:	8d 81       	ldd	r24, Y+5	; 0x05
    232a:	9e 81       	ldd	r25, Y+6	; 0x06
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	9e 83       	std	Y+6, r25	; 0x06
    2330:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2332:	8d 81       	ldd	r24, Y+5	; 0x05
    2334:	9e 81       	ldd	r25, Y+6	; 0x06
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	69 f7       	brne	.-38     	; 0x2314 <KEYPAD_getPressedKey+0x16c>
    233a:	14 c0       	rjmp	.+40     	; 0x2364 <KEYPAD_getPressedKey+0x1bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233c:	6f 81       	ldd	r22, Y+7	; 0x07
    233e:	78 85       	ldd	r23, Y+8	; 0x08
    2340:	89 85       	ldd	r24, Y+9	; 0x09
    2342:	9a 85       	ldd	r25, Y+10	; 0x0a
    2344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	9e 83       	std	Y+6, r25	; 0x06
    234e:	8d 83       	std	Y+5, r24	; 0x05
    2350:	8d 81       	ldd	r24, Y+5	; 0x05
    2352:	9e 81       	ldd	r25, Y+6	; 0x06
    2354:	9a 83       	std	Y+2, r25	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01
    2358:	89 81       	ldd	r24, Y+1	; 0x01
    235a:	9a 81       	ldd	r25, Y+2	; 0x02
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <KEYPAD_getPressedKey+0x1b4>
    2360:	9a 83       	std	Y+2, r25	; 0x02
    2362:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_COL_FIRST_PIN_ID+2,PIN_INPUT);
#if KEYPAD_COLUMNS_NUMBER == 4
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_COL_FIRST_PIN_ID+3,PIN_INPUT);
#endif
	while(1){
		for(row=0; row<KEYPAD_ROWS_NUMBER; row++){
    2364:	88 89       	ldd	r24, Y+16	; 0x10
    2366:	8f 5f       	subi	r24, 0xFF	; 255
    2368:	88 8b       	std	Y+16, r24	; 0x10
    236a:	88 89       	ldd	r24, Y+16	; 0x10
    236c:	84 30       	cpi	r24, 0x04	; 4
    236e:	08 f4       	brcc	.+2      	; 0x2372 <KEYPAD_getPressedKey+0x1ca>
    2370:	4f cf       	rjmp	.-354    	; 0x2210 <KEYPAD_getPressedKey+0x68>
    2372:	4c cf       	rjmp	.-360    	; 0x220c <KEYPAD_getPressedKey+0x64>

00002374 <KEYPAD_4x4_adjustKeyNumber>:
	return keypad_button;
}

#elif KEYPAD_COLUMNS_NUMBER == 4

static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number){
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	00 d0       	rcall	.+0      	; 0x237a <KEYPAD_4x4_adjustKeyNumber+0x6>
    237a:	00 d0       	rcall	.+0      	; 0x237c <KEYPAD_4x4_adjustKeyNumber+0x8>
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2382:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	28 2f       	mov	r18, r24
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	3c 83       	std	Y+4, r19	; 0x04
    238c:	2b 83       	std	Y+3, r18	; 0x03
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	9c 81       	ldd	r25, Y+4	; 0x04
    2392:	88 30       	cpi	r24, 0x08	; 8
    2394:	91 05       	cpc	r25, r1
    2396:	09 f4       	brne	.+2      	; 0x239a <KEYPAD_4x4_adjustKeyNumber+0x26>
    2398:	70 c0       	rjmp	.+224    	; 0x247a <KEYPAD_4x4_adjustKeyNumber+0x106>
    239a:	2b 81       	ldd	r18, Y+3	; 0x03
    239c:	3c 81       	ldd	r19, Y+4	; 0x04
    239e:	29 30       	cpi	r18, 0x09	; 9
    23a0:	31 05       	cpc	r19, r1
    23a2:	5c f5       	brge	.+86     	; 0x23fa <KEYPAD_4x4_adjustKeyNumber+0x86>
    23a4:	8b 81       	ldd	r24, Y+3	; 0x03
    23a6:	9c 81       	ldd	r25, Y+4	; 0x04
    23a8:	84 30       	cpi	r24, 0x04	; 4
    23aa:	91 05       	cpc	r25, r1
    23ac:	09 f4       	brne	.+2      	; 0x23b0 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    23ae:	59 c0       	rjmp	.+178    	; 0x2462 <KEYPAD_4x4_adjustKeyNumber+0xee>
    23b0:	2b 81       	ldd	r18, Y+3	; 0x03
    23b2:	3c 81       	ldd	r19, Y+4	; 0x04
    23b4:	25 30       	cpi	r18, 0x05	; 5
    23b6:	31 05       	cpc	r19, r1
    23b8:	9c f4       	brge	.+38     	; 0x23e0 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	82 30       	cpi	r24, 0x02	; 2
    23c0:	91 05       	cpc	r25, r1
    23c2:	09 f4       	brne	.+2      	; 0x23c6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    23c4:	48 c0       	rjmp	.+144    	; 0x2456 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    23c6:	2b 81       	ldd	r18, Y+3	; 0x03
    23c8:	3c 81       	ldd	r19, Y+4	; 0x04
    23ca:	23 30       	cpi	r18, 0x03	; 3
    23cc:	31 05       	cpc	r19, r1
    23ce:	0c f0       	brlt	.+2      	; 0x23d2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    23d0:	45 c0       	rjmp	.+138    	; 0x245c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	81 30       	cpi	r24, 0x01	; 1
    23d8:	91 05       	cpc	r25, r1
    23da:	09 f4       	brne	.+2      	; 0x23de <KEYPAD_4x4_adjustKeyNumber+0x6a>
    23dc:	39 c0       	rjmp	.+114    	; 0x2450 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    23de:	66 c0       	rjmp	.+204    	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
    23e0:	2b 81       	ldd	r18, Y+3	; 0x03
    23e2:	3c 81       	ldd	r19, Y+4	; 0x04
    23e4:	26 30       	cpi	r18, 0x06	; 6
    23e6:	31 05       	cpc	r19, r1
    23e8:	09 f4       	brne	.+2      	; 0x23ec <KEYPAD_4x4_adjustKeyNumber+0x78>
    23ea:	41 c0       	rjmp	.+130    	; 0x246e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    23ec:	8b 81       	ldd	r24, Y+3	; 0x03
    23ee:	9c 81       	ldd	r25, Y+4	; 0x04
    23f0:	87 30       	cpi	r24, 0x07	; 7
    23f2:	91 05       	cpc	r25, r1
    23f4:	0c f0       	brlt	.+2      	; 0x23f8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    23f6:	3e c0       	rjmp	.+124    	; 0x2474 <KEYPAD_4x4_adjustKeyNumber+0x100>
    23f8:	37 c0       	rjmp	.+110    	; 0x2468 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    23fa:	2b 81       	ldd	r18, Y+3	; 0x03
    23fc:	3c 81       	ldd	r19, Y+4	; 0x04
    23fe:	2c 30       	cpi	r18, 0x0C	; 12
    2400:	31 05       	cpc	r19, r1
    2402:	09 f4       	brne	.+2      	; 0x2406 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2404:	46 c0       	rjmp	.+140    	; 0x2492 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	9c 81       	ldd	r25, Y+4	; 0x04
    240a:	8d 30       	cpi	r24, 0x0D	; 13
    240c:	91 05       	cpc	r25, r1
    240e:	5c f4       	brge	.+22     	; 0x2426 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2410:	2b 81       	ldd	r18, Y+3	; 0x03
    2412:	3c 81       	ldd	r19, Y+4	; 0x04
    2414:	2a 30       	cpi	r18, 0x0A	; 10
    2416:	31 05       	cpc	r19, r1
    2418:	b1 f1       	breq	.+108    	; 0x2486 <KEYPAD_4x4_adjustKeyNumber+0x112>
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	8b 30       	cpi	r24, 0x0B	; 11
    2420:	91 05       	cpc	r25, r1
    2422:	a4 f5       	brge	.+104    	; 0x248c <KEYPAD_4x4_adjustKeyNumber+0x118>
    2424:	2d c0       	rjmp	.+90     	; 0x2480 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2426:	2b 81       	ldd	r18, Y+3	; 0x03
    2428:	3c 81       	ldd	r19, Y+4	; 0x04
    242a:	2e 30       	cpi	r18, 0x0E	; 14
    242c:	31 05       	cpc	r19, r1
    242e:	b9 f1       	breq	.+110    	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	8e 30       	cpi	r24, 0x0E	; 14
    2436:	91 05       	cpc	r25, r1
    2438:	7c f1       	brlt	.+94     	; 0x2498 <KEYPAD_4x4_adjustKeyNumber+0x124>
    243a:	2b 81       	ldd	r18, Y+3	; 0x03
    243c:	3c 81       	ldd	r19, Y+4	; 0x04
    243e:	2f 30       	cpi	r18, 0x0F	; 15
    2440:	31 05       	cpc	r19, r1
    2442:	79 f1       	breq	.+94     	; 0x24a2 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2444:	8b 81       	ldd	r24, Y+3	; 0x03
    2446:	9c 81       	ldd	r25, Y+4	; 0x04
    2448:	80 31       	cpi	r24, 0x10	; 16
    244a:	91 05       	cpc	r25, r1
    244c:	69 f1       	breq	.+90     	; 0x24a8 <KEYPAD_4x4_adjustKeyNumber+0x134>
    244e:	2e c0       	rjmp	.+92     	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
	{
	case 1:
		keypad_button = 7;
    2450:	87 e0       	ldi	r24, 0x07	; 7
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	2b c0       	rjmp	.+86     	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 2:
		keypad_button = 8;
    2456:	88 e0       	ldi	r24, 0x08	; 8
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	28 c0       	rjmp	.+80     	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 3:
		keypad_button = 9;
    245c:	89 e0       	ldi	r24, 0x09	; 9
    245e:	89 83       	std	Y+1, r24	; 0x01
    2460:	25 c0       	rjmp	.+74     	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 4:
		keypad_button = '%';
    2462:	85 e2       	ldi	r24, 0x25	; 37
    2464:	89 83       	std	Y+1, r24	; 0x01
    2466:	22 c0       	rjmp	.+68     	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 5:
		keypad_button = 4;
    2468:	84 e0       	ldi	r24, 0x04	; 4
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	1f c0       	rjmp	.+62     	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 6:
		keypad_button = 5;
    246e:	85 e0       	ldi	r24, 0x05	; 5
    2470:	89 83       	std	Y+1, r24	; 0x01
    2472:	1c c0       	rjmp	.+56     	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 7:
		keypad_button = 6;
    2474:	86 e0       	ldi	r24, 0x06	; 6
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	19 c0       	rjmp	.+50     	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 8:
		keypad_button = 'x';
    247a:	88 e7       	ldi	r24, 0x78	; 120
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	16 c0       	rjmp	.+44     	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 9:
		keypad_button = 1;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	89 83       	std	Y+1, r24	; 0x01
    2484:	13 c0       	rjmp	.+38     	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 10:
		keypad_button = 2;
    2486:	82 e0       	ldi	r24, 0x02	; 2
    2488:	89 83       	std	Y+1, r24	; 0x01
    248a:	10 c0       	rjmp	.+32     	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 11:
		keypad_button = 3;
    248c:	83 e0       	ldi	r24, 0x03	; 3
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	0d c0       	rjmp	.+26     	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 12:
		keypad_button = '-';
    2492:	8d e2       	ldi	r24, 0x2D	; 45
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	0a c0       	rjmp	.+20     	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 13:
		keypad_button = 'c';
    2498:	83 e6       	ldi	r24, 0x63	; 99
    249a:	89 83       	std	Y+1, r24	; 0x01
    249c:	07 c0       	rjmp	.+14     	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 14:
		keypad_button = 0;
    249e:	19 82       	std	Y+1, r1	; 0x01
    24a0:	05 c0       	rjmp	.+10     	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 15:
		keypad_button = '=';
    24a2:	8d e3       	ldi	r24, 0x3D	; 61
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <KEYPAD_4x4_adjustKeyNumber+0x138>
		break;
	case 16:
		keypad_button = '+';
    24a8:	8b e2       	ldi	r24, 0x2B	; 43
    24aa:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return keypad_button;
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void){
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	2e 97       	sbiw	r28, 0x0e	; 14
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	de bf       	out	0x3e, r29	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    24d0:	82 e0       	ldi	r24, 0x02	; 2
    24d2:	60 e0       	ldi	r22, 0x00	; 0
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    24da:	82 e0       	ldi	r24, 0x02	; 2
    24dc:	61 e0       	ldi	r22, 0x01	; 1
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a0 ea       	ldi	r26, 0xA0	; 160
    24ea:	b1 e4       	ldi	r27, 0x41	; 65
    24ec:	8b 87       	std	Y+11, r24	; 0x0b
    24ee:	9c 87       	std	Y+12, r25	; 0x0c
    24f0:	ad 87       	std	Y+13, r26	; 0x0d
    24f2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	4a ef       	ldi	r20, 0xFA	; 250
    2502:	54 e4       	ldi	r21, 0x44	; 68
    2504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	8f 83       	std	Y+7, r24	; 0x07
    250e:	98 87       	std	Y+8, r25	; 0x08
    2510:	a9 87       	std	Y+9, r26	; 0x09
    2512:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2514:	6f 81       	ldd	r22, Y+7	; 0x07
    2516:	78 85       	ldd	r23, Y+8	; 0x08
    2518:	89 85       	ldd	r24, Y+9	; 0x09
    251a:	9a 85       	ldd	r25, Y+10	; 0x0a
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e8       	ldi	r20, 0x80	; 128
    2522:	5f e3       	ldi	r21, 0x3F	; 63
    2524:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2528:	88 23       	and	r24, r24
    252a:	2c f4       	brge	.+10     	; 0x2536 <LCD_init+0x7a>
		__ticks = 1;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9e 83       	std	Y+6, r25	; 0x06
    2532:	8d 83       	std	Y+5, r24	; 0x05
    2534:	3f c0       	rjmp	.+126    	; 0x25b4 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2536:	6f 81       	ldd	r22, Y+7	; 0x07
    2538:	78 85       	ldd	r23, Y+8	; 0x08
    253a:	89 85       	ldd	r24, Y+9	; 0x09
    253c:	9a 85       	ldd	r25, Y+10	; 0x0a
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	3f ef       	ldi	r19, 0xFF	; 255
    2542:	4f e7       	ldi	r20, 0x7F	; 127
    2544:	57 e4       	ldi	r21, 0x47	; 71
    2546:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    254a:	18 16       	cp	r1, r24
    254c:	4c f5       	brge	.+82     	; 0x25a0 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    254e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2550:	7c 85       	ldd	r23, Y+12	; 0x0c
    2552:	8d 85       	ldd	r24, Y+13	; 0x0d
    2554:	9e 85       	ldd	r25, Y+14	; 0x0e
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	40 e2       	ldi	r20, 0x20	; 32
    255c:	51 e4       	ldi	r21, 0x41	; 65
    255e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	8d 83       	std	Y+5, r24	; 0x05
    2576:	0f c0       	rjmp	.+30     	; 0x2596 <LCD_init+0xda>
    2578:	88 ec       	ldi	r24, 0xC8	; 200
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9c 83       	std	Y+4, r25	; 0x04
    257e:	8b 83       	std	Y+3, r24	; 0x03
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	9c 81       	ldd	r25, Y+4	; 0x04
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <LCD_init+0xc8>
    2588:	9c 83       	std	Y+4, r25	; 0x04
    258a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    258c:	8d 81       	ldd	r24, Y+5	; 0x05
    258e:	9e 81       	ldd	r25, Y+6	; 0x06
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	9e 83       	std	Y+6, r25	; 0x06
    2594:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2596:	8d 81       	ldd	r24, Y+5	; 0x05
    2598:	9e 81       	ldd	r25, Y+6	; 0x06
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	69 f7       	brne	.-38     	; 0x2578 <LCD_init+0xbc>
    259e:	14 c0       	rjmp	.+40     	; 0x25c8 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a0:	6f 81       	ldd	r22, Y+7	; 0x07
    25a2:	78 85       	ldd	r23, Y+8	; 0x08
    25a4:	89 85       	ldd	r24, Y+9	; 0x09
    25a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	9e 83       	std	Y+6, r25	; 0x06
    25b2:	8d 83       	std	Y+5, r24	; 0x05
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	9a 83       	std	Y+2, r25	; 0x02
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	01 97       	sbiw	r24, 0x01	; 1
    25c2:	f1 f7       	brne	.-4      	; 0x25c0 <LCD_init+0x104>
    25c4:	9a 83       	std	Y+2, r25	; 0x02
    25c6:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif (LCD_DATA_BIT_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	6f ef       	ldi	r22, 0xFF	; 255
    25cc:	0e 94 18 08 	call	0x1030	; 0x1030 <GPIO_setupPortDirection>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    25d0:	88 e3       	ldi	r24, 0x38	; 56
    25d2:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF);	/* Cursor off */
    25d6:	8c e0       	ldi	r24, 0x0C	; 12
    25d8:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);	/* clear LCD at the beginning */
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LCD_sendCommand>

}
    25e2:	2e 96       	adiw	r28, 0x0e	; 14
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <LCD_sendCommand>:

/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command){
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	cd b7       	in	r28, 0x3d	; 61
    25fa:	de b7       	in	r29, 0x3e	; 62
    25fc:	e9 97       	sbiw	r28, 0x39	; 57
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	89 af       	std	Y+57, r24	; 0x39


	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);  /* Instruction Mode RS=0 */
    260a:	82 e0       	ldi	r24, 0x02	; 2
    260c:	60 e0       	ldi	r22, 0x00	; 0
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	a0 e8       	ldi	r26, 0x80	; 128
    261a:	bf e3       	ldi	r27, 0x3F	; 63
    261c:	8d ab       	std	Y+53, r24	; 0x35
    261e:	9e ab       	std	Y+54, r25	; 0x36
    2620:	af ab       	std	Y+55, r26	; 0x37
    2622:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2624:	6d a9       	ldd	r22, Y+53	; 0x35
    2626:	7e a9       	ldd	r23, Y+54	; 0x36
    2628:	8f a9       	ldd	r24, Y+55	; 0x37
    262a:	98 ad       	ldd	r25, Y+56	; 0x38
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	4a ef       	ldi	r20, 0xFA	; 250
    2632:	54 e4       	ldi	r21, 0x44	; 68
    2634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	89 ab       	std	Y+49, r24	; 0x31
    263e:	9a ab       	std	Y+50, r25	; 0x32
    2640:	ab ab       	std	Y+51, r26	; 0x33
    2642:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2644:	69 a9       	ldd	r22, Y+49	; 0x31
    2646:	7a a9       	ldd	r23, Y+50	; 0x32
    2648:	8b a9       	ldd	r24, Y+51	; 0x33
    264a:	9c a9       	ldd	r25, Y+52	; 0x34
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	40 e8       	ldi	r20, 0x80	; 128
    2652:	5f e3       	ldi	r21, 0x3F	; 63
    2654:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2658:	88 23       	and	r24, r24
    265a:	2c f4       	brge	.+10     	; 0x2666 <LCD_sendCommand+0x72>
		__ticks = 1;
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	98 ab       	std	Y+48, r25	; 0x30
    2662:	8f a7       	std	Y+47, r24	; 0x2f
    2664:	3f c0       	rjmp	.+126    	; 0x26e4 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2666:	69 a9       	ldd	r22, Y+49	; 0x31
    2668:	7a a9       	ldd	r23, Y+50	; 0x32
    266a:	8b a9       	ldd	r24, Y+51	; 0x33
    266c:	9c a9       	ldd	r25, Y+52	; 0x34
    266e:	20 e0       	ldi	r18, 0x00	; 0
    2670:	3f ef       	ldi	r19, 0xFF	; 255
    2672:	4f e7       	ldi	r20, 0x7F	; 127
    2674:	57 e4       	ldi	r21, 0x47	; 71
    2676:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    267a:	18 16       	cp	r1, r24
    267c:	4c f5       	brge	.+82     	; 0x26d0 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267e:	6d a9       	ldd	r22, Y+53	; 0x35
    2680:	7e a9       	ldd	r23, Y+54	; 0x36
    2682:	8f a9       	ldd	r24, Y+55	; 0x37
    2684:	98 ad       	ldd	r25, Y+56	; 0x38
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	40 e2       	ldi	r20, 0x20	; 32
    268c:	51 e4       	ldi	r21, 0x41	; 65
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	bc 01       	movw	r22, r24
    2698:	cd 01       	movw	r24, r26
    269a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	98 ab       	std	Y+48, r25	; 0x30
    26a4:	8f a7       	std	Y+47, r24	; 0x2f
    26a6:	0f c0       	rjmp	.+30     	; 0x26c6 <LCD_sendCommand+0xd2>
    26a8:	88 ec       	ldi	r24, 0xC8	; 200
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	9e a7       	std	Y+46, r25	; 0x2e
    26ae:	8d a7       	std	Y+45, r24	; 0x2d
    26b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    26b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <LCD_sendCommand+0xc0>
    26b8:	9e a7       	std	Y+46, r25	; 0x2e
    26ba:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    26be:	98 a9       	ldd	r25, Y+48	; 0x30
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	98 ab       	std	Y+48, r25	; 0x30
    26c4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26c8:	98 a9       	ldd	r25, Y+48	; 0x30
    26ca:	00 97       	sbiw	r24, 0x00	; 0
    26cc:	69 f7       	brne	.-38     	; 0x26a8 <LCD_sendCommand+0xb4>
    26ce:	14 c0       	rjmp	.+40     	; 0x26f8 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26d0:	69 a9       	ldd	r22, Y+49	; 0x31
    26d2:	7a a9       	ldd	r23, Y+50	; 0x32
    26d4:	8b a9       	ldd	r24, Y+51	; 0x33
    26d6:	9c a9       	ldd	r25, Y+52	; 0x34
    26d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	98 ab       	std	Y+48, r25	; 0x30
    26e2:	8f a7       	std	Y+47, r24	; 0x2f
    26e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    26e6:	98 a9       	ldd	r25, Y+48	; 0x30
    26e8:	9c a7       	std	Y+44, r25	; 0x2c
    26ea:	8b a7       	std	Y+43, r24	; 0x2b
    26ec:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ee:	9c a5       	ldd	r25, Y+44	; 0x2c
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <LCD_sendCommand+0xfc>
    26f4:	9c a7       	std	Y+44, r25	; 0x2c
    26f6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);	  /* Enable LCD E =1 */
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	61 e0       	ldi	r22, 0x01	; 1
    26fc:	41 e0       	ldi	r20, 0x01	; 1
    26fe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	a0 e8       	ldi	r26, 0x80	; 128
    2708:	bf e3       	ldi	r27, 0x3F	; 63
    270a:	8f a3       	std	Y+39, r24	; 0x27
    270c:	98 a7       	std	Y+40, r25	; 0x28
    270e:	a9 a7       	std	Y+41, r26	; 0x29
    2710:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2712:	6f a1       	ldd	r22, Y+39	; 0x27
    2714:	78 a5       	ldd	r23, Y+40	; 0x28
    2716:	89 a5       	ldd	r24, Y+41	; 0x29
    2718:	9a a5       	ldd	r25, Y+42	; 0x2a
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	4a ef       	ldi	r20, 0xFA	; 250
    2720:	54 e4       	ldi	r21, 0x44	; 68
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	8b a3       	std	Y+35, r24	; 0x23
    272c:	9c a3       	std	Y+36, r25	; 0x24
    272e:	ad a3       	std	Y+37, r26	; 0x25
    2730:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2732:	6b a1       	ldd	r22, Y+35	; 0x23
    2734:	7c a1       	ldd	r23, Y+36	; 0x24
    2736:	8d a1       	ldd	r24, Y+37	; 0x25
    2738:	9e a1       	ldd	r25, Y+38	; 0x26
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e8       	ldi	r20, 0x80	; 128
    2740:	5f e3       	ldi	r21, 0x3F	; 63
    2742:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2746:	88 23       	and	r24, r24
    2748:	2c f4       	brge	.+10     	; 0x2754 <LCD_sendCommand+0x160>
		__ticks = 1;
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	9a a3       	std	Y+34, r25	; 0x22
    2750:	89 a3       	std	Y+33, r24	; 0x21
    2752:	3f c0       	rjmp	.+126    	; 0x27d2 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2754:	6b a1       	ldd	r22, Y+35	; 0x23
    2756:	7c a1       	ldd	r23, Y+36	; 0x24
    2758:	8d a1       	ldd	r24, Y+37	; 0x25
    275a:	9e a1       	ldd	r25, Y+38	; 0x26
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	3f ef       	ldi	r19, 0xFF	; 255
    2760:	4f e7       	ldi	r20, 0x7F	; 127
    2762:	57 e4       	ldi	r21, 0x47	; 71
    2764:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2768:	18 16       	cp	r1, r24
    276a:	4c f5       	brge	.+82     	; 0x27be <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276c:	6f a1       	ldd	r22, Y+39	; 0x27
    276e:	78 a5       	ldd	r23, Y+40	; 0x28
    2770:	89 a5       	ldd	r24, Y+41	; 0x29
    2772:	9a a5       	ldd	r25, Y+42	; 0x2a
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	40 e2       	ldi	r20, 0x20	; 32
    277a:	51 e4       	ldi	r21, 0x41	; 65
    277c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	bc 01       	movw	r22, r24
    2786:	cd 01       	movw	r24, r26
    2788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9a a3       	std	Y+34, r25	; 0x22
    2792:	89 a3       	std	Y+33, r24	; 0x21
    2794:	0f c0       	rjmp	.+30     	; 0x27b4 <LCD_sendCommand+0x1c0>
    2796:	88 ec       	ldi	r24, 0xC8	; 200
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	98 a3       	std	Y+32, r25	; 0x20
    279c:	8f 8f       	std	Y+31, r24	; 0x1f
    279e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27a0:	98 a1       	ldd	r25, Y+32	; 0x20
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <LCD_sendCommand+0x1ae>
    27a6:	98 a3       	std	Y+32, r25	; 0x20
    27a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27aa:	89 a1       	ldd	r24, Y+33	; 0x21
    27ac:	9a a1       	ldd	r25, Y+34	; 0x22
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	9a a3       	std	Y+34, r25	; 0x22
    27b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b4:	89 a1       	ldd	r24, Y+33	; 0x21
    27b6:	9a a1       	ldd	r25, Y+34	; 0x22
    27b8:	00 97       	sbiw	r24, 0x00	; 0
    27ba:	69 f7       	brne	.-38     	; 0x2796 <LCD_sendCommand+0x1a2>
    27bc:	14 c0       	rjmp	.+40     	; 0x27e6 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27be:	6b a1       	ldd	r22, Y+35	; 0x23
    27c0:	7c a1       	ldd	r23, Y+36	; 0x24
    27c2:	8d a1       	ldd	r24, Y+37	; 0x25
    27c4:	9e a1       	ldd	r25, Y+38	; 0x26
    27c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	9a a3       	std	Y+34, r25	; 0x22
    27d0:	89 a3       	std	Y+33, r24	; 0x21
    27d2:	89 a1       	ldd	r24, Y+33	; 0x21
    27d4:	9a a1       	ldd	r25, Y+34	; 0x22
    27d6:	9e 8f       	std	Y+30, r25	; 0x1e
    27d8:	8d 8f       	std	Y+29, r24	; 0x1d
    27da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <LCD_sendCommand+0x1ea>
    27e2:	9e 8f       	std	Y+30, r25	; 0x1e
    27e4:	8d 8f       	std	Y+29, r24	; 0x1d
	GPIO_writePin(LCD_DATA_PORT_ID, LCD_DATA_PIN4_ID, GET_BIT(command,3));

	_delay_ms(1); /* delay for processing Tdsw = 100ns */

#elif (LCD_DATA_BIT_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, command);
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	69 ad       	ldd	r22, Y+57	; 0x39
    27ea:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_writePort>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a0 e8       	ldi	r26, 0x80	; 128
    27f4:	bf e3       	ldi	r27, 0x3F	; 63
    27f6:	89 8f       	std	Y+25, r24	; 0x19
    27f8:	9a 8f       	std	Y+26, r25	; 0x1a
    27fa:	ab 8f       	std	Y+27, r26	; 0x1b
    27fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2800:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2802:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2804:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	4a ef       	ldi	r20, 0xFA	; 250
    280c:	54 e4       	ldi	r21, 0x44	; 68
    280e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	8d 8b       	std	Y+21, r24	; 0x15
    2818:	9e 8b       	std	Y+22, r25	; 0x16
    281a:	af 8b       	std	Y+23, r26	; 0x17
    281c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    281e:	6d 89       	ldd	r22, Y+21	; 0x15
    2820:	7e 89       	ldd	r23, Y+22	; 0x16
    2822:	8f 89       	ldd	r24, Y+23	; 0x17
    2824:	98 8d       	ldd	r25, Y+24	; 0x18
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e8       	ldi	r20, 0x80	; 128
    282c:	5f e3       	ldi	r21, 0x3F	; 63
    282e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2832:	88 23       	and	r24, r24
    2834:	2c f4       	brge	.+10     	; 0x2840 <LCD_sendCommand+0x24c>
		__ticks = 1;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	9c 8b       	std	Y+20, r25	; 0x14
    283c:	8b 8b       	std	Y+19, r24	; 0x13
    283e:	3f c0       	rjmp	.+126    	; 0x28be <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2840:	6d 89       	ldd	r22, Y+21	; 0x15
    2842:	7e 89       	ldd	r23, Y+22	; 0x16
    2844:	8f 89       	ldd	r24, Y+23	; 0x17
    2846:	98 8d       	ldd	r25, Y+24	; 0x18
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	3f ef       	ldi	r19, 0xFF	; 255
    284c:	4f e7       	ldi	r20, 0x7F	; 127
    284e:	57 e4       	ldi	r21, 0x47	; 71
    2850:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2854:	18 16       	cp	r1, r24
    2856:	4c f5       	brge	.+82     	; 0x28aa <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2858:	69 8d       	ldd	r22, Y+25	; 0x19
    285a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    285c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e2       	ldi	r20, 0x20	; 32
    2866:	51 e4       	ldi	r21, 0x41	; 65
    2868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9c 8b       	std	Y+20, r25	; 0x14
    287e:	8b 8b       	std	Y+19, r24	; 0x13
    2880:	0f c0       	rjmp	.+30     	; 0x28a0 <LCD_sendCommand+0x2ac>
    2882:	88 ec       	ldi	r24, 0xC8	; 200
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9a 8b       	std	Y+18, r25	; 0x12
    2888:	89 8b       	std	Y+17, r24	; 0x11
    288a:	89 89       	ldd	r24, Y+17	; 0x11
    288c:	9a 89       	ldd	r25, Y+18	; 0x12
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <LCD_sendCommand+0x29a>
    2892:	9a 8b       	std	Y+18, r25	; 0x12
    2894:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2896:	8b 89       	ldd	r24, Y+19	; 0x13
    2898:	9c 89       	ldd	r25, Y+20	; 0x14
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	9c 8b       	std	Y+20, r25	; 0x14
    289e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a0:	8b 89       	ldd	r24, Y+19	; 0x13
    28a2:	9c 89       	ldd	r25, Y+20	; 0x14
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	69 f7       	brne	.-38     	; 0x2882 <LCD_sendCommand+0x28e>
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28aa:	6d 89       	ldd	r22, Y+21	; 0x15
    28ac:	7e 89       	ldd	r23, Y+22	; 0x16
    28ae:	8f 89       	ldd	r24, Y+23	; 0x17
    28b0:	98 8d       	ldd	r25, Y+24	; 0x18
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9c 8b       	std	Y+20, r25	; 0x14
    28bc:	8b 8b       	std	Y+19, r24	; 0x13
    28be:	8b 89       	ldd	r24, Y+19	; 0x13
    28c0:	9c 89       	ldd	r25, Y+20	; 0x14
    28c2:	98 8b       	std	Y+16, r25	; 0x10
    28c4:	8f 87       	std	Y+15, r24	; 0x0f
    28c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    28c8:	98 89       	ldd	r25, Y+16	; 0x10
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <LCD_sendCommand+0x2d6>
    28ce:	98 8b       	std	Y+16, r25	; 0x10
    28d0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
#endif
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    28d2:	82 e0       	ldi	r24, 0x02	; 2
    28d4:	61 e0       	ldi	r22, 0x01	; 1
    28d6:	40 e0       	ldi	r20, 0x00	; 0
    28d8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	a0 e8       	ldi	r26, 0x80	; 128
    28e2:	bf e3       	ldi	r27, 0x3F	; 63
    28e4:	8b 87       	std	Y+11, r24	; 0x0b
    28e6:	9c 87       	std	Y+12, r25	; 0x0c
    28e8:	ad 87       	std	Y+13, r26	; 0x0d
    28ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	4a ef       	ldi	r20, 0xFA	; 250
    28fa:	54 e4       	ldi	r21, 0x44	; 68
    28fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	8f 83       	std	Y+7, r24	; 0x07
    2906:	98 87       	std	Y+8, r25	; 0x08
    2908:	a9 87       	std	Y+9, r26	; 0x09
    290a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    290c:	6f 81       	ldd	r22, Y+7	; 0x07
    290e:	78 85       	ldd	r23, Y+8	; 0x08
    2910:	89 85       	ldd	r24, Y+9	; 0x09
    2912:	9a 85       	ldd	r25, Y+10	; 0x0a
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e8       	ldi	r20, 0x80	; 128
    291a:	5f e3       	ldi	r21, 0x3F	; 63
    291c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2920:	88 23       	and	r24, r24
    2922:	2c f4       	brge	.+10     	; 0x292e <LCD_sendCommand+0x33a>
		__ticks = 1;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	9e 83       	std	Y+6, r25	; 0x06
    292a:	8d 83       	std	Y+5, r24	; 0x05
    292c:	3f c0       	rjmp	.+126    	; 0x29ac <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    292e:	6f 81       	ldd	r22, Y+7	; 0x07
    2930:	78 85       	ldd	r23, Y+8	; 0x08
    2932:	89 85       	ldd	r24, Y+9	; 0x09
    2934:	9a 85       	ldd	r25, Y+10	; 0x0a
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	3f ef       	ldi	r19, 0xFF	; 255
    293a:	4f e7       	ldi	r20, 0x7F	; 127
    293c:	57 e4       	ldi	r21, 0x47	; 71
    293e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2942:	18 16       	cp	r1, r24
    2944:	4c f5       	brge	.+82     	; 0x2998 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2946:	6b 85       	ldd	r22, Y+11	; 0x0b
    2948:	7c 85       	ldd	r23, Y+12	; 0x0c
    294a:	8d 85       	ldd	r24, Y+13	; 0x0d
    294c:	9e 85       	ldd	r25, Y+14	; 0x0e
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e2       	ldi	r20, 0x20	; 32
    2954:	51 e4       	ldi	r21, 0x41	; 65
    2956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	bc 01       	movw	r22, r24
    2960:	cd 01       	movw	r24, r26
    2962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	9e 83       	std	Y+6, r25	; 0x06
    296c:	8d 83       	std	Y+5, r24	; 0x05
    296e:	0f c0       	rjmp	.+30     	; 0x298e <LCD_sendCommand+0x39a>
    2970:	88 ec       	ldi	r24, 0xC8	; 200
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	9c 83       	std	Y+4, r25	; 0x04
    2976:	8b 83       	std	Y+3, r24	; 0x03
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	9c 81       	ldd	r25, Y+4	; 0x04
    297c:	01 97       	sbiw	r24, 0x01	; 1
    297e:	f1 f7       	brne	.-4      	; 0x297c <LCD_sendCommand+0x388>
    2980:	9c 83       	std	Y+4, r25	; 0x04
    2982:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	9e 81       	ldd	r25, Y+6	; 0x06
    2988:	01 97       	sbiw	r24, 0x01	; 1
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    298e:	8d 81       	ldd	r24, Y+5	; 0x05
    2990:	9e 81       	ldd	r25, Y+6	; 0x06
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	69 f7       	brne	.-38     	; 0x2970 <LCD_sendCommand+0x37c>
    2996:	14 c0       	rjmp	.+40     	; 0x29c0 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2998:	6f 81       	ldd	r22, Y+7	; 0x07
    299a:	78 85       	ldd	r23, Y+8	; 0x08
    299c:	89 85       	ldd	r24, Y+9	; 0x09
    299e:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	9e 83       	std	Y+6, r25	; 0x06
    29aa:	8d 83       	std	Y+5, r24	; 0x05
    29ac:	8d 81       	ldd	r24, Y+5	; 0x05
    29ae:	9e 81       	ldd	r25, Y+6	; 0x06
    29b0:	9a 83       	std	Y+2, r25	; 0x02
    29b2:	89 83       	std	Y+1, r24	; 0x01
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <LCD_sendCommand+0x3c4>
    29bc:	9a 83       	std	Y+2, r25	; 0x02
    29be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */

}
    29c0:	e9 96       	adiw	r28, 0x39	; 57
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	cf 91       	pop	r28
    29ce:	df 91       	pop	r29
    29d0:	08 95       	ret

000029d2 <LCD_displayCharacter>:

/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data){
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	e9 97       	sbiw	r28, 0x39	; 57
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	de bf       	out	0x3e, r29	; 62
    29e2:	0f be       	out	0x3f, r0	; 63
    29e4:	cd bf       	out	0x3d, r28	; 61
    29e6:	89 af       	std	Y+57, r24	; 0x39

	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); /* Data Mode RS=1 */
    29e8:	82 e0       	ldi	r24, 0x02	; 2
    29ea:	60 e0       	ldi	r22, 0x00	; 0
    29ec:	41 e0       	ldi	r20, 0x01	; 1
    29ee:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	a0 e8       	ldi	r26, 0x80	; 128
    29f8:	bf e3       	ldi	r27, 0x3F	; 63
    29fa:	8d ab       	std	Y+53, r24	; 0x35
    29fc:	9e ab       	std	Y+54, r25	; 0x36
    29fe:	af ab       	std	Y+55, r26	; 0x37
    2a00:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a02:	6d a9       	ldd	r22, Y+53	; 0x35
    2a04:	7e a9       	ldd	r23, Y+54	; 0x36
    2a06:	8f a9       	ldd	r24, Y+55	; 0x37
    2a08:	98 ad       	ldd	r25, Y+56	; 0x38
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	4a ef       	ldi	r20, 0xFA	; 250
    2a10:	54 e4       	ldi	r21, 0x44	; 68
    2a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	89 ab       	std	Y+49, r24	; 0x31
    2a1c:	9a ab       	std	Y+50, r25	; 0x32
    2a1e:	ab ab       	std	Y+51, r26	; 0x33
    2a20:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a22:	69 a9       	ldd	r22, Y+49	; 0x31
    2a24:	7a a9       	ldd	r23, Y+50	; 0x32
    2a26:	8b a9       	ldd	r24, Y+51	; 0x33
    2a28:	9c a9       	ldd	r25, Y+52	; 0x34
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e8       	ldi	r20, 0x80	; 128
    2a30:	5f e3       	ldi	r21, 0x3F	; 63
    2a32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a36:	88 23       	and	r24, r24
    2a38:	2c f4       	brge	.+10     	; 0x2a44 <LCD_displayCharacter+0x72>
		__ticks = 1;
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	98 ab       	std	Y+48, r25	; 0x30
    2a40:	8f a7       	std	Y+47, r24	; 0x2f
    2a42:	3f c0       	rjmp	.+126    	; 0x2ac2 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2a44:	69 a9       	ldd	r22, Y+49	; 0x31
    2a46:	7a a9       	ldd	r23, Y+50	; 0x32
    2a48:	8b a9       	ldd	r24, Y+51	; 0x33
    2a4a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a4c:	20 e0       	ldi	r18, 0x00	; 0
    2a4e:	3f ef       	ldi	r19, 0xFF	; 255
    2a50:	4f e7       	ldi	r20, 0x7F	; 127
    2a52:	57 e4       	ldi	r21, 0x47	; 71
    2a54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a58:	18 16       	cp	r1, r24
    2a5a:	4c f5       	brge	.+82     	; 0x2aae <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a5c:	6d a9       	ldd	r22, Y+53	; 0x35
    2a5e:	7e a9       	ldd	r23, Y+54	; 0x36
    2a60:	8f a9       	ldd	r24, Y+55	; 0x37
    2a62:	98 ad       	ldd	r25, Y+56	; 0x38
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	30 e0       	ldi	r19, 0x00	; 0
    2a68:	40 e2       	ldi	r20, 0x20	; 32
    2a6a:	51 e4       	ldi	r21, 0x41	; 65
    2a6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	bc 01       	movw	r22, r24
    2a76:	cd 01       	movw	r24, r26
    2a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	98 ab       	std	Y+48, r25	; 0x30
    2a82:	8f a7       	std	Y+47, r24	; 0x2f
    2a84:	0f c0       	rjmp	.+30     	; 0x2aa4 <LCD_displayCharacter+0xd2>
    2a86:	88 ec       	ldi	r24, 0xC8	; 200
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	9e a7       	std	Y+46, r25	; 0x2e
    2a8c:	8d a7       	std	Y+45, r24	; 0x2d
    2a8e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a90:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <LCD_displayCharacter+0xc0>
    2a96:	9e a7       	std	Y+46, r25	; 0x2e
    2a98:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a9c:	98 a9       	ldd	r25, Y+48	; 0x30
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	98 ab       	std	Y+48, r25	; 0x30
    2aa2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aa6:	98 a9       	ldd	r25, Y+48	; 0x30
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	69 f7       	brne	.-38     	; 0x2a86 <LCD_displayCharacter+0xb4>
    2aac:	14 c0       	rjmp	.+40     	; 0x2ad6 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aae:	69 a9       	ldd	r22, Y+49	; 0x31
    2ab0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ab2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ab4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	98 ab       	std	Y+48, r25	; 0x30
    2ac0:	8f a7       	std	Y+47, r24	; 0x2f
    2ac2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ac4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ac6:	9c a7       	std	Y+44, r25	; 0x2c
    2ac8:	8b a7       	std	Y+43, r24	; 0x2b
    2aca:	8b a5       	ldd	r24, Y+43	; 0x2b
    2acc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	f1 f7       	brne	.-4      	; 0x2ace <LCD_displayCharacter+0xfc>
    2ad2:	9c a7       	std	Y+44, r25	; 0x2c
    2ad4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); /* Enable LCD E=1 */
    2ad6:	82 e0       	ldi	r24, 0x02	; 2
    2ad8:	61 e0       	ldi	r22, 0x01	; 1
    2ada:	41 e0       	ldi	r20, 0x01	; 1
    2adc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	a0 e8       	ldi	r26, 0x80	; 128
    2ae6:	bf e3       	ldi	r27, 0x3F	; 63
    2ae8:	8f a3       	std	Y+39, r24	; 0x27
    2aea:	98 a7       	std	Y+40, r25	; 0x28
    2aec:	a9 a7       	std	Y+41, r26	; 0x29
    2aee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af0:	6f a1       	ldd	r22, Y+39	; 0x27
    2af2:	78 a5       	ldd	r23, Y+40	; 0x28
    2af4:	89 a5       	ldd	r24, Y+41	; 0x29
    2af6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	4a ef       	ldi	r20, 0xFA	; 250
    2afe:	54 e4       	ldi	r21, 0x44	; 68
    2b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	8b a3       	std	Y+35, r24	; 0x23
    2b0a:	9c a3       	std	Y+36, r25	; 0x24
    2b0c:	ad a3       	std	Y+37, r26	; 0x25
    2b0e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b10:	6b a1       	ldd	r22, Y+35	; 0x23
    2b12:	7c a1       	ldd	r23, Y+36	; 0x24
    2b14:	8d a1       	ldd	r24, Y+37	; 0x25
    2b16:	9e a1       	ldd	r25, Y+38	; 0x26
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e8       	ldi	r20, 0x80	; 128
    2b1e:	5f e3       	ldi	r21, 0x3F	; 63
    2b20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b24:	88 23       	and	r24, r24
    2b26:	2c f4       	brge	.+10     	; 0x2b32 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	9a a3       	std	Y+34, r25	; 0x22
    2b2e:	89 a3       	std	Y+33, r24	; 0x21
    2b30:	3f c0       	rjmp	.+126    	; 0x2bb0 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2b32:	6b a1       	ldd	r22, Y+35	; 0x23
    2b34:	7c a1       	ldd	r23, Y+36	; 0x24
    2b36:	8d a1       	ldd	r24, Y+37	; 0x25
    2b38:	9e a1       	ldd	r25, Y+38	; 0x26
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	3f ef       	ldi	r19, 0xFF	; 255
    2b3e:	4f e7       	ldi	r20, 0x7F	; 127
    2b40:	57 e4       	ldi	r21, 0x47	; 71
    2b42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b46:	18 16       	cp	r1, r24
    2b48:	4c f5       	brge	.+82     	; 0x2b9c <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b52:	20 e0       	ldi	r18, 0x00	; 0
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	40 e2       	ldi	r20, 0x20	; 32
    2b58:	51 e4       	ldi	r21, 0x41	; 65
    2b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	9a a3       	std	Y+34, r25	; 0x22
    2b70:	89 a3       	std	Y+33, r24	; 0x21
    2b72:	0f c0       	rjmp	.+30     	; 0x2b92 <LCD_displayCharacter+0x1c0>
    2b74:	88 ec       	ldi	r24, 0xC8	; 200
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	98 a3       	std	Y+32, r25	; 0x20
    2b7a:	8f 8f       	std	Y+31, r24	; 0x1f
    2b7c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b7e:	98 a1       	ldd	r25, Y+32	; 0x20
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	f1 f7       	brne	.-4      	; 0x2b80 <LCD_displayCharacter+0x1ae>
    2b84:	98 a3       	std	Y+32, r25	; 0x20
    2b86:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b88:	89 a1       	ldd	r24, Y+33	; 0x21
    2b8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	9a a3       	std	Y+34, r25	; 0x22
    2b90:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b92:	89 a1       	ldd	r24, Y+33	; 0x21
    2b94:	9a a1       	ldd	r25, Y+34	; 0x22
    2b96:	00 97       	sbiw	r24, 0x00	; 0
    2b98:	69 f7       	brne	.-38     	; 0x2b74 <LCD_displayCharacter+0x1a2>
    2b9a:	14 c0       	rjmp	.+40     	; 0x2bc4 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2b9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba8:	dc 01       	movw	r26, r24
    2baa:	cb 01       	movw	r24, r22
    2bac:	9a a3       	std	Y+34, r25	; 0x22
    2bae:	89 a3       	std	Y+33, r24	; 0x21
    2bb0:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb2:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb4:	9e 8f       	std	Y+30, r25	; 0x1e
    2bb6:	8d 8f       	std	Y+29, r24	; 0x1d
    2bb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <LCD_displayCharacter+0x1ea>
    2bc0:	9e 8f       	std	Y+30, r25	; 0x1e
    2bc2:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1); /* delay for processing Tdsw = 100ns */


#elif (LCD_DATA_BIT_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID, data);
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	69 ad       	ldd	r22, Y+57	; 0x39
    2bc8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <GPIO_writePort>
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	a0 e8       	ldi	r26, 0x80	; 128
    2bd2:	bf e3       	ldi	r27, 0x3F	; 63
    2bd4:	89 8f       	std	Y+25, r24	; 0x19
    2bd6:	9a 8f       	std	Y+26, r25	; 0x1a
    2bd8:	ab 8f       	std	Y+27, r26	; 0x1b
    2bda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bdc:	69 8d       	ldd	r22, Y+25	; 0x19
    2bde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2be0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2be2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	4a ef       	ldi	r20, 0xFA	; 250
    2bea:	54 e4       	ldi	r21, 0x44	; 68
    2bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	8d 8b       	std	Y+21, r24	; 0x15
    2bf6:	9e 8b       	std	Y+22, r25	; 0x16
    2bf8:	af 8b       	std	Y+23, r26	; 0x17
    2bfa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bfc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bfe:	7e 89       	ldd	r23, Y+22	; 0x16
    2c00:	8f 89       	ldd	r24, Y+23	; 0x17
    2c02:	98 8d       	ldd	r25, Y+24	; 0x18
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e8       	ldi	r20, 0x80	; 128
    2c0a:	5f e3       	ldi	r21, 0x3F	; 63
    2c0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c10:	88 23       	and	r24, r24
    2c12:	2c f4       	brge	.+10     	; 0x2c1e <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	9c 8b       	std	Y+20, r25	; 0x14
    2c1a:	8b 8b       	std	Y+19, r24	; 0x13
    2c1c:	3f c0       	rjmp	.+126    	; 0x2c9c <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2c1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c20:	7e 89       	ldd	r23, Y+22	; 0x16
    2c22:	8f 89       	ldd	r24, Y+23	; 0x17
    2c24:	98 8d       	ldd	r25, Y+24	; 0x18
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	3f ef       	ldi	r19, 0xFF	; 255
    2c2a:	4f e7       	ldi	r20, 0x7F	; 127
    2c2c:	57 e4       	ldi	r21, 0x47	; 71
    2c2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c32:	18 16       	cp	r1, r24
    2c34:	4c f5       	brge	.+82     	; 0x2c88 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c36:	69 8d       	ldd	r22, Y+25	; 0x19
    2c38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	40 e2       	ldi	r20, 0x20	; 32
    2c44:	51 e4       	ldi	r21, 0x41	; 65
    2c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	bc 01       	movw	r22, r24
    2c50:	cd 01       	movw	r24, r26
    2c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	9c 8b       	std	Y+20, r25	; 0x14
    2c5c:	8b 8b       	std	Y+19, r24	; 0x13
    2c5e:	0f c0       	rjmp	.+30     	; 0x2c7e <LCD_displayCharacter+0x2ac>
    2c60:	88 ec       	ldi	r24, 0xC8	; 200
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	9a 8b       	std	Y+18, r25	; 0x12
    2c66:	89 8b       	std	Y+17, r24	; 0x11
    2c68:	89 89       	ldd	r24, Y+17	; 0x11
    2c6a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c6c:	01 97       	sbiw	r24, 0x01	; 1
    2c6e:	f1 f7       	brne	.-4      	; 0x2c6c <LCD_displayCharacter+0x29a>
    2c70:	9a 8b       	std	Y+18, r25	; 0x12
    2c72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c74:	8b 89       	ldd	r24, Y+19	; 0x13
    2c76:	9c 89       	ldd	r25, Y+20	; 0x14
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	9c 8b       	std	Y+20, r25	; 0x14
    2c7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c80:	9c 89       	ldd	r25, Y+20	; 0x14
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	69 f7       	brne	.-38     	; 0x2c60 <LCD_displayCharacter+0x28e>
    2c86:	14 c0       	rjmp	.+40     	; 0x2cb0 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c88:	6d 89       	ldd	r22, Y+21	; 0x15
    2c8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	9c 8b       	std	Y+20, r25	; 0x14
    2c9a:	8b 8b       	std	Y+19, r24	; 0x13
    2c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca0:	98 8b       	std	Y+16, r25	; 0x10
    2ca2:	8f 87       	std	Y+15, r24	; 0x0f
    2ca4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ca6:	98 89       	ldd	r25, Y+16	; 0x10
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <LCD_displayCharacter+0x2d6>
    2cac:	98 8b       	std	Y+16, r25	; 0x10
    2cae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
#endif
	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2cb0:	82 e0       	ldi	r24, 0x02	; 2
    2cb2:	61 e0       	ldi	r22, 0x01	; 1
    2cb4:	40 e0       	ldi	r20, 0x00	; 0
    2cb6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	a0 e8       	ldi	r26, 0x80	; 128
    2cc0:	bf e3       	ldi	r27, 0x3F	; 63
    2cc2:	8b 87       	std	Y+11, r24	; 0x0b
    2cc4:	9c 87       	std	Y+12, r25	; 0x0c
    2cc6:	ad 87       	std	Y+13, r26	; 0x0d
    2cc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ccc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	4a ef       	ldi	r20, 0xFA	; 250
    2cd8:	54 e4       	ldi	r21, 0x44	; 68
    2cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	8f 83       	std	Y+7, r24	; 0x07
    2ce4:	98 87       	std	Y+8, r25	; 0x08
    2ce6:	a9 87       	std	Y+9, r26	; 0x09
    2ce8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cea:	6f 81       	ldd	r22, Y+7	; 0x07
    2cec:	78 85       	ldd	r23, Y+8	; 0x08
    2cee:	89 85       	ldd	r24, Y+9	; 0x09
    2cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf2:	20 e0       	ldi	r18, 0x00	; 0
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	40 e8       	ldi	r20, 0x80	; 128
    2cf8:	5f e3       	ldi	r21, 0x3F	; 63
    2cfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cfe:	88 23       	and	r24, r24
    2d00:	2c f4       	brge	.+10     	; 0x2d0c <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	9e 83       	std	Y+6, r25	; 0x06
    2d08:	8d 83       	std	Y+5, r24	; 0x05
    2d0a:	3f c0       	rjmp	.+126    	; 0x2d8a <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0e:	78 85       	ldd	r23, Y+8	; 0x08
    2d10:	89 85       	ldd	r24, Y+9	; 0x09
    2d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	3f ef       	ldi	r19, 0xFF	; 255
    2d18:	4f e7       	ldi	r20, 0x7F	; 127
    2d1a:	57 e4       	ldi	r21, 0x47	; 71
    2d1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d20:	18 16       	cp	r1, r24
    2d22:	4c f5       	brge	.+82     	; 0x2d76 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d2c:	20 e0       	ldi	r18, 0x00	; 0
    2d2e:	30 e0       	ldi	r19, 0x00	; 0
    2d30:	40 e2       	ldi	r20, 0x20	; 32
    2d32:	51 e4       	ldi	r21, 0x41	; 65
    2d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	bc 01       	movw	r22, r24
    2d3e:	cd 01       	movw	r24, r26
    2d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	9e 83       	std	Y+6, r25	; 0x06
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	0f c0       	rjmp	.+30     	; 0x2d6c <LCD_displayCharacter+0x39a>
    2d4e:	88 ec       	ldi	r24, 0xC8	; 200
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	9c 83       	std	Y+4, r25	; 0x04
    2d54:	8b 83       	std	Y+3, r24	; 0x03
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	f1 f7       	brne	.-4      	; 0x2d5a <LCD_displayCharacter+0x388>
    2d5e:	9c 83       	std	Y+4, r25	; 0x04
    2d60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d62:	8d 81       	ldd	r24, Y+5	; 0x05
    2d64:	9e 81       	ldd	r25, Y+6	; 0x06
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	9e 83       	std	Y+6, r25	; 0x06
    2d6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d70:	00 97       	sbiw	r24, 0x00	; 0
    2d72:	69 f7       	brne	.-38     	; 0x2d4e <LCD_displayCharacter+0x37c>
    2d74:	14 c0       	rjmp	.+40     	; 0x2d9e <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d76:	6f 81       	ldd	r22, Y+7	; 0x07
    2d78:	78 85       	ldd	r23, Y+8	; 0x08
    2d7a:	89 85       	ldd	r24, Y+9	; 0x09
    2d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	9e 83       	std	Y+6, r25	; 0x06
    2d88:	8d 83       	std	Y+5, r24	; 0x05
    2d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8e:	9a 83       	std	Y+2, r25	; 0x02
    2d90:	89 83       	std	Y+1, r24	; 0x01
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	9a 81       	ldd	r25, Y+2	; 0x02
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <LCD_displayCharacter+0x3c4>
    2d9a:	9a 83       	std	Y+2, r25	; 0x02
    2d9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */

}
    2d9e:	e9 96       	adiw	r28, 0x39	; 57
    2da0:	0f b6       	in	r0, 0x3f	; 63
    2da2:	f8 94       	cli
    2da4:	de bf       	out	0x3e, r29	; 62
    2da6:	0f be       	out	0x3f, r0	; 63
    2da8:	cd bf       	out	0x3d, r28	; 61
    2daa:	cf 91       	pop	r28
    2dac:	df 91       	pop	r29
    2dae:	08 95       	ret

00002db0 <LCD_displayString>:

/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str){
    2db0:	df 93       	push	r29
    2db2:	cf 93       	push	r28
    2db4:	00 d0       	rcall	.+0      	; 0x2db6 <LCD_displayString+0x6>
    2db6:	cd b7       	in	r28, 0x3d	; 61
    2db8:	de b7       	in	r29, 0x3e	; 62
    2dba:	9a 83       	std	Y+2, r25	; 0x02
    2dbc:	89 83       	std	Y+1, r24	; 0x01
    2dbe:	0a c0       	rjmp	.+20     	; 0x2dd4 <LCD_displayString+0x24>

	while(*Str != '\0'){
		LCD_displayCharacter(*Str);
    2dc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2dc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2dc4:	80 81       	ld	r24, Z
    2dc6:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <LCD_displayCharacter>
		Str++;
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dce:	01 96       	adiw	r24, 0x01	; 1
    2dd0:	9a 83       	std	Y+2, r25	; 0x02
    2dd2:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str){

	while(*Str != '\0'){
    2dd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2dd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2dd8:	80 81       	ld	r24, Z
    2dda:	88 23       	and	r24, r24
    2ddc:	89 f7       	brne	.-30     	; 0x2dc0 <LCD_displayString+0x10>
		LCD_displayCharacter(*Str);
		Str++;
	}
}
    2dde:	0f 90       	pop	r0
    2de0:	0f 90       	pop	r0
    2de2:	cf 91       	pop	r28
    2de4:	df 91       	pop	r29
    2de6:	08 95       	ret

00002de8 <LCD_displayStringRowColumn>:

/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str){
    2de8:	df 93       	push	r29
    2dea:	cf 93       	push	r28
    2dec:	00 d0       	rcall	.+0      	; 0x2dee <LCD_displayStringRowColumn+0x6>
    2dee:	00 d0       	rcall	.+0      	; 0x2df0 <LCD_displayStringRowColumn+0x8>
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	6a 83       	std	Y+2, r22	; 0x02
    2df8:	5c 83       	std	Y+4, r21	; 0x04
    2dfa:	4b 83       	std	Y+3, r20	; 0x03

	LCD_moveCursor(row, col);  /* go to to the required LCD position */
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	6a 81       	ldd	r22, Y+2	; 0x02
    2e00:	0e 94 0d 17 	call	0x2e1a	; 0x2e1a <LCD_moveCursor>
	LCD_displayString(Str);	   /* display the string */
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	9c 81       	ldd	r25, Y+4	; 0x04
    2e08:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
}
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
    2e10:	0f 90       	pop	r0
    2e12:	0f 90       	pop	r0
    2e14:	cf 91       	pop	r28
    2e16:	df 91       	pop	r29
    2e18:	08 95       	ret

00002e1a <LCD_moveCursor>:

/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    2e1a:	df 93       	push	r29
    2e1c:	cf 93       	push	r28
    2e1e:	00 d0       	rcall	.+0      	; 0x2e20 <LCD_moveCursor+0x6>
    2e20:	00 d0       	rcall	.+0      	; 0x2e22 <LCD_moveCursor+0x8>
    2e22:	0f 92       	push	r0
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
    2e28:	8a 83       	std	Y+2, r24	; 0x02
    2e2a:	6b 83       	std	Y+3, r22	; 0x03

	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2e:	28 2f       	mov	r18, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	3d 83       	std	Y+5, r19	; 0x05
    2e34:	2c 83       	std	Y+4, r18	; 0x04
    2e36:	8c 81       	ldd	r24, Y+4	; 0x04
    2e38:	9d 81       	ldd	r25, Y+5	; 0x05
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	91 05       	cpc	r25, r1
    2e3e:	c1 f0       	breq	.+48     	; 0x2e70 <LCD_moveCursor+0x56>
    2e40:	2c 81       	ldd	r18, Y+4	; 0x04
    2e42:	3d 81       	ldd	r19, Y+5	; 0x05
    2e44:	22 30       	cpi	r18, 0x02	; 2
    2e46:	31 05       	cpc	r19, r1
    2e48:	2c f4       	brge	.+10     	; 0x2e54 <LCD_moveCursor+0x3a>
    2e4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e4e:	00 97       	sbiw	r24, 0x00	; 0
    2e50:	61 f0       	breq	.+24     	; 0x2e6a <LCD_moveCursor+0x50>
    2e52:	19 c0       	rjmp	.+50     	; 0x2e86 <LCD_moveCursor+0x6c>
    2e54:	2c 81       	ldd	r18, Y+4	; 0x04
    2e56:	3d 81       	ldd	r19, Y+5	; 0x05
    2e58:	22 30       	cpi	r18, 0x02	; 2
    2e5a:	31 05       	cpc	r19, r1
    2e5c:	69 f0       	breq	.+26     	; 0x2e78 <LCD_moveCursor+0x5e>
    2e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e60:	9d 81       	ldd	r25, Y+5	; 0x05
    2e62:	83 30       	cpi	r24, 0x03	; 3
    2e64:	91 05       	cpc	r25, r1
    2e66:	61 f0       	breq	.+24     	; 0x2e80 <LCD_moveCursor+0x66>
    2e68:	0e c0       	rjmp	.+28     	; 0x2e86 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address = 0x00 + col;
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	89 83       	std	Y+1, r24	; 0x01
    2e6e:	0b c0       	rjmp	.+22     	; 0x2e86 <LCD_moveCursor+0x6c>
		break;

	case 1:
		lcd_memory_address = 0x40 + col;
    2e70:	8b 81       	ldd	r24, Y+3	; 0x03
    2e72:	80 5c       	subi	r24, 0xC0	; 192
    2e74:	89 83       	std	Y+1, r24	; 0x01
    2e76:	07 c0       	rjmp	.+14     	; 0x2e86 <LCD_moveCursor+0x6c>
		break;

	case 2:
		lcd_memory_address = 0x10 + col;
    2e78:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7a:	80 5f       	subi	r24, 0xF0	; 240
    2e7c:	89 83       	std	Y+1, r24	; 0x01
    2e7e:	03 c0       	rjmp	.+6      	; 0x2e86 <LCD_moveCursor+0x6c>
		break;

	case 3:
		lcd_memory_address = 0x50 + col;
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	80 5b       	subi	r24, 0xB0	; 176
    2e84:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_CURSOR_AT_BEGGINING_FIRST_LINE);
    2e86:	89 81       	ldd	r24, Y+1	; 0x01
    2e88:	80 68       	ori	r24, 0x80	; 128
    2e8a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LCD_sendCommand>
}
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	cf 91       	pop	r28
    2e9a:	df 91       	pop	r29
    2e9c:	08 95       	ret

00002e9e <LCD_intgerToString>:

/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data){
    2e9e:	df 93       	push	r29
    2ea0:	cf 93       	push	r28
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
    2ea6:	62 97       	sbiw	r28, 0x12	; 18
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	f8 94       	cli
    2eac:	de bf       	out	0x3e, r29	; 62
    2eae:	0f be       	out	0x3f, r0	; 63
    2eb0:	cd bf       	out	0x3d, r28	; 61
    2eb2:	9a 8b       	std	Y+18, r25	; 0x12
    2eb4:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2eb6:	89 89       	ldd	r24, Y+17	; 0x11
    2eb8:	9a 89       	ldd	r25, Y+18	; 0x12
    2eba:	9e 01       	movw	r18, r28
    2ebc:	2f 5f       	subi	r18, 0xFF	; 255
    2ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec0:	b9 01       	movw	r22, r18
    2ec2:	4a e0       	ldi	r20, 0x0A	; 10
    2ec4:	50 e0       	ldi	r21, 0x00	; 0
    2ec6:	0e 94 a3 1b 	call	0x3746	; 0x3746 <itoa>
	LCD_displayString(buff); /* Display the string */
    2eca:	ce 01       	movw	r24, r28
    2ecc:	01 96       	adiw	r24, 0x01	; 1
    2ece:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <LCD_displayString>
}
    2ed2:	62 96       	adiw	r28, 0x12	; 18
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	cf 91       	pop	r28
    2ee0:	df 91       	pop	r29
    2ee2:	08 95       	ret

00002ee4 <LCD_secondLine>:

/* Description :
 * Move to the beginning of second line
 */
void LCD_secondLine(void){
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CURSOR_AT_BEGGINING_SECOND_LINE); /* Send beggining of second line command */
    2eec:	80 ec       	ldi	r24, 0xC0	; 192
    2eee:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LCD_sendCommand>
}
    2ef2:	cf 91       	pop	r28
    2ef4:	df 91       	pop	r29
    2ef6:	08 95       	ret

00002ef8 <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void){
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <LCD_sendCommand>
}
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <__vector_11>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect){
    2f0c:	1f 92       	push	r1
    2f0e:	0f 92       	push	r0
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	0f 92       	push	r0
    2f14:	11 24       	eor	r1, r1
    2f16:	2f 93       	push	r18
    2f18:	3f 93       	push	r19
    2f1a:	4f 93       	push	r20
    2f1c:	5f 93       	push	r21
    2f1e:	6f 93       	push	r22
    2f20:	7f 93       	push	r23
    2f22:	8f 93       	push	r24
    2f24:	9f 93       	push	r25
    2f26:	af 93       	push	r26
    2f28:	bf 93       	push	r27
    2f2a:	ef 93       	push	r30
    2f2c:	ff 93       	push	r31
    2f2e:	df 93       	push	r29
    2f30:	cf 93       	push	r28
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL_PTR)
    2f36:	80 91 4a 01 	lds	r24, 0x014A
    2f3a:	90 91 4b 01 	lds	r25, 0x014B
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	29 f0       	breq	.+10     	; 0x2f4c <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2f42:	e0 91 4a 01 	lds	r30, 0x014A
    2f46:	f0 91 4b 01 	lds	r31, 0x014B
    2f4a:	09 95       	icall
	}
}
    2f4c:	cf 91       	pop	r28
    2f4e:	df 91       	pop	r29
    2f50:	ff 91       	pop	r31
    2f52:	ef 91       	pop	r30
    2f54:	bf 91       	pop	r27
    2f56:	af 91       	pop	r26
    2f58:	9f 91       	pop	r25
    2f5a:	8f 91       	pop	r24
    2f5c:	7f 91       	pop	r23
    2f5e:	6f 91       	pop	r22
    2f60:	5f 91       	pop	r21
    2f62:	4f 91       	pop	r20
    2f64:	3f 91       	pop	r19
    2f66:	2f 91       	pop	r18
    2f68:	0f 90       	pop	r0
    2f6a:	0f be       	out	0x3f, r0	; 63
    2f6c:	0f 90       	pop	r0
    2f6e:	1f 90       	pop	r1
    2f70:	18 95       	reti

00002f72 <__vector_10>:

ISR(TIMER0_COMP_vect){
    2f72:	1f 92       	push	r1
    2f74:	0f 92       	push	r0
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	0f 92       	push	r0
    2f7a:	11 24       	eor	r1, r1
    2f7c:	2f 93       	push	r18
    2f7e:	3f 93       	push	r19
    2f80:	4f 93       	push	r20
    2f82:	5f 93       	push	r21
    2f84:	6f 93       	push	r22
    2f86:	7f 93       	push	r23
    2f88:	8f 93       	push	r24
    2f8a:	9f 93       	push	r25
    2f8c:	af 93       	push	r26
    2f8e:	bf 93       	push	r27
    2f90:	ef 93       	push	r30
    2f92:	ff 93       	push	r31
    2f94:	df 93       	push	r29
    2f96:	cf 93       	push	r28
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER0_callBackPtr != NULL_PTR)
    2f9c:	80 91 4a 01 	lds	r24, 0x014A
    2fa0:	90 91 4b 01 	lds	r25, 0x014B
    2fa4:	00 97       	sbiw	r24, 0x00	; 0
    2fa6:	29 f0       	breq	.+10     	; 0x2fb2 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2fa8:	e0 91 4a 01 	lds	r30, 0x014A
    2fac:	f0 91 4b 01 	lds	r31, 0x014B
    2fb0:	09 95       	icall
	}
}
    2fb2:	cf 91       	pop	r28
    2fb4:	df 91       	pop	r29
    2fb6:	ff 91       	pop	r31
    2fb8:	ef 91       	pop	r30
    2fba:	bf 91       	pop	r27
    2fbc:	af 91       	pop	r26
    2fbe:	9f 91       	pop	r25
    2fc0:	8f 91       	pop	r24
    2fc2:	7f 91       	pop	r23
    2fc4:	6f 91       	pop	r22
    2fc6:	5f 91       	pop	r21
    2fc8:	4f 91       	pop	r20
    2fca:	3f 91       	pop	r19
    2fcc:	2f 91       	pop	r18
    2fce:	0f 90       	pop	r0
    2fd0:	0f be       	out	0x3f, r0	; 63
    2fd2:	0f 90       	pop	r0
    2fd4:	1f 90       	pop	r1
    2fd6:	18 95       	reti

00002fd8 <__vector_9>:

ISR(TIMER1_OVF_vect){
    2fd8:	1f 92       	push	r1
    2fda:	0f 92       	push	r0
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	0f 92       	push	r0
    2fe0:	11 24       	eor	r1, r1
    2fe2:	2f 93       	push	r18
    2fe4:	3f 93       	push	r19
    2fe6:	4f 93       	push	r20
    2fe8:	5f 93       	push	r21
    2fea:	6f 93       	push	r22
    2fec:	7f 93       	push	r23
    2fee:	8f 93       	push	r24
    2ff0:	9f 93       	push	r25
    2ff2:	af 93       	push	r26
    2ff4:	bf 93       	push	r27
    2ff6:	ef 93       	push	r30
    2ff8:	ff 93       	push	r31
    2ffa:	df 93       	push	r29
    2ffc:	cf 93       	push	r28
    2ffe:	cd b7       	in	r28, 0x3d	; 61
    3000:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    3002:	80 91 4c 01 	lds	r24, 0x014C
    3006:	90 91 4d 01 	lds	r25, 0x014D
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	29 f0       	breq	.+10     	; 0x3018 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    300e:	e0 91 4c 01 	lds	r30, 0x014C
    3012:	f0 91 4d 01 	lds	r31, 0x014D
    3016:	09 95       	icall
	}
}
    3018:	cf 91       	pop	r28
    301a:	df 91       	pop	r29
    301c:	ff 91       	pop	r31
    301e:	ef 91       	pop	r30
    3020:	bf 91       	pop	r27
    3022:	af 91       	pop	r26
    3024:	9f 91       	pop	r25
    3026:	8f 91       	pop	r24
    3028:	7f 91       	pop	r23
    302a:	6f 91       	pop	r22
    302c:	5f 91       	pop	r21
    302e:	4f 91       	pop	r20
    3030:	3f 91       	pop	r19
    3032:	2f 91       	pop	r18
    3034:	0f 90       	pop	r0
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	0f 90       	pop	r0
    303a:	1f 90       	pop	r1
    303c:	18 95       	reti

0000303e <__vector_7>:

ISR(TIMER1_COMPA_vect){
    303e:	1f 92       	push	r1
    3040:	0f 92       	push	r0
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	0f 92       	push	r0
    3046:	11 24       	eor	r1, r1
    3048:	2f 93       	push	r18
    304a:	3f 93       	push	r19
    304c:	4f 93       	push	r20
    304e:	5f 93       	push	r21
    3050:	6f 93       	push	r22
    3052:	7f 93       	push	r23
    3054:	8f 93       	push	r24
    3056:	9f 93       	push	r25
    3058:	af 93       	push	r26
    305a:	bf 93       	push	r27
    305c:	ef 93       	push	r30
    305e:	ff 93       	push	r31
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER1_callBackPtr != NULL_PTR)
    3068:	80 91 4c 01 	lds	r24, 0x014C
    306c:	90 91 4d 01 	lds	r25, 0x014D
    3070:	00 97       	sbiw	r24, 0x00	; 0
    3072:	29 f0       	breq	.+10     	; 0x307e <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3074:	e0 91 4c 01 	lds	r30, 0x014C
    3078:	f0 91 4d 01 	lds	r31, 0x014D
    307c:	09 95       	icall
	}
}
    307e:	cf 91       	pop	r28
    3080:	df 91       	pop	r29
    3082:	ff 91       	pop	r31
    3084:	ef 91       	pop	r30
    3086:	bf 91       	pop	r27
    3088:	af 91       	pop	r26
    308a:	9f 91       	pop	r25
    308c:	8f 91       	pop	r24
    308e:	7f 91       	pop	r23
    3090:	6f 91       	pop	r22
    3092:	5f 91       	pop	r21
    3094:	4f 91       	pop	r20
    3096:	3f 91       	pop	r19
    3098:	2f 91       	pop	r18
    309a:	0f 90       	pop	r0
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	0f 90       	pop	r0
    30a0:	1f 90       	pop	r1
    30a2:	18 95       	reti

000030a4 <__vector_5>:

ISR(TIMER2_OVF_vect){
    30a4:	1f 92       	push	r1
    30a6:	0f 92       	push	r0
    30a8:	0f b6       	in	r0, 0x3f	; 63
    30aa:	0f 92       	push	r0
    30ac:	11 24       	eor	r1, r1
    30ae:	2f 93       	push	r18
    30b0:	3f 93       	push	r19
    30b2:	4f 93       	push	r20
    30b4:	5f 93       	push	r21
    30b6:	6f 93       	push	r22
    30b8:	7f 93       	push	r23
    30ba:	8f 93       	push	r24
    30bc:	9f 93       	push	r25
    30be:	af 93       	push	r26
    30c0:	bf 93       	push	r27
    30c2:	ef 93       	push	r30
    30c4:	ff 93       	push	r31
    30c6:	df 93       	push	r29
    30c8:	cf 93       	push	r28
    30ca:	cd b7       	in	r28, 0x3d	; 61
    30cc:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER2_callBackPtr != NULL_PTR)
    30ce:	80 91 4e 01 	lds	r24, 0x014E
    30d2:	90 91 4f 01 	lds	r25, 0x014F
    30d6:	00 97       	sbiw	r24, 0x00	; 0
    30d8:	29 f0       	breq	.+10     	; 0x30e4 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    30da:	e0 91 4e 01 	lds	r30, 0x014E
    30de:	f0 91 4f 01 	lds	r31, 0x014F
    30e2:	09 95       	icall
	}
}
    30e4:	cf 91       	pop	r28
    30e6:	df 91       	pop	r29
    30e8:	ff 91       	pop	r31
    30ea:	ef 91       	pop	r30
    30ec:	bf 91       	pop	r27
    30ee:	af 91       	pop	r26
    30f0:	9f 91       	pop	r25
    30f2:	8f 91       	pop	r24
    30f4:	7f 91       	pop	r23
    30f6:	6f 91       	pop	r22
    30f8:	5f 91       	pop	r21
    30fa:	4f 91       	pop	r20
    30fc:	3f 91       	pop	r19
    30fe:	2f 91       	pop	r18
    3100:	0f 90       	pop	r0
    3102:	0f be       	out	0x3f, r0	; 63
    3104:	0f 90       	pop	r0
    3106:	1f 90       	pop	r1
    3108:	18 95       	reti

0000310a <__vector_4>:

ISR(TIMER2_COMP_vect){
    310a:	1f 92       	push	r1
    310c:	0f 92       	push	r0
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	0f 92       	push	r0
    3112:	11 24       	eor	r1, r1
    3114:	2f 93       	push	r18
    3116:	3f 93       	push	r19
    3118:	4f 93       	push	r20
    311a:	5f 93       	push	r21
    311c:	6f 93       	push	r22
    311e:	7f 93       	push	r23
    3120:	8f 93       	push	r24
    3122:	9f 93       	push	r25
    3124:	af 93       	push	r26
    3126:	bf 93       	push	r27
    3128:	ef 93       	push	r30
    312a:	ff 93       	push	r31
    312c:	df 93       	push	r29
    312e:	cf 93       	push	r28
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
	if(g_TIMER2_callBackPtr != NULL_PTR)
    3134:	80 91 4e 01 	lds	r24, 0x014E
    3138:	90 91 4f 01 	lds	r25, 0x014F
    313c:	00 97       	sbiw	r24, 0x00	; 0
    313e:	29 f0       	breq	.+10     	; 0x314a <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_TIMER2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3140:	e0 91 4e 01 	lds	r30, 0x014E
    3144:	f0 91 4f 01 	lds	r31, 0x014F
    3148:	09 95       	icall
	}
}
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	ff 91       	pop	r31
    3150:	ef 91       	pop	r30
    3152:	bf 91       	pop	r27
    3154:	af 91       	pop	r26
    3156:	9f 91       	pop	r25
    3158:	8f 91       	pop	r24
    315a:	7f 91       	pop	r23
    315c:	6f 91       	pop	r22
    315e:	5f 91       	pop	r21
    3160:	4f 91       	pop	r20
    3162:	3f 91       	pop	r19
    3164:	2f 91       	pop	r18
    3166:	0f 90       	pop	r0
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	0f 90       	pop	r0
    316c:	1f 90       	pop	r1
    316e:	18 95       	reti

00003170 <Timer_init>:
 * Description: Function to initialize the Timer driver
   Inputs: pointer to the configuration structure with type Timer_ConfigType.
   Return: None
 */
void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    3170:	df 93       	push	r29
    3172:	cf 93       	push	r28
    3174:	00 d0       	rcall	.+0      	; 0x3176 <Timer_init+0x6>
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	9a 83       	std	Y+2, r25	; 0x02
    317c:	89 83       	std	Y+1, r24	; 0x01
	if (Config_Ptr ->timer_ID == TIMER0)
    317e:	e9 81       	ldd	r30, Y+1	; 0x01
    3180:	fa 81       	ldd	r31, Y+2	; 0x02
    3182:	84 81       	ldd	r24, Z+4	; 0x04
    3184:	88 23       	and	r24, r24
    3186:	09 f0       	breq	.+2      	; 0x318a <Timer_init+0x1a>
    3188:	55 c0       	rjmp	.+170    	; 0x3234 <Timer_init+0xc4>
	{
		/* configure  WGM01:0 */
		TCCR0 = (TCCR0 & 0xB7) | (((Config_Ptr ->timer_mode) & 0x02) <<2) | (((Config_Ptr ->timer_mode) & 0x01) <<7);
    318a:	a3 e5       	ldi	r26, 0x53	; 83
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	e3 e5       	ldi	r30, 0x53	; 83
    3190:	f0 e0       	ldi	r31, 0x00	; 0
    3192:	80 81       	ld	r24, Z
    3194:	28 2f       	mov	r18, r24
    3196:	27 7b       	andi	r18, 0xB7	; 183
    3198:	e9 81       	ldd	r30, Y+1	; 0x01
    319a:	fa 81       	ldd	r31, Y+2	; 0x02
    319c:	86 81       	ldd	r24, Z+6	; 0x06
    319e:	88 2f       	mov	r24, r24
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	82 70       	andi	r24, 0x02	; 2
    31a4:	90 70       	andi	r25, 0x00	; 0
    31a6:	88 0f       	add	r24, r24
    31a8:	99 1f       	adc	r25, r25
    31aa:	88 0f       	add	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	28 2b       	or	r18, r24
    31b0:	e9 81       	ldd	r30, Y+1	; 0x01
    31b2:	fa 81       	ldd	r31, Y+2	; 0x02
    31b4:	86 81       	ldd	r24, Z+6	; 0x06
    31b6:	88 2f       	mov	r24, r24
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	96 95       	lsr	r25
    31bc:	98 2f       	mov	r25, r24
    31be:	88 27       	eor	r24, r24
    31c0:	97 95       	ror	r25
    31c2:	87 95       	ror	r24
    31c4:	82 2b       	or	r24, r18
    31c6:	8c 93       	st	X, r24
		/* Force Output Compare Match when PWM is disabled */
		TCCR0 = (TCCR0 & 0x7F) | (0x01 << 7);		/*FOC0*/
    31c8:	a3 e5       	ldi	r26, 0x53	; 83
    31ca:	b0 e0       	ldi	r27, 0x00	; 0
    31cc:	e3 e5       	ldi	r30, 0x53	; 83
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	80 81       	ld	r24, Z
    31d2:	80 68       	ori	r24, 0x80	; 128
    31d4:	8c 93       	st	X, r24

		if (Config_Ptr -> timer_mode == CTC)
    31d6:	e9 81       	ldd	r30, Y+1	; 0x01
    31d8:	fa 81       	ldd	r31, Y+2	; 0x02
    31da:	86 81       	ldd	r24, Z+6	; 0x06
    31dc:	82 30       	cpi	r24, 0x02	; 2
    31de:	79 f4       	brne	.+30     	; 0x31fe <Timer_init+0x8e>
		{
			OCR0 = Config_Ptr -> timer_compare_MatchValue;
    31e0:	ac e5       	ldi	r26, 0x5C	; 92
    31e2:	b0 e0       	ldi	r27, 0x00	; 0
    31e4:	e9 81       	ldd	r30, Y+1	; 0x01
    31e6:	fa 81       	ldd	r31, Y+2	; 0x02
    31e8:	82 81       	ldd	r24, Z+2	; 0x02
    31ea:	93 81       	ldd	r25, Z+3	; 0x03
    31ec:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    31ee:	a9 e5       	ldi	r26, 0x59	; 89
    31f0:	b0 e0       	ldi	r27, 0x00	; 0
    31f2:	e9 e5       	ldi	r30, 0x59	; 89
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	80 81       	ld	r24, Z
    31f8:	82 60       	ori	r24, 0x02	; 2
    31fa:	8c 93       	st	X, r24
    31fc:	07 c0       	rjmp	.+14     	; 0x320c <Timer_init+0x9c>
		}
		else{
			TIMSK |= (1<<TOIE0);   /*enables the interrupt */
    31fe:	a9 e5       	ldi	r26, 0x59	; 89
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	e9 e5       	ldi	r30, 0x59	; 89
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	80 81       	ld	r24, Z
    3208:	81 60       	ori	r24, 0x01	; 1
    320a:	8c 93       	st	X, r24
		}

		TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr -> timer_clock);   /* Set Prescaler */
    320c:	a3 e5       	ldi	r26, 0x53	; 83
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	e3 e5       	ldi	r30, 0x53	; 83
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	80 81       	ld	r24, Z
    3216:	98 2f       	mov	r25, r24
    3218:	98 7f       	andi	r25, 0xF8	; 248
    321a:	e9 81       	ldd	r30, Y+1	; 0x01
    321c:	fa 81       	ldd	r31, Y+2	; 0x02
    321e:	85 81       	ldd	r24, Z+5	; 0x05
    3220:	89 2b       	or	r24, r25
    3222:	8c 93       	st	X, r24

		TCNT0 = Config_Ptr -> timer_InitialValue;
    3224:	a2 e5       	ldi	r26, 0x52	; 82
    3226:	b0 e0       	ldi	r27, 0x00	; 0
    3228:	e9 81       	ldd	r30, Y+1	; 0x01
    322a:	fa 81       	ldd	r31, Y+2	; 0x02
    322c:	80 81       	ld	r24, Z
    322e:	91 81       	ldd	r25, Z+1	; 0x01
    3230:	8c 93       	st	X, r24
    3232:	a4 c0       	rjmp	.+328    	; 0x337c <Timer_init+0x20c>
	}
	else if (Config_Ptr ->timer_ID == TIMER1)
    3234:	e9 81       	ldd	r30, Y+1	; 0x01
    3236:	fa 81       	ldd	r31, Y+2	; 0x02
    3238:	84 81       	ldd	r24, Z+4	; 0x04
    323a:	81 30       	cpi	r24, 0x01	; 1
    323c:	09 f0       	breq	.+2      	; 0x3240 <Timer_init+0xd0>
    323e:	44 c0       	rjmp	.+136    	; 0x32c8 <Timer_init+0x158>
	{
		TCNT1 = Config_Ptr -> timer_InitialValue;
    3240:	ac e4       	ldi	r26, 0x4C	; 76
    3242:	b0 e0       	ldi	r27, 0x00	; 0
    3244:	e9 81       	ldd	r30, Y+1	; 0x01
    3246:	fa 81       	ldd	r31, Y+2	; 0x02
    3248:	80 81       	ld	r24, Z
    324a:	91 81       	ldd	r25, Z+1	; 0x01
    324c:	11 96       	adiw	r26, 0x01	; 1
    324e:	9c 93       	st	X, r25
    3250:	8e 93       	st	-X, r24

		/* WGM0:1 are always 0 for normal and compare mode */

		if(Config_Ptr -> timer_mode == CTC)
    3252:	e9 81       	ldd	r30, Y+1	; 0x01
    3254:	fa 81       	ldd	r31, Y+2	; 0x02
    3256:	86 81       	ldd	r24, Z+6	; 0x06
    3258:	82 30       	cpi	r24, 0x02	; 2
    325a:	c9 f4       	brne	.+50     	; 0x328e <Timer_init+0x11e>
		{
			TCCR1A = (1<<FOC1A);		/* Force Output Compare match */
    325c:	ef e4       	ldi	r30, 0x4F	; 79
    325e:	f0 e0       	ldi	r31, 0x00	; 0
    3260:	88 e0       	ldi	r24, 0x08	; 8
    3262:	80 83       	st	Z, r24
			TCCR1B = (1<<WGM12);
    3264:	ee e4       	ldi	r30, 0x4E	; 78
    3266:	f0 e0       	ldi	r31, 0x00	; 0
    3268:	88 e0       	ldi	r24, 0x08	; 8
    326a:	80 83       	st	Z, r24
			OCR1A = Config_Ptr -> timer_compare_MatchValue;
    326c:	aa e4       	ldi	r26, 0x4A	; 74
    326e:	b0 e0       	ldi	r27, 0x00	; 0
    3270:	e9 81       	ldd	r30, Y+1	; 0x01
    3272:	fa 81       	ldd	r31, Y+2	; 0x02
    3274:	82 81       	ldd	r24, Z+2	; 0x02
    3276:	93 81       	ldd	r25, Z+3	; 0x03
    3278:	11 96       	adiw	r26, 0x01	; 1
    327a:	9c 93       	st	X, r25
    327c:	8e 93       	st	-X, r24
			TIMSK |= (1<<OCIE1A);
    327e:	a9 e5       	ldi	r26, 0x59	; 89
    3280:	b0 e0       	ldi	r27, 0x00	; 0
    3282:	e9 e5       	ldi	r30, 0x59	; 89
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	80 81       	ld	r24, Z
    3288:	80 61       	ori	r24, 0x10	; 16
    328a:	8c 93       	st	X, r24
    328c:	10 c0       	rjmp	.+32     	; 0x32ae <Timer_init+0x13e>
		}
		else if(Config_Ptr -> timer_mode == NORMAL)
    328e:	e9 81       	ldd	r30, Y+1	; 0x01
    3290:	fa 81       	ldd	r31, Y+2	; 0x02
    3292:	86 81       	ldd	r24, Z+6	; 0x06
    3294:	88 23       	and	r24, r24
    3296:	59 f4       	brne	.+22     	; 0x32ae <Timer_init+0x13e>
		{
			TCCR1A = (1<<FOC1A);		/* Force Output Compare match */
    3298:	ef e4       	ldi	r30, 0x4F	; 79
    329a:	f0 e0       	ldi	r31, 0x00	; 0
    329c:	88 e0       	ldi	r24, 0x08	; 8
    329e:	80 83       	st	Z, r24
			TIMSK |= (1<<TOIE1);
    32a0:	a9 e5       	ldi	r26, 0x59	; 89
    32a2:	b0 e0       	ldi	r27, 0x00	; 0
    32a4:	e9 e5       	ldi	r30, 0x59	; 89
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
    32aa:	84 60       	ori	r24, 0x04	; 4
    32ac:	8c 93       	st	X, r24
		}
		TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr -> timer_clock);
    32ae:	ae e4       	ldi	r26, 0x4E	; 78
    32b0:	b0 e0       	ldi	r27, 0x00	; 0
    32b2:	ee e4       	ldi	r30, 0x4E	; 78
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	80 81       	ld	r24, Z
    32b8:	98 2f       	mov	r25, r24
    32ba:	98 7f       	andi	r25, 0xF8	; 248
    32bc:	e9 81       	ldd	r30, Y+1	; 0x01
    32be:	fa 81       	ldd	r31, Y+2	; 0x02
    32c0:	85 81       	ldd	r24, Z+5	; 0x05
    32c2:	89 2b       	or	r24, r25
    32c4:	8c 93       	st	X, r24
    32c6:	5a c0       	rjmp	.+180    	; 0x337c <Timer_init+0x20c>

	}
	else if (Config_Ptr -> timer_ID == TIMER2)
    32c8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ca:	fa 81       	ldd	r31, Y+2	; 0x02
    32cc:	84 81       	ldd	r24, Z+4	; 0x04
    32ce:	82 30       	cpi	r24, 0x02	; 2
    32d0:	09 f0       	breq	.+2      	; 0x32d4 <Timer_init+0x164>
    32d2:	54 c0       	rjmp	.+168    	; 0x337c <Timer_init+0x20c>
	{
		/* configure  WGM01:0 */
		TCCR2 = (TCCR2 & 0xB7) | (((Config_Ptr ->timer_mode) & 0x02) <<2) | (((Config_Ptr ->timer_mode) & 0x01) <<7);
    32d4:	a5 e4       	ldi	r26, 0x45	; 69
    32d6:	b0 e0       	ldi	r27, 0x00	; 0
    32d8:	e5 e4       	ldi	r30, 0x45	; 69
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	80 81       	ld	r24, Z
    32de:	28 2f       	mov	r18, r24
    32e0:	27 7b       	andi	r18, 0xB7	; 183
    32e2:	e9 81       	ldd	r30, Y+1	; 0x01
    32e4:	fa 81       	ldd	r31, Y+2	; 0x02
    32e6:	86 81       	ldd	r24, Z+6	; 0x06
    32e8:	88 2f       	mov	r24, r24
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	82 70       	andi	r24, 0x02	; 2
    32ee:	90 70       	andi	r25, 0x00	; 0
    32f0:	88 0f       	add	r24, r24
    32f2:	99 1f       	adc	r25, r25
    32f4:	88 0f       	add	r24, r24
    32f6:	99 1f       	adc	r25, r25
    32f8:	28 2b       	or	r18, r24
    32fa:	e9 81       	ldd	r30, Y+1	; 0x01
    32fc:	fa 81       	ldd	r31, Y+2	; 0x02
    32fe:	86 81       	ldd	r24, Z+6	; 0x06
    3300:	88 2f       	mov	r24, r24
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	96 95       	lsr	r25
    3306:	98 2f       	mov	r25, r24
    3308:	88 27       	eor	r24, r24
    330a:	97 95       	ror	r25
    330c:	87 95       	ror	r24
    330e:	82 2b       	or	r24, r18
    3310:	8c 93       	st	X, r24
		/* Force Output Compare Match when PWM is disabled */
		TCCR2 = (TCCR2 & 0x7F) | (0x01 << 7);		/*FOC2*/
    3312:	a5 e4       	ldi	r26, 0x45	; 69
    3314:	b0 e0       	ldi	r27, 0x00	; 0
    3316:	e5 e4       	ldi	r30, 0x45	; 69
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	80 81       	ld	r24, Z
    331c:	80 68       	ori	r24, 0x80	; 128
    331e:	8c 93       	st	X, r24
		if (Config_Ptr -> timer_mode == CTC)
    3320:	e9 81       	ldd	r30, Y+1	; 0x01
    3322:	fa 81       	ldd	r31, Y+2	; 0x02
    3324:	86 81       	ldd	r24, Z+6	; 0x06
    3326:	82 30       	cpi	r24, 0x02	; 2
    3328:	79 f4       	brne	.+30     	; 0x3348 <Timer_init+0x1d8>
		{
			OCR2 = Config_Ptr -> timer_compare_MatchValue;
    332a:	a3 e4       	ldi	r26, 0x43	; 67
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	e9 81       	ldd	r30, Y+1	; 0x01
    3330:	fa 81       	ldd	r31, Y+2	; 0x02
    3332:	82 81       	ldd	r24, Z+2	; 0x02
    3334:	93 81       	ldd	r25, Z+3	; 0x03
    3336:	8c 93       	st	X, r24
			TIMSK |= (1<<OCIE2); // Enable Timer0 Compare Interrupt
    3338:	a9 e5       	ldi	r26, 0x59	; 89
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	e9 e5       	ldi	r30, 0x59	; 89
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	80 68       	ori	r24, 0x80	; 128
    3344:	8c 93       	st	X, r24
    3346:	07 c0       	rjmp	.+14     	; 0x3356 <Timer_init+0x1e6>
		}
		else{
			TIMSK |= (1<<TOIE2);   /*enables the interrupt */
    3348:	a9 e5       	ldi	r26, 0x59	; 89
    334a:	b0 e0       	ldi	r27, 0x00	; 0
    334c:	e9 e5       	ldi	r30, 0x59	; 89
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	80 81       	ld	r24, Z
    3352:	80 64       	ori	r24, 0x40	; 64
    3354:	8c 93       	st	X, r24
		}

		TCCR2 = (TCCR2 & 0xF8) | (Config_Ptr -> timer_clock);   /* Set Prescaler */
    3356:	a5 e4       	ldi	r26, 0x45	; 69
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	e5 e4       	ldi	r30, 0x45	; 69
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	80 81       	ld	r24, Z
    3360:	98 2f       	mov	r25, r24
    3362:	98 7f       	andi	r25, 0xF8	; 248
    3364:	e9 81       	ldd	r30, Y+1	; 0x01
    3366:	fa 81       	ldd	r31, Y+2	; 0x02
    3368:	85 81       	ldd	r24, Z+5	; 0x05
    336a:	89 2b       	or	r24, r25
    336c:	8c 93       	st	X, r24

		TCNT2 = Config_Ptr -> timer_InitialValue;
    336e:	a4 e4       	ldi	r26, 0x44	; 68
    3370:	b0 e0       	ldi	r27, 0x00	; 0
    3372:	e9 81       	ldd	r30, Y+1	; 0x01
    3374:	fa 81       	ldd	r31, Y+2	; 0x02
    3376:	80 81       	ld	r24, Z
    3378:	91 81       	ldd	r25, Z+1	; 0x01
    337a:	8c 93       	st	X, r24
	}
}
    337c:	0f 90       	pop	r0
    337e:	0f 90       	pop	r0
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	08 95       	ret

00003386 <Timer_deInit>:
 * Description: Function to disable the Timer via Timer_ID.
 * Inputs: Timer_ID
 *  Return: None
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	00 d0       	rcall	.+0      	; 0x338c <Timer_deInit+0x6>
    338c:	0f 92       	push	r0
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	89 83       	std	Y+1, r24	; 0x01
	switch (timer_type)
    3394:	89 81       	ldd	r24, Y+1	; 0x01
    3396:	28 2f       	mov	r18, r24
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	3b 83       	std	Y+3, r19	; 0x03
    339c:	2a 83       	std	Y+2, r18	; 0x02
    339e:	8a 81       	ldd	r24, Y+2	; 0x02
    33a0:	9b 81       	ldd	r25, Y+3	; 0x03
    33a2:	81 30       	cpi	r24, 0x01	; 1
    33a4:	91 05       	cpc	r25, r1
    33a6:	f9 f0       	breq	.+62     	; 0x33e6 <Timer_deInit+0x60>
    33a8:	2a 81       	ldd	r18, Y+2	; 0x02
    33aa:	3b 81       	ldd	r19, Y+3	; 0x03
    33ac:	22 30       	cpi	r18, 0x02	; 2
    33ae:	31 05       	cpc	r19, r1
    33b0:	99 f1       	breq	.+102    	; 0x3418 <Timer_deInit+0x92>
    33b2:	8a 81       	ldd	r24, Y+2	; 0x02
    33b4:	9b 81       	ldd	r25, Y+3	; 0x03
    33b6:	00 97       	sbiw	r24, 0x00	; 0
    33b8:	09 f0       	breq	.+2      	; 0x33bc <Timer_deInit+0x36>
    33ba:	42 c0       	rjmp	.+132    	; 0x3440 <Timer_deInit+0xba>
	{
	case TIMER0:
		TCCR0 = 0;
    33bc:	e3 e5       	ldi	r30, 0x53	; 83
    33be:	f0 e0       	ldi	r31, 0x00	; 0
    33c0:	10 82       	st	Z, r1
		TCNT0 = 0;
    33c2:	e2 e5       	ldi	r30, 0x52	; 82
    33c4:	f0 e0       	ldi	r31, 0x00	; 0
    33c6:	10 82       	st	Z, r1
		TIMSK &= ~(1<<OCIE0);
    33c8:	a9 e5       	ldi	r26, 0x59	; 89
    33ca:	b0 e0       	ldi	r27, 0x00	; 0
    33cc:	e9 e5       	ldi	r30, 0x59	; 89
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	80 81       	ld	r24, Z
    33d2:	8d 7f       	andi	r24, 0xFD	; 253
    33d4:	8c 93       	st	X, r24
		TIMSK &= ~(1<<TOIE0);
    33d6:	a9 e5       	ldi	r26, 0x59	; 89
    33d8:	b0 e0       	ldi	r27, 0x00	; 0
    33da:	e9 e5       	ldi	r30, 0x59	; 89
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	80 81       	ld	r24, Z
    33e0:	8e 7f       	andi	r24, 0xFE	; 254
    33e2:	8c 93       	st	X, r24
    33e4:	2d c0       	rjmp	.+90     	; 0x3440 <Timer_deInit+0xba>
		break;

	case TIMER1:
		TCCR1A = 0;
    33e6:	ef e4       	ldi	r30, 0x4F	; 79
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	10 82       	st	Z, r1
		TCCR1B = 0;
    33ec:	ee e4       	ldi	r30, 0x4E	; 78
    33ee:	f0 e0       	ldi	r31, 0x00	; 0
    33f0:	10 82       	st	Z, r1
		TCNT1 = 0;
    33f2:	ec e4       	ldi	r30, 0x4C	; 76
    33f4:	f0 e0       	ldi	r31, 0x00	; 0
    33f6:	11 82       	std	Z+1, r1	; 0x01
    33f8:	10 82       	st	Z, r1
		TIMSK &= ~(1<<OCIE1A);
    33fa:	a9 e5       	ldi	r26, 0x59	; 89
    33fc:	b0 e0       	ldi	r27, 0x00	; 0
    33fe:	e9 e5       	ldi	r30, 0x59	; 89
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	80 81       	ld	r24, Z
    3404:	8f 7e       	andi	r24, 0xEF	; 239
    3406:	8c 93       	st	X, r24
		TIMSK &= ~(1<<TOIE1);
    3408:	a9 e5       	ldi	r26, 0x59	; 89
    340a:	b0 e0       	ldi	r27, 0x00	; 0
    340c:	e9 e5       	ldi	r30, 0x59	; 89
    340e:	f0 e0       	ldi	r31, 0x00	; 0
    3410:	80 81       	ld	r24, Z
    3412:	8b 7f       	andi	r24, 0xFB	; 251
    3414:	8c 93       	st	X, r24
    3416:	14 c0       	rjmp	.+40     	; 0x3440 <Timer_deInit+0xba>
		break;

	case TIMER2:
		TCCR2 = 0;
    3418:	e5 e4       	ldi	r30, 0x45	; 69
    341a:	f0 e0       	ldi	r31, 0x00	; 0
    341c:	10 82       	st	Z, r1
		TCNT2 = 0;
    341e:	e4 e4       	ldi	r30, 0x44	; 68
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	10 82       	st	Z, r1
		TIMSK &= ~(1<<OCIE2);
    3424:	a9 e5       	ldi	r26, 0x59	; 89
    3426:	b0 e0       	ldi	r27, 0x00	; 0
    3428:	e9 e5       	ldi	r30, 0x59	; 89
    342a:	f0 e0       	ldi	r31, 0x00	; 0
    342c:	80 81       	ld	r24, Z
    342e:	8f 77       	andi	r24, 0x7F	; 127
    3430:	8c 93       	st	X, r24
		TIMSK &= ~(1<<TOIE2);
    3432:	a9 e5       	ldi	r26, 0x59	; 89
    3434:	b0 e0       	ldi	r27, 0x00	; 0
    3436:	e9 e5       	ldi	r30, 0x59	; 89
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	80 81       	ld	r24, Z
    343c:	8f 7b       	andi	r24, 0xBF	; 191
    343e:	8c 93       	st	X, r24
		break;
	}
}
    3440:	0f 90       	pop	r0
    3442:	0f 90       	pop	r0
    3444:	0f 90       	pop	r0
    3446:	cf 91       	pop	r28
    3448:	df 91       	pop	r29
    344a:	08 95       	ret

0000344c <Timer_setCallBack>:
 * Description: Function to set the Call Back function address to the required Timer.
 * Inputs: pointer to Call Back function and Timer Id you want to set The Callback to it.
 * Return: None
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID )
{
    344c:	df 93       	push	r29
    344e:	cf 93       	push	r28
    3450:	00 d0       	rcall	.+0      	; 0x3452 <Timer_setCallBack+0x6>
    3452:	00 d0       	rcall	.+0      	; 0x3454 <Timer_setCallBack+0x8>
    3454:	0f 92       	push	r0
    3456:	cd b7       	in	r28, 0x3d	; 61
    3458:	de b7       	in	r29, 0x3e	; 62
    345a:	9a 83       	std	Y+2, r25	; 0x02
    345c:	89 83       	std	Y+1, r24	; 0x01
    345e:	6b 83       	std	Y+3, r22	; 0x03
	/* Save the address of the Call back function in a global variable */
	switch (a_timer_ID) {
    3460:	8b 81       	ldd	r24, Y+3	; 0x03
    3462:	28 2f       	mov	r18, r24
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	3d 83       	std	Y+5, r19	; 0x05
    3468:	2c 83       	std	Y+4, r18	; 0x04
    346a:	8c 81       	ldd	r24, Y+4	; 0x04
    346c:	9d 81       	ldd	r25, Y+5	; 0x05
    346e:	81 30       	cpi	r24, 0x01	; 1
    3470:	91 05       	cpc	r25, r1
    3472:	81 f0       	breq	.+32     	; 0x3494 <Timer_setCallBack+0x48>
    3474:	2c 81       	ldd	r18, Y+4	; 0x04
    3476:	3d 81       	ldd	r19, Y+5	; 0x05
    3478:	22 30       	cpi	r18, 0x02	; 2
    347a:	31 05       	cpc	r19, r1
    347c:	91 f0       	breq	.+36     	; 0x34a2 <Timer_setCallBack+0x56>
    347e:	8c 81       	ldd	r24, Y+4	; 0x04
    3480:	9d 81       	ldd	r25, Y+5	; 0x05
    3482:	00 97       	sbiw	r24, 0x00	; 0
    3484:	a1 f4       	brne	.+40     	; 0x34ae <Timer_setCallBack+0x62>
	case TIMER0:
		g_TIMER0_callBackPtr = a_ptr;
    3486:	89 81       	ldd	r24, Y+1	; 0x01
    3488:	9a 81       	ldd	r25, Y+2	; 0x02
    348a:	90 93 4b 01 	sts	0x014B, r25
    348e:	80 93 4a 01 	sts	0x014A, r24
    3492:	0d c0       	rjmp	.+26     	; 0x34ae <Timer_setCallBack+0x62>
		break;
	case TIMER1:
		g_TIMER1_callBackPtr = a_ptr;
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	9a 81       	ldd	r25, Y+2	; 0x02
    3498:	90 93 4d 01 	sts	0x014D, r25
    349c:	80 93 4c 01 	sts	0x014C, r24
    34a0:	06 c0       	rjmp	.+12     	; 0x34ae <Timer_setCallBack+0x62>
		break;
	case TIMER2:
		g_TIMER2_callBackPtr = a_ptr;
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	9a 81       	ldd	r25, Y+2	; 0x02
    34a6:	90 93 4f 01 	sts	0x014F, r25
    34aa:	80 93 4e 01 	sts	0x014E, r24
		break;
	}
}
    34ae:	0f 90       	pop	r0
    34b0:	0f 90       	pop	r0
    34b2:	0f 90       	pop	r0
    34b4:	0f 90       	pop	r0
    34b6:	0f 90       	pop	r0
    34b8:	cf 91       	pop	r28
    34ba:	df 91       	pop	r29
    34bc:	08 95       	ret

000034be <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Type)
{
    34be:	df 93       	push	r29
    34c0:	cf 93       	push	r28
    34c2:	00 d0       	rcall	.+0      	; 0x34c4 <UART_init+0x6>
    34c4:	00 d0       	rcall	.+0      	; 0x34c6 <UART_init+0x8>
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
    34ca:	9c 83       	std	Y+4, r25	; 0x04
    34cc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    34ce:	1a 82       	std	Y+2, r1	; 0x02
    34d0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    34d2:	eb e2       	ldi	r30, 0x2B	; 43
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	82 e0       	ldi	r24, 0x02	; 2
    34d8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    34da:	ea e2       	ldi	r30, 0x2A	; 42
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	88 e1       	ldi	r24, 0x18	; 24
    34e0:	80 83       	st	Z, r24
	if( Config_Type->bit_data == NINE_BIT)
    34e2:	eb 81       	ldd	r30, Y+3	; 0x03
    34e4:	fc 81       	ldd	r31, Y+4	; 0x04
    34e6:	80 81       	ld	r24, Z
    34e8:	87 30       	cpi	r24, 0x07	; 7
    34ea:	21 f4       	brne	.+8      	; 0x34f4 <UART_init+0x36>
		UCSRB = (1<<UCSZ2);
    34ec:	ea e2       	ldi	r30, 0x2A	; 42
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	84 e0       	ldi	r24, 0x04	; 4
    34f2:	80 83       	st	Z, r24
	 * UPM1:0 Based on the parity chose
	 * USBS   Based on number of stop bits
	 * UCSZ1:0 Based on data mode
	 * UCPOL = 0 Used with the Synchronous operation only
	 **********************************************************************/
	UCSRC = (1<<URSEL);
    34f4:	e0 e4       	ldi	r30, 0x40	; 64
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 e8       	ldi	r24, 0x80	; 128
    34fa:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | (Config_Type->parity << 4);   /* Parity */
    34fc:	a0 e4       	ldi	r26, 0x40	; 64
    34fe:	b0 e0       	ldi	r27, 0x00	; 0
    3500:	e0 e4       	ldi	r30, 0x40	; 64
    3502:	f0 e0       	ldi	r31, 0x00	; 0
    3504:	80 81       	ld	r24, Z
    3506:	28 2f       	mov	r18, r24
    3508:	2f 7c       	andi	r18, 0xCF	; 207
    350a:	eb 81       	ldd	r30, Y+3	; 0x03
    350c:	fc 81       	ldd	r31, Y+4	; 0x04
    350e:	81 81       	ldd	r24, Z+1	; 0x01
    3510:	88 2f       	mov	r24, r24
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	82 95       	swap	r24
    3516:	92 95       	swap	r25
    3518:	90 7f       	andi	r25, 0xF0	; 240
    351a:	98 27       	eor	r25, r24
    351c:	80 7f       	andi	r24, 0xF0	; 240
    351e:	98 27       	eor	r25, r24
    3520:	82 2b       	or	r24, r18
    3522:	8c 93       	st	X, r24
	SET_BIT(UCSRC,Config_Type->stop_bit);
    3524:	a0 e4       	ldi	r26, 0x40	; 64
    3526:	b0 e0       	ldi	r27, 0x00	; 0
    3528:	e0 e4       	ldi	r30, 0x40	; 64
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	80 81       	ld	r24, Z
    352e:	48 2f       	mov	r20, r24
    3530:	eb 81       	ldd	r30, Y+3	; 0x03
    3532:	fc 81       	ldd	r31, Y+4	; 0x04
    3534:	82 81       	ldd	r24, Z+2	; 0x02
    3536:	28 2f       	mov	r18, r24
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	02 c0       	rjmp	.+4      	; 0x3544 <UART_init+0x86>
    3540:	88 0f       	add	r24, r24
    3542:	99 1f       	adc	r25, r25
    3544:	2a 95       	dec	r18
    3546:	e2 f7       	brpl	.-8      	; 0x3540 <UART_init+0x82>
    3548:	84 2b       	or	r24, r20
    354a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (Config_Type->bit_data << 1);   /* Data Bit mode */
    354c:	a0 e4       	ldi	r26, 0x40	; 64
    354e:	b0 e0       	ldi	r27, 0x00	; 0
    3550:	e0 e4       	ldi	r30, 0x40	; 64
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	80 81       	ld	r24, Z
    3556:	28 2f       	mov	r18, r24
    3558:	29 7f       	andi	r18, 0xF9	; 249
    355a:	eb 81       	ldd	r30, Y+3	; 0x03
    355c:	fc 81       	ldd	r31, Y+4	; 0x04
    355e:	80 81       	ld	r24, Z
    3560:	88 2f       	mov	r24, r24
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	88 0f       	add	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	82 2b       	or	r24, r18
    356a:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Type->baud_rate * 8UL))) - 1);
    356c:	eb 81       	ldd	r30, Y+3	; 0x03
    356e:	fc 81       	ldd	r31, Y+4	; 0x04
    3570:	83 81       	ldd	r24, Z+3	; 0x03
    3572:	94 81       	ldd	r25, Z+4	; 0x04
    3574:	a5 81       	ldd	r26, Z+5	; 0x05
    3576:	b6 81       	ldd	r27, Z+6	; 0x06
    3578:	88 0f       	add	r24, r24
    357a:	99 1f       	adc	r25, r25
    357c:	aa 1f       	adc	r26, r26
    357e:	bb 1f       	adc	r27, r27
    3580:	88 0f       	add	r24, r24
    3582:	99 1f       	adc	r25, r25
    3584:	aa 1f       	adc	r26, r26
    3586:	bb 1f       	adc	r27, r27
    3588:	88 0f       	add	r24, r24
    358a:	99 1f       	adc	r25, r25
    358c:	aa 1f       	adc	r26, r26
    358e:	bb 1f       	adc	r27, r27
    3590:	9c 01       	movw	r18, r24
    3592:	ad 01       	movw	r20, r26
    3594:	80 e0       	ldi	r24, 0x00	; 0
    3596:	92 e1       	ldi	r25, 0x12	; 18
    3598:	aa e7       	ldi	r26, 0x7A	; 122
    359a:	b0 e0       	ldi	r27, 0x00	; 0
    359c:	bc 01       	movw	r22, r24
    359e:	cd 01       	movw	r24, r26
    35a0:	0e 94 4a 1b 	call	0x3694	; 0x3694 <__udivmodsi4>
    35a4:	da 01       	movw	r26, r20
    35a6:	c9 01       	movw	r24, r18
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	9a 83       	std	Y+2, r25	; 0x02
    35ac:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    35ae:	e0 e4       	ldi	r30, 0x40	; 64
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	89 81       	ldd	r24, Y+1	; 0x01
    35b4:	9a 81       	ldd	r25, Y+2	; 0x02
    35b6:	89 2f       	mov	r24, r25
    35b8:	99 27       	eor	r25, r25
    35ba:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    35bc:	e9 e2       	ldi	r30, 0x29	; 41
    35be:	f0 e0       	ldi	r31, 0x00	; 0
    35c0:	89 81       	ldd	r24, Y+1	; 0x01
    35c2:	80 83       	st	Z, r24
}
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	0f 90       	pop	r0
    35ca:	0f 90       	pop	r0
    35cc:	cf 91       	pop	r28
    35ce:	df 91       	pop	r29
    35d0:	08 95       	ret

000035d2 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    35d2:	df 93       	push	r29
    35d4:	cf 93       	push	r28
    35d6:	0f 92       	push	r0
    35d8:	cd b7       	in	r28, 0x3d	; 61
    35da:	de b7       	in	r29, 0x3e	; 62
    35dc:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    35de:	eb e2       	ldi	r30, 0x2B	; 43
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	80 81       	ld	r24, Z
    35e4:	88 2f       	mov	r24, r24
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	80 72       	andi	r24, 0x20	; 32
    35ea:	90 70       	andi	r25, 0x00	; 0
    35ec:	00 97       	sbiw	r24, 0x00	; 0
    35ee:	b9 f3       	breq	.-18     	; 0x35de <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    35f0:	ec e2       	ldi	r30, 0x2C	; 44
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	89 81       	ldd	r24, Y+1	; 0x01
    35f6:	80 83       	st	Z, r24
}
    35f8:	0f 90       	pop	r0
    35fa:	cf 91       	pop	r28
    35fc:	df 91       	pop	r29
    35fe:	08 95       	ret

00003600 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3600:	df 93       	push	r29
    3602:	cf 93       	push	r28
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA, RXC));
    3608:	eb e2       	ldi	r30, 0x2B	; 43
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	80 81       	ld	r24, Z
    360e:	88 23       	and	r24, r24
    3610:	dc f7       	brge	.-10     	; 0x3608 <UART_recieveByte+0x8>
	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3612:	ec e2       	ldi	r30, 0x2C	; 44
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	80 81       	ld	r24, Z
}
    3618:	cf 91       	pop	r28
    361a:	df 91       	pop	r29
    361c:	08 95       	ret

0000361e <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    361e:	df 93       	push	r29
    3620:	cf 93       	push	r28
    3622:	00 d0       	rcall	.+0      	; 0x3624 <UART_sendString+0x6>
    3624:	cd b7       	in	r28, 0x3d	; 61
    3626:	de b7       	in	r29, 0x3e	; 62
    3628:	9a 83       	std	Y+2, r25	; 0x02
    362a:	89 83       	std	Y+1, r24	; 0x01
    362c:	0a c0       	rjmp	.+20     	; 0x3642 <UART_sendString+0x24>
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
    362e:	e9 81       	ldd	r30, Y+1	; 0x01
    3630:	fa 81       	ldd	r31, Y+2	; 0x02
    3632:	80 81       	ld	r24, Z
    3634:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <UART_sendByte>
		Str++;
    3638:	89 81       	ldd	r24, Y+1	; 0x01
    363a:	9a 81       	ldd	r25, Y+2	; 0x02
    363c:	01 96       	adiw	r24, 0x01	; 1
    363e:	9a 83       	std	Y+2, r25	; 0x02
    3640:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
	while(*Str != '\0')
    3642:	e9 81       	ldd	r30, Y+1	; 0x01
    3644:	fa 81       	ldd	r31, Y+2	; 0x02
    3646:	80 81       	ld	r24, Z
    3648:	88 23       	and	r24, r24
    364a:	89 f7       	brne	.-30     	; 0x362e <UART_sendString+0x10>
	{
		UART_sendByte(*Str);
		Str++;
	}
}
    364c:	0f 90       	pop	r0
    364e:	0f 90       	pop	r0
    3650:	cf 91       	pop	r28
    3652:	df 91       	pop	r29
    3654:	08 95       	ret

00003656 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) // Receive until #
{
    3656:	df 93       	push	r29
    3658:	cf 93       	push	r28
    365a:	00 d0       	rcall	.+0      	; 0x365c <UART_receiveString+0x6>
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
    3660:	9a 83       	std	Y+2, r25	; 0x02
    3662:	89 83       	std	Y+1, r24	; 0x01
    3664:	0a c0       	rjmp	.+20     	; 0x367a <UART_receiveString+0x24>
	while(*Str != '#')
	{
		*Str = UART_recieveByte();
    3666:	0e 94 00 1b 	call	0x3600	; 0x3600 <UART_recieveByte>
    366a:	e9 81       	ldd	r30, Y+1	; 0x01
    366c:	fa 81       	ldd	r31, Y+2	; 0x02
    366e:	80 83       	st	Z, r24
		Str++;
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	9a 81       	ldd	r25, Y+2	; 0x02
    3674:	01 96       	adiw	r24, 0x01	; 1
    3676:	9a 83       	std	Y+2, r25	; 0x02
    3678:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) // Receive until #
{
	while(*Str != '#')
    367a:	e9 81       	ldd	r30, Y+1	; 0x01
    367c:	fa 81       	ldd	r31, Y+2	; 0x02
    367e:	80 81       	ld	r24, Z
    3680:	83 32       	cpi	r24, 0x23	; 35
    3682:	89 f7       	brne	.-30     	; 0x3666 <UART_receiveString+0x10>
	{
		*Str = UART_recieveByte();
		Str++;
	}
	*Str = '\0';
    3684:	e9 81       	ldd	r30, Y+1	; 0x01
    3686:	fa 81       	ldd	r31, Y+2	; 0x02
    3688:	10 82       	st	Z, r1
}
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	cf 91       	pop	r28
    3690:	df 91       	pop	r29
    3692:	08 95       	ret

00003694 <__udivmodsi4>:
    3694:	a1 e2       	ldi	r26, 0x21	; 33
    3696:	1a 2e       	mov	r1, r26
    3698:	aa 1b       	sub	r26, r26
    369a:	bb 1b       	sub	r27, r27
    369c:	fd 01       	movw	r30, r26
    369e:	0d c0       	rjmp	.+26     	; 0x36ba <__udivmodsi4_ep>

000036a0 <__udivmodsi4_loop>:
    36a0:	aa 1f       	adc	r26, r26
    36a2:	bb 1f       	adc	r27, r27
    36a4:	ee 1f       	adc	r30, r30
    36a6:	ff 1f       	adc	r31, r31
    36a8:	a2 17       	cp	r26, r18
    36aa:	b3 07       	cpc	r27, r19
    36ac:	e4 07       	cpc	r30, r20
    36ae:	f5 07       	cpc	r31, r21
    36b0:	20 f0       	brcs	.+8      	; 0x36ba <__udivmodsi4_ep>
    36b2:	a2 1b       	sub	r26, r18
    36b4:	b3 0b       	sbc	r27, r19
    36b6:	e4 0b       	sbc	r30, r20
    36b8:	f5 0b       	sbc	r31, r21

000036ba <__udivmodsi4_ep>:
    36ba:	66 1f       	adc	r22, r22
    36bc:	77 1f       	adc	r23, r23
    36be:	88 1f       	adc	r24, r24
    36c0:	99 1f       	adc	r25, r25
    36c2:	1a 94       	dec	r1
    36c4:	69 f7       	brne	.-38     	; 0x36a0 <__udivmodsi4_loop>
    36c6:	60 95       	com	r22
    36c8:	70 95       	com	r23
    36ca:	80 95       	com	r24
    36cc:	90 95       	com	r25
    36ce:	9b 01       	movw	r18, r22
    36d0:	ac 01       	movw	r20, r24
    36d2:	bd 01       	movw	r22, r26
    36d4:	cf 01       	movw	r24, r30
    36d6:	08 95       	ret

000036d8 <__prologue_saves__>:
    36d8:	2f 92       	push	r2
    36da:	3f 92       	push	r3
    36dc:	4f 92       	push	r4
    36de:	5f 92       	push	r5
    36e0:	6f 92       	push	r6
    36e2:	7f 92       	push	r7
    36e4:	8f 92       	push	r8
    36e6:	9f 92       	push	r9
    36e8:	af 92       	push	r10
    36ea:	bf 92       	push	r11
    36ec:	cf 92       	push	r12
    36ee:	df 92       	push	r13
    36f0:	ef 92       	push	r14
    36f2:	ff 92       	push	r15
    36f4:	0f 93       	push	r16
    36f6:	1f 93       	push	r17
    36f8:	cf 93       	push	r28
    36fa:	df 93       	push	r29
    36fc:	cd b7       	in	r28, 0x3d	; 61
    36fe:	de b7       	in	r29, 0x3e	; 62
    3700:	ca 1b       	sub	r28, r26
    3702:	db 0b       	sbc	r29, r27
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	f8 94       	cli
    3708:	de bf       	out	0x3e, r29	; 62
    370a:	0f be       	out	0x3f, r0	; 63
    370c:	cd bf       	out	0x3d, r28	; 61
    370e:	09 94       	ijmp

00003710 <__epilogue_restores__>:
    3710:	2a 88       	ldd	r2, Y+18	; 0x12
    3712:	39 88       	ldd	r3, Y+17	; 0x11
    3714:	48 88       	ldd	r4, Y+16	; 0x10
    3716:	5f 84       	ldd	r5, Y+15	; 0x0f
    3718:	6e 84       	ldd	r6, Y+14	; 0x0e
    371a:	7d 84       	ldd	r7, Y+13	; 0x0d
    371c:	8c 84       	ldd	r8, Y+12	; 0x0c
    371e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3720:	aa 84       	ldd	r10, Y+10	; 0x0a
    3722:	b9 84       	ldd	r11, Y+9	; 0x09
    3724:	c8 84       	ldd	r12, Y+8	; 0x08
    3726:	df 80       	ldd	r13, Y+7	; 0x07
    3728:	ee 80       	ldd	r14, Y+6	; 0x06
    372a:	fd 80       	ldd	r15, Y+5	; 0x05
    372c:	0c 81       	ldd	r16, Y+4	; 0x04
    372e:	1b 81       	ldd	r17, Y+3	; 0x03
    3730:	aa 81       	ldd	r26, Y+2	; 0x02
    3732:	b9 81       	ldd	r27, Y+1	; 0x01
    3734:	ce 0f       	add	r28, r30
    3736:	d1 1d       	adc	r29, r1
    3738:	0f b6       	in	r0, 0x3f	; 63
    373a:	f8 94       	cli
    373c:	de bf       	out	0x3e, r29	; 62
    373e:	0f be       	out	0x3f, r0	; 63
    3740:	cd bf       	out	0x3d, r28	; 61
    3742:	ed 01       	movw	r28, r26
    3744:	08 95       	ret

00003746 <itoa>:
    3746:	fb 01       	movw	r30, r22
    3748:	9f 01       	movw	r18, r30
    374a:	e8 94       	clt
    374c:	42 30       	cpi	r20, 0x02	; 2
    374e:	c4 f0       	brlt	.+48     	; 0x3780 <itoa+0x3a>
    3750:	45 32       	cpi	r20, 0x25	; 37
    3752:	b4 f4       	brge	.+44     	; 0x3780 <itoa+0x3a>
    3754:	4a 30       	cpi	r20, 0x0A	; 10
    3756:	29 f4       	brne	.+10     	; 0x3762 <itoa+0x1c>
    3758:	97 fb       	bst	r25, 7
    375a:	1e f4       	brtc	.+6      	; 0x3762 <itoa+0x1c>
    375c:	90 95       	com	r25
    375e:	81 95       	neg	r24
    3760:	9f 4f       	sbci	r25, 0xFF	; 255
    3762:	64 2f       	mov	r22, r20
    3764:	77 27       	eor	r23, r23
    3766:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <__udivmodhi4>
    376a:	80 5d       	subi	r24, 0xD0	; 208
    376c:	8a 33       	cpi	r24, 0x3A	; 58
    376e:	0c f0       	brlt	.+2      	; 0x3772 <itoa+0x2c>
    3770:	89 5d       	subi	r24, 0xD9	; 217
    3772:	81 93       	st	Z+, r24
    3774:	cb 01       	movw	r24, r22
    3776:	00 97       	sbiw	r24, 0x00	; 0
    3778:	a1 f7       	brne	.-24     	; 0x3762 <itoa+0x1c>
    377a:	16 f4       	brtc	.+4      	; 0x3780 <itoa+0x3a>
    377c:	5d e2       	ldi	r21, 0x2D	; 45
    377e:	51 93       	st	Z+, r21
    3780:	10 82       	st	Z, r1
    3782:	c9 01       	movw	r24, r18
    3784:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <strrev>

00003788 <strrev>:
    3788:	dc 01       	movw	r26, r24
    378a:	fc 01       	movw	r30, r24
    378c:	67 2f       	mov	r22, r23
    378e:	71 91       	ld	r23, Z+
    3790:	77 23       	and	r23, r23
    3792:	e1 f7       	brne	.-8      	; 0x378c <strrev+0x4>
    3794:	32 97       	sbiw	r30, 0x02	; 2
    3796:	04 c0       	rjmp	.+8      	; 0x37a0 <strrev+0x18>
    3798:	7c 91       	ld	r23, X
    379a:	6d 93       	st	X+, r22
    379c:	70 83       	st	Z, r23
    379e:	62 91       	ld	r22, -Z
    37a0:	ae 17       	cp	r26, r30
    37a2:	bf 07       	cpc	r27, r31
    37a4:	c8 f3       	brcs	.-14     	; 0x3798 <strrev+0x10>
    37a6:	08 95       	ret

000037a8 <__udivmodhi4>:
    37a8:	aa 1b       	sub	r26, r26
    37aa:	bb 1b       	sub	r27, r27
    37ac:	51 e1       	ldi	r21, 0x11	; 17
    37ae:	07 c0       	rjmp	.+14     	; 0x37be <__udivmodhi4_ep>

000037b0 <__udivmodhi4_loop>:
    37b0:	aa 1f       	adc	r26, r26
    37b2:	bb 1f       	adc	r27, r27
    37b4:	a6 17       	cp	r26, r22
    37b6:	b7 07       	cpc	r27, r23
    37b8:	10 f0       	brcs	.+4      	; 0x37be <__udivmodhi4_ep>
    37ba:	a6 1b       	sub	r26, r22
    37bc:	b7 0b       	sbc	r27, r23

000037be <__udivmodhi4_ep>:
    37be:	88 1f       	adc	r24, r24
    37c0:	99 1f       	adc	r25, r25
    37c2:	5a 95       	dec	r21
    37c4:	a9 f7       	brne	.-22     	; 0x37b0 <__udivmodhi4_loop>
    37c6:	80 95       	com	r24
    37c8:	90 95       	com	r25
    37ca:	bc 01       	movw	r22, r24
    37cc:	cd 01       	movw	r24, r26
    37ce:	08 95       	ret

000037d0 <_exit>:
    37d0:	f8 94       	cli

000037d2 <__stop_program>:
    37d2:	ff cf       	rjmp	.-2      	; 0x37d2 <__stop_program>
